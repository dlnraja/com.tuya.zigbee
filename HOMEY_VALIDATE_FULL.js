const { execSync } = require("child_process"); const fs = require("fs"); const path = require("path"); console.log("🔍 HOMEY VALIDATE - Validation des drivers avec Homey..."); function validateWithHomey() { const driversPath = path.join(process.cwd(), "drivers"); if (!fs.existsSync(driversPath)) { console.error("❌ Dossier drivers non trouvé"); return { valid: 0, invalid: 0 }; } const driverDirs = fs.readdirSync(driversPath, { withFileTypes: true }).filter(d => d.isDirectory()).map(d => d.name); console.log(`📁 Trouvé ${driverDirs.length} drivers à valider avec Homey`); let valid = 0; let invalid = 0; for (const driverDir of driverDirs.slice(0, 5)) { const driverPath = path.join(driversPath, driverDir); console.log(`\n🔍 Validation de ${driverDir}...`); try { const result = execSync(`cd "${driverPath}" && npx homey app validate`, { encoding: "utf8", stdio: "pipe" }); if (result.includes("Validation successful")) { console.log(`  ✅ ${driverDir} - VALIDE`); valid++; } else { console.log(`  ❌ ${driverDir} - INVALIDE`); invalid++; } } catch (error) { console.log(`  ❌ ${driverDir} - Erreur: ${error.message}`); invalid++; } } return { valid, invalid }; } try { const { valid, invalid } = validateWithHomey(); console.log(`\n🎉 VALIDATION HOMEY TERMINÉE !`); console.log(`✅ Drivers valides: ${valid}`); console.log(`❌ Drivers invalides: ${invalid}`); console.log(`📊 Total: ${valid + invalid}`); console.log("::END::HOMEY_VALIDATE::OK"); process.exit(0); } catch (error) { console.error("💥 Erreur fatale:", error); console.log("::END::HOMEY_VALIDATE::FAIL"); process.exit(1); }
