"import {TextDecoder, TextEncoder} from \"node:util\";\nimport {Zcl} from \"zigbee-herdsman\";\nimport * as fz from \"../converters/fromZigbee\";\nimport * as tz from \"../converters/toZigbee\";\nimport * as libColor from \"../lib/color\";\nimport {ColorMode, colorModeLookup} from \"../lib/constants\";\nimport * as exposes from \"../lib/exposes\";\nimport * as legacy from \"../lib/legacy\";\nimport {logger} from \"../lib/logger\";\nimport * as m from \"../lib/modernExtend\";\nimport * as reporting from \"../lib/reporting\";\nimport * as globalStore from \"../lib/store\";\nimport * as tuya from \"../lib/tuya\";\nimport type {DefinitionWithExtend, Expose, Fz, KeyValue, KeyValueAny, KeyValueString, Tz, Zh} from \"../lib/types\";\nimport * as utils from \"../lib/utils\";\nimport {addActionGroup, hasAlreadyProcessedMessage, postfixWithEndpointName} from \"../lib/utils\";\nimport * as zosung from \"../lib/zosung\";\n\nconst NS = \"zhc:tuya\";\nconst {tuyaLight, tuyaBase, tuyaMagicPacket, dpBinary, dpNumeric, dpEnumLookup, tuyaWeatherForecast} = tuya.modernExtend;\n\nconst e = exposes.presets;\nconst ea = exposes.access;\n\nconst fzZosung = zosung.fzZosung;\nconst tzZosung = zosung.tzZosung;\nconst ez = zosung.presetsZosung;\n\ninterface TuyaGenOnOff {\n    attributes: never;\n    commands: {tuyaCountdown: {data: Buffer}};\n    commandResponses: never;\n}\n\ninterface Ts0049Countdown {\n    attributes: never;\n    commands: {setCountdown: {data: Buffer}};\n\n    commandResponses: never;\n}\nconst storeLocal = {\n    getPrivatePJ1203A: (device: Zh.Device) => {\n        let priv = globalStore.getValue(device, \"private_state\");\n        if (priv === undefined) {\n            //\n            // The PJ-1203A is sending quick sequences of messages containing a single datapoint.\n            // A sequence occurs every `update_frequency` seconds (10s by default)\n            //\n            // A typical sequence is composed of two identical groups for channel a and b.\n            //\n            //     102 energy_flow_a\n            //     112 voltage\n            //     113 current_a\n            //     101 power_a\n            //     110 power_factor_a\n            //     111 ac_frequency\n            //     115 power_ab\n            //     ---\n            //     104 energy_flow_b\n            //     112 voltage\n            //     114 current_b\n            //     105 power_b\n            //     121 power_factor_b\n            //     111 ac_frequency\n            //     115 power_ab\n            //\n            // It should be noted that when no current is detected on channel x then\n            // energy_flow_x is not emitted and current_x==0, power_x==0 and power_factor_x==100.\n            //\n            // The other datapoints are emitted every few minutes.\n            //\n            // There is a known issue on the _TZE204_81yrt3lo (with appVersion 74, stackVersion 0 and hwVersion 1).\n            // The energy_flow datapoints are (incorrectly) emitted during the next update. This is quite problematic\n            // because that means that the direction can be inverted for up to update_frequency seconds.\n            //\n            // The features implemented here are\n            //   - cache the datapoints for each channel and publish them together.\n            //   - (OPTIONAL) solve the issue described above by waiting for the next energy flow datapoint\n            //     before publishing the cached channel data.\n            //   - (OPTIONAL) provide signed power instead of energy flow.\n            //   - detect missing or reordered Zigbee message using the Tuya 'seq' attribute and invalidate\n            //     cached data accordingly.\n            //\n            priv = {\n                // Cached values for both channels\n                sign_a: null,\n                sign_b: null,\n                power_a: null,\n                power_b: null,\n                current_a: null,\n                current_b: null,\n                power_factor_a: null,\n                power_factor_b: null,\n                timestamp_a: null,\n                timestamp_b: null,\n                // Used to detect missing or misordered messages.\n                last_seq: -99999,\n                // Do all PJ-1203A increment seq by 256? If not, then this is\n                // the value that will have to be customized.\n                seq_inc: 256,\n                // Also need to save the last published SIGNED values of\n                // power_a and power_b to recompute power_ab on the fly.\n                pub_power_a: null,\n                pub_power_b: null,\n\n                recompute_power_ab: function (result: KeyValueAny) {\n                    let modified = false;\n                    if (\"power_a\" in result) {\n                        this.pub_power_a = result.power_a * (result.energy_flow_a === \"producing\" ? -1 : 1);\n                        modified = true;\n                    }\n                    if (\"power_b\" in result) {\n                        this.pub_power_b = result.power_b * (result.energy_flow_b === \"producing\" ? -1 : 1);\n                        modified = true;\n                    }\n                    if (modified) {\n                        if (this.pub_power_a !== null && this.pub_power_b !== null) {\n                            // Cancel and reapply the scaling by 10 to avoid floating-point rounding errors\n                            // such as 79.8 - 37.1 = 42.699999999999996\n                            result.power_ab = Math.round(10 * this.pub_power_a + 10 * this.pub_power_b) / 10;\n                        }\n                    }\n                },\n\n                flush: function (result: KeyValueAny, channel: string, options: KeyValue) {\n                    const sign = this[`sign_${channel}`];\n                    const power = this[`power_${channel}`];\n                    const current = this[`current_${channel}`];\n                    const powerFactor = this[`power_factor_${channel}`];\n                    this[`sign_${channel}`] = this[`power_${channel}`] = this[`current_${channel}`] = this[`power_factor_${channel}`] = null;\n                    // Only publish if the set is complete otherwise discard everything.\n                    if (sign !== null && power !== null && current !== null && powerFactor !== null) {\n                        const signedPowerKey = `signed_power_${channel}`;\n                        const invertedEnergyFlowKey = `invert_energy_flow_${channel}`;\n                        const signedPower = options[signedPowerKey] != null ? options[signedPowerKey] : false;\n                        const invertedEnergyFlow = options[invertedEnergyFlowKey] != null ? options[invertedEnergyFlowKey] : false;\n                        if (signedPower) {\n                            result[`power_${channel}`] = sign * power;\n                            result[`energy_flow_${channel}`] = \"sign\";\n                        } else {\n                            result[`power_${channel}`] = power;\n                            result[`energy_flow_${channel}`] = sign * (invertedEnergyFlow ? -1 : 1) >= 0 ? \"consuming\" : \"producing\";\n                        }\n                        result[`timestamp_${channel}`] = this[`timestamp_${channel}`];\n                        result[`current_${channel}`] = current;\n                        result[`power_factor_${channel}`] = powerFactor;\n                        this.recompute_power_ab(result);\n                        return true;\n                    }\n                    return false;\n                },\n\n                // When the device does not detect any flow, it stops sending\n                // the energy_flow datapoint (102 and 104) and always set\n                // current_x=0, power_x=0 and power_factor_x=100.\n                //\n                // So if we see a datapoint with current==0 or power==0\n                // then we can safely assume that we are in that zero energy state.\n                //\n                // Also, the publication of a zero energy state is not delayed\n                // when option late_energy_flow_a|b is set.\n                flushZero: function (result: KeyValueAny, channel: string, options: KeyValue) {\n                    this[`sign_${channel}`] = +1;\n                    this[`power_${channel}`] = 0;\n                    this[`timestamp_${channel}`] = new Date().toISOString();\n                    this[`current_${channel}`] = 0;\n                    this[`power_factor_${channel}`] = 100;\n                    this.flush(result, channel, options);\n                },\n\n                clear: () => {\n                    priv.sign_a = null;\n                    priv.sign_b = null;\n                    priv.power_a = null;\n                    priv.power_b = null;\n                    priv.current_a = null;\n                    priv.current_b = null;\n                    priv.power_factor_a = null;\n                    priv.power_factor_b = null;\n                },\n            };\n            globalStore.putValue(device, \"private_state\", priv);\n        }\n        return priv;\n    },\n};\n\nconst convLocal = {\n    energyFlowPJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const priv = storeLocal.getPrivatePJ1203A(meta.device);\n                const result = {};\n                priv[`sign_${channel}`] = v === 1 ? -1 : +1;\n                const lateEnergyFlowKey = `late_energy_flow_${channel}`;\n                const lateEnergyFlow = options[lateEnergyFlowKey] != null ? options[lateEnergyFlowKey] : false;\n                if (lateEnergyFlow) {\n                    priv.flush(result, channel, options);\n                }\n                return result;\n            },\n        };\n    },\n\n    powerPJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const priv = storeLocal.getPrivatePJ1203A(meta.device);\n                const result = {};\n                priv[`power_${channel}`] = v / 10;\n                priv[`timestamp_${channel}`] = new Date().toISOString();\n                if (v === 0) {\n                    priv.flushZero(result, channel, options);\n                    return result;\n                }\n                return result;\n            },\n        };\n    },\n\n    currentPJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const priv = storeLocal.getPrivatePJ1203A(meta.device);\n                const result = {};\n                priv[`current_${channel}`] = v / 1000;\n                if (v === 0) {\n                    priv.flushZero(result, channel, options);\n                    return result;\n                }\n                return result;\n            },\n        };\n    },\n\n    powerFactorPJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const priv = storeLocal.getPrivatePJ1203A(meta.device);\n                const result = {};\n                priv[`power_factor_${channel}`] = v;\n                const lateEnergyFlowKey = `late_energy_flow_${channel}`;\n                const lateEnergyFlow = options[lateEnergyFlowKey] != null ? options[lateEnergyFlowKey] : false;\n                if (!lateEnergyFlow) {\n                    priv.flush(result, channel, options);\n                }\n                return result;\n            },\n        };\n    },\n\n    powerAbPJ1203A: () => {\n        return {\n            // power_ab datapoint is broken and will be recomputed so ignore it.\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                return {};\n            },\n        };\n    },\n\n    energyForwardPJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const invertedEnergyFlowKey = `invert_energy_flow_${channel}`;\n                const result_key = options[invertedEnergyFlowKey] ? `energy_produced_${channel}` : `energy_${channel}`;\n                const result = {} as KeyValueAny;\n                result[result_key] = v / 100;\n\n                return result;\n            },\n        };\n    },\n\n    energyReversePJ1203A: (channel: string) => {\n        return {\n            from: (v: number, meta: Fz.Meta, options: KeyValue) => {\n                const invertedEnergyFlowKey = `invert_energy_flow_${channel}`;\n                const result_key = options[invertedEnergyFlowKey] ? `energy_${channel}` : `energy_produced_${channel}`;\n                const result = {} as KeyValueAny;\n                result[result_key] = v / 100;\n\n                return result;\n            },\n        };\n    },\n\n    sceneCubeAction: () => {\n        const lookup = [\"side_1\", \"side_2\", \"side_3\", \"side_4\", \"knock\", \"shake\"];\n        const expose = e.action(lookup);\n        return [\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x01,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {side_1: 0},\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x02,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {side_2: 0},\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x03,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {side_3: 0},\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x04,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {side_4: 0},\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x05,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {knock: 0},\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x06,\n                name: \"action\",\n                type: tuya.dataTypes.bool,\n                readOnly: true,\n                expose: expose,\n                lookup: {shake: 0},\n            }),\n        ];\n    },\n    name: {\n        to: (v: string, meta: Tz.Meta) => {\n            const utf8bytes = new TextEncoder().encode(v);\n            return Array.from(utf8bytes, (utf8bytes) => utf8bytes.toString(16).padStart(4, \"0\")).join(\"\");\n        },\n        from: (v: string, meta: Fz.Meta) => {\n            const bytes = [];\n            for (let i = 0; i < v.length; i += 4) {\n                bytes.push(Number.parseInt(v.slice(i, i + 4), 16));\n            }\n            const hexToBytes = Uint8Array.from(bytes);\n            return new TextDecoder(\"utf-8\").decode(hexToBytes);\n        },\n    },\n};\n\nconst tzLocal = {\n    ts0049_countdown: {\n        key: [\"water_countdown\"],\n        convertSet: async (entity, key, value, meta) => {\n            utils.assertNumber(value);\n            const data = Buffer.alloc(5);\n            const scaledValue = value * 60; //\n            data.writeUInt32BE(scaledValue, 1); //\n            data[0] = 0x0b; //\n\n            await entity.command<\"manuSpecificTuyaE001\", \"setCountdown\", Ts0049Countdown>(\"manuSpecificTuyaE001\", \"setCountdown\", {data});\n        },\n    } satisfies Tz.Converter,\n\n    ts110eCountdown: {\n        key: [\"countdown\"],\n        convertSet: async (entity, key, value, meta) => {\n            utils.assertNumber(value);\n            const data = Buffer.alloc(4);\n            data.writeUInt32LE(value);\n            await entity.command<\"genOnOff\", \"tuyaCountdown\", TuyaGenOnOff>(\"genOnOff\", \"tuyaCountdown\", {data});\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS030F_border: {\n        key: [\"border\"],\n        convertSet: async (entity, key, value, meta) => {\n            const lookup = {up: 0, down: 1, up_delete: 2, down_delete: 3};\n            await entity.write(0xe001, {\n                57345: {value: utils.getFromLookup(value, lookup), type: 0x30},\n            });\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0726_switch_mode: {\n        key: [\"switch_mode\"],\n        convertSet: async (entity, key, value, meta) => {\n            await entity.write(0xe001, {\n                53280: {\n                    value: utils.getFromLookup(value, {switch: 0, scene: 1}),\n                    type: 0x30,\n                },\n            });\n            return {state: {switch_mode: value}};\n        },\n    } satisfies Tz.Converter,\n    led_control: {\n        key: [\"brightness\", \"color\", \"color_temp\", \"transition\"],\n        options: [exposes.options.color_sync()],\n        convertSet: async (entity, _key, _value, meta) => {\n            const newState: KeyValue = {};\n\n            // The color mode encodes whether the light is using its white LEDs or its color LEDs\n            let colorMode = meta.state.color_mode ?? colorModeLookup[ColorMode.ColorTemp];\n\n            // Color mode switching is done by setting color temperature (switch to white LEDs) or setting color (switch\n            // to color LEDs)\n            if (\"color_temp\" in meta.message) colorMode = colorModeLookup[ColorMode.ColorTemp];\n            if (\"color\" in meta.message) colorMode = colorModeLookup[ColorMode.HS];\n\n            if (colorMode !== meta.state.color_mode) {\n                newState.color_mode = colorMode;\n\n                // To switch between white mode and color mode, we have to send a special command:\n                const rgbMode = colorMode === colorModeLookup[ColorMode.HS] ? 1 : 0;\n                await entity.command(\"lightingColorCtrl\", \"tuyaRgbMode\", {\n                    enable: rgbMode,\n                });\n            }\n\n            // A transition time of 0 would be treated as about 1 second, probably some kind of fallback/default\n            // transition time, so for \"no transition\" we use 1 (tenth of a second).\n            const transtime = typeof meta.message.transition === \"number\" ? meta.message.transition * 10 : 0.1;\n\n            if (colorMode === colorModeLookup[ColorMode.ColorTemp]) {\n                if (\"brightness\" in meta.message) {\n                    await entity.command(\n                        \"genLevelCtrl\",\n                        \"moveToLevel\",\n                        {level: Number(meta.message.brightness), transtime},\n                        utils.getOptions(meta.mapped, entity),\n                    );\n                    newState.brightness = meta.message.brightness;\n                }\n\n                if (\"color_temp\" in meta.message) {\n                    await entity.command(\n                        \"lightingColorCtrl\",\n                        \"moveToColorTemp\",\n                        {\n                            colortemp: meta.message.color_temp as number,\n                            transtime: transtime,\n                        },\n                        utils.getOptions(meta.mapped, entity),\n                    );\n                    newState.color_temp = meta.message.color_temp;\n                }\n            } else if (colorMode === colorModeLookup[ColorMode.HS]) {\n                if (\"brightness\" in meta.message || \"color\" in meta.message) {\n                    // We ignore the brightness of the color and instead use the overall brightness setting of the lamp\n                    // for the brightness because I think that's the expected behavior and also because the color\n                    // conversion below always returns 100 as brightness (\"value\") even for very dark colors, except\n                    // when the color is completely black/zero.\n\n                    // Load current state or defaults\n                    const newSettings = {\n                        brightness: meta.state.brightness ?? 254, //      full brightness\n                        // @ts-expect-error ignore\n                        hue: meta.state.color?.hue ?? 0, //          red\n                        // @ts-expect-error ignore\n                        saturation: meta.state.color?.saturation ?? 100, // full saturation\n                    };\n\n                    // Apply changes\n                    if (\"brightness\" in meta.message) {\n                        newSettings.brightness = meta.message.brightness;\n                        newState.brightness = meta.message.brightness;\n                    }\n                    if (\"color\" in meta.message) {\n                        // The Z2M UI sends `{ hex:'#xxxxxx' }`.\n                        // Home Assistant sends `{ h: xxx, s: xxx }`.\n                        // We convert the former into the latter.\n                        const c = libColor.Color.fromConverterArg(meta.message.color);\n                        if (c.isRGB()) {\n                            // https://github.com/Koenkk/zigbee2mqtt/issues/13421#issuecomment-1426044963\n                            c.hsv = c.rgb.gammaCorrected().toXY().toHSV();\n                        }\n                        const color = c.hsv;\n\n                        newSettings.hue = color.hue;\n                        newSettings.saturation = color.saturation;\n\n                        newState.color = {\n                            hue: color.hue,\n                            saturation: color.saturation,\n                        };\n                    }\n\n                    // Convert to device specific format and send\n                    const brightness = utils.toNumber(newSettings.brightness, \"brightness\");\n                    const zclData = {\n                        brightness: utils.mapNumberRange(brightness, 0, 254, 0, 1000),\n                        hue: newSettings.hue,\n                        saturation: utils.mapNumberRange(newSettings.saturation, 0, 100, 0, 1000),\n                    };\n                    // This command doesn't support a transition time\n                    await entity.command(\n                        \"lightingColorCtrl\",\n                        \"tuyaMoveToHueAndSaturationBrightness2\",\n                        zclData,\n                        utils.getOptions(meta.mapped, entity),\n                    );\n                }\n            }\n\n            // If we're in white mode, calculate a matching display color for the set color temperature. This also kind\n            // of works in the other direction.\n            Object.assign(newState, libColor.syncColorState(newState, meta.state, entity, meta.options));\n\n            return {state: newState};\n        },\n        convertGet: async (entity, key, meta) => {\n            await entity.read(\"genLevelCtrl\", [\"currentLevel\"]);\n            await entity.read(\"lightingColorCtrl\", [\"currentHue\", \"currentSaturation\", \"tuyaRgbMode\", \"colorTemperature\"]);\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0504B_color: {\n        key: [\"color\"],\n        convertSet: async (entity, key, value, meta) => {\n            const color = libColor.Color.fromConverterArg(value);\n            const enableWhite =\n                (color.isRGB() && color.rgb.red === 1 && color.rgb.green === 1 && color.rgb.blue === 1) ||\n                // Zigbee2MQTT frontend white value\n                (color.isXY() && (color.xy.x === 0.3125 || color.xy.y === 0.32894736842105265)) ||\n                // Home Assistant white color picker value\n                (color.isXY() && (color.xy.x === 0.323 || color.xy.y === 0.329));\n\n            if (enableWhite) {\n                await entity.command(\"lightingColorCtrl\", \"tuyaRgbMode\", {enable: 0});\n                const newState: KeyValue = {color_mode: \"xy\"};\n                if (color.isXY()) {\n                    newState.color = color.xy;\n                } else {\n                    newState.color = color.rgb.gammaCorrected().toXY().rounded(4);\n                }\n                return {\n                    state: libColor.syncColorState(newState, meta.state, entity, meta.options) as KeyValue,\n                };\n            }\n            return await tz.light_color.convertSet(entity, key, value, meta);\n        },\n        convertGet: tz.light_color.convertGet,\n    } satisfies Tz.Converter,\n    TS0224: {\n        key: [\"light\", \"duration\", \"volume\"],\n        convertSet: async (entity, key, value, meta) => {\n            if (key === \"light\") {\n                utils.assertString(value, \"light\");\n                await entity.command(\"genOnOff\", value.toLowerCase() === \"on\" ? \"on\" : \"off\", {}, utils.getOptions(meta.mapped, entity));\n            } else if (key === \"duration\") {\n                await entity.write(\"ssIasWd\", {maxDuration: value as number}, utils.getOptions(meta.mapped, entity));\n            } else if (key === \"volume\") {\n                const lookup: KeyValue = {mute: 0, low: 10, medium: 30, high: 50};\n                utils.assertString(value, \"volume\");\n                const lookupValue = lookup[value];\n                // biome-ignore lint/style/noParameterAssign: ignored using `--suppress`\n                value = value.toLowerCase();\n                utils.validateValue(value, Object.keys(lookup));\n                await entity.write(\"ssIasWd\", {2: {value: lookupValue, type: 0x0a}}, utils.getOptions(meta.mapped, entity));\n            }\n            return {state: {[key]: value}};\n        },\n    } satisfies Tz.Converter,\n    temperature_unit: {\n        key: [\"temperature_unit\"],\n        convertSet: async (entity, key, value, meta) => {\n            switch (key) {\n                case \"temperature_unit\": {\n                    utils.assertString(value, \"temperature_unit\");\n                    await entity.write(\"manuSpecificTuya2\", {\n                        \"57355\": {value: {celsius: 0, fahrenheit: 1}[value], type: 48},\n                    });\n                    break;\n                }\n                default: // Unknown key\n                    logger.warning(`Unhandled key ${key}`, NS);\n            }\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS011F_threshold: {\n        key: [\n            \"temperature_threshold\",\n            \"temperature_breaker\",\n            \"power_threshold\",\n            \"power_breaker\",\n            \"over_current_threshold\",\n            \"over_current_breaker\",\n            \"over_voltage_threshold\",\n            \"over_voltage_breaker\",\n            \"under_voltage_threshold\",\n            \"under_voltage_breaker\",\n        ],\n        convertSet: async (entity, key, value, meta) => {\n            const onOffLookup = {on: 1, off: 0};\n            switch (key) {\n                case \"temperature_threshold\": {\n                    const state = meta.state.temperature_breaker;\n                    const buf = Buffer.from([5, utils.getFromLookup(state, onOffLookup), 0, utils.toNumber(value, \"temperature_threshold\")]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions2\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"temperature_breaker\": {\n                    const threshold = meta.state.temperature_threshold;\n                    const number = utils.toNumber(threshold, \"temperature_threshold\");\n                    const buf = Buffer.from([5, utils.getFromLookup(value, onOffLookup), 0, number]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions2\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"power_threshold\": {\n                    const state = meta.state.power_breaker;\n                    const buf = Buffer.from([7, utils.getFromLookup(state, onOffLookup), 0, utils.toNumber(value, \"power_breaker\")]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions2\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"power_breaker\": {\n                    const threshold = meta.state.power_threshold;\n                    const number = utils.toNumber(threshold, \"power_breaker\");\n                    const buf = Buffer.from([7, utils.getFromLookup(value, onOffLookup), 0, number]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions2\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"over_current_threshold\": {\n                    const state = meta.state.over_current_breaker;\n                    const buf = Buffer.from([1, utils.getFromLookup(state, onOffLookup), 0, utils.toNumber(value, \"over_current_threshold\")]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"over_current_breaker\": {\n                    const threshold = meta.state.over_current_threshold;\n                    const number = utils.toNumber(threshold, \"over_current_threshold\");\n                    const buf = Buffer.from([1, utils.getFromLookup(value, onOffLookup), 0, number]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"over_voltage_threshold\": {\n                    const state = meta.state.over_voltage_breaker;\n                    const buf = Buffer.alloc(4);\n                    buf.writeUInt8(3, 0);\n                    buf.writeUInt8(utils.getFromLookup(state, onOffLookup), 1);\n                    buf.writeUInt16BE(utils.toNumber(value, \"over_voltage_threshold\"), 2);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"over_voltage_breaker\": {\n                    const threshold = meta.state.over_voltage_threshold;\n                    const number = utils.toNumber(threshold, \"over_voltage_threshold\");\n                    const buf = Buffer.from([3, utils.getFromLookup(value, onOffLookup), 0, number]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"under_voltage_threshold\": {\n                    const state = meta.state.under_voltage_breaker;\n                    const buf = Buffer.from([4, utils.getFromLookup(state, onOffLookup), 0, utils.toNumber(value, \"under_voltage_threshold\")]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                case \"under_voltage_breaker\": {\n                    const threshold = meta.state.under_voltage_threshold;\n                    const number = utils.toNumber(threshold, \"under_voltage_breaker\");\n                    const buf = Buffer.from([4, utils.getFromLookup(value, onOffLookup), 0, number]);\n                    await entity.command(\"manuSpecificTuya3\", \"setOptions3\", {\n                        data: buf,\n                    });\n                    break;\n                }\n                default: // Unknown key\n                    logger.warning(`Unhandled key ${key}`, NS);\n            }\n        },\n    } satisfies Tz.Converter,\n    invert_cover_percent_fix: {\n        key: [\"state\", \"position\"],\n        convertSet: async (entity, key, value, meta) => {\n            const shouldInvert = key === \"position\" && meta.options.cover_position_percent_fix;\n            const newValue = shouldInvert ? 100 - Number(value) : value;\n            return await legacy.toZigbee.tuya_cover_control.convertSet(entity, key, newValue, meta);\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0505B_1_transitionFixesOnOffBrightness: {\n        ...tz.light_onoff_brightness,\n        convertSet: async (entity, key, value, meta) => {\n            // This light has two issues:\n            // 1. If passing transition = 0, it will behave as if transition = 1s.\n            // 2. If turning off with a transition, and turning on during the transition, it will turn off\n            //    at the end of the first transition timer, despite order to turn on\n\n            // Workaround for issue 1: patch transition in input message\n            const transition = utils.getTransition(entity, \"brightness\", meta);\n            let transitionSeconds = transition.time / 10;\n            let newMeta = meta;\n            if (transitionSeconds === 0) {\n                const {message} = meta;\n                const wantedState = message.state != null ? (typeof message.state === \"string\" ? message.state.toLowerCase() : null) : undefined;\n                newMeta = {...meta}; // Clone meta to avoid modifying the original\n                if (wantedState === \"off\") {\n                    // Erase transition because that way we get actual instant turn off\n                    newMeta.message = {state: \"OFF\"};\n                } else {\n                    // Best we can do is set the transition to 0.1 seconds\n                    // That is the same thing as is done for TS0505B_2\n                    transitionSeconds = 0.1;\n                    newMeta.message = {...message, transition: transitionSeconds}; // Will get re-parsed by original light_onoff_brightness\n                }\n            }\n\n            const ret = await tz.light_onoff_brightness.convertSet(entity, key, value, newMeta);\n\n            // Workaround for issue 2:\n            // Get the current state of the light after transition time + 0.1s\n            // This won't fix the light's state, but at least it will make us aware that it's off,\n            // allowing user apps to turn it on again if needed.\n            // This could probably be improved by actually turning it on again if necessary.\n            if (transitionSeconds !== 0) {\n                setTimeout(\n                    () => {\n                        tz.on_off.convertGet(entity, \"state\", meta).catch((error) => {\n                            logger.warning(`Error getting state of TS0505B_1 after transition: ${error.message}`, NS);\n                        });\n                    },\n                    transitionSeconds * 1000 + 100,\n                );\n            }\n\n            return ret;\n        },\n    } satisfies Tz.Converter,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0601_knob_dimmer_switch_group_id: {\n        key: [\"group_id\"],\n        convertSet: async (entity, key, value, meta) => {\n            // The device uses custom group command known from miboxer switches to bind to a group.\n\n            await entity.command(\"genGroups\", \"miboxerSetZones\", {\n                zones: [{zoneNum: 1, groupId: Number(value)}],\n            });\n        },\n    } satisfies Tz.Converter,\n};\n\nconst fzLocal = {\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0726_action: {\n        cluster: \"genOnOff\",\n        type: [\"commandTuyaAction\"],\n        convert: (model, msg, publish, options, meta) => {\n            return {action: `scene_${msg.endpoint.ID}`};\n        },\n    } satisfies Fz.Converter<\"genOnOff\", undefined, [\"commandTuyaAction\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0222_humidity: {\n        ...fz.humidity,\n        convert: (model, msg, publish, options, meta) => {\n            const result = fz.humidity.convert(model, msg, publish, options, meta) as KeyValueAny;\n            if (result) result.humidity *= 10;\n            return result;\n        },\n    } satisfies Fz.Converter<\"msRelativeHumidity\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    scene_recall: {\n        cluster: \"genScenes\",\n        type: \"commandRecall\",\n        convert: (model, msg, publish, options, meta) => {\n            if (hasAlreadyProcessedMessage(msg, model)) return;\n            const payload = {\n                action: postfixWithEndpointName(`scene_${msg.data.sceneid}`, msg, model, meta),\n            };\n            addActionGroup(payload, msg, model);\n            return payload;\n        },\n    } satisfies Fz.Converter<\"genScenes\", undefined, \"commandRecall\">,\n    scenes_recall_scene_65029: {\n        cluster: \"65029\",\n        type: [\"raw\", \"attributeReport\"],\n        convert: (model, msg, publish, options, meta) => {\n            const id = meta.device.modelID === \"005f0c3b\" ? msg.data[0] : msg.data[msg.data.length - 1];\n            return {action: `scene_${id}`};\n        },\n    } satisfies Fz.Converter<\"65029\", undefined, [\"raw\", \"attributeReport\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0201_battery: {\n        cluster: \"genPowerCfg\",\n        type: [\"attributeReport\", \"readResponse\"],\n        convert: (model, msg, publish, options, meta) => {\n            // https://github.com/Koenkk/zigbee2mqtt/issues/11470\n            // https://github.com/Koenkk/zigbee-herdsman-converters/pull/8246\n            if (\n                msg.data.batteryPercentageRemaining === 200 &&\n                msg.data.batteryVoltage < 30 &&\n                ![\"_TZ3000_lqmvrwa2\"].includes(meta.device.manufacturerName)\n            )\n                return;\n            return fz.battery.convert(model, msg, publish, options, meta);\n        },\n    } satisfies Fz.Converter<\"genPowerCfg\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS0201_humidity: {\n        ...fz.humidity,\n        convert: (model, msg, publish, options, meta) => {\n            if ([\"_TZ3210_ncw88jfq\", \"_TZ3000_ywagc4rj\"].includes(meta.device.manufacturerName)) {\n                msg.data.measuredValue *= 10;\n            }\n            return fz.humidity.convert(model, msg, publish, options, meta);\n        },\n    } satisfies Fz.Converter<\"msRelativeHumidity\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    humidity10: {\n        cluster: \"msRelativeHumidity\",\n        type: [\"attributeReport\", \"readResponse\"],\n        convert: (model, msg, publish, options, meta) => {\n            const humidity = msg.data.measuredValue / 10.0;\n            if (humidity >= 0 && humidity <= 100) {\n                return {humidity};\n            }\n        },\n    } satisfies Fz.Converter<\"msRelativeHumidity\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    temperature_unit: {\n        cluster: \"manuSpecificTuya2\",\n        type: [\"attributeReport\", \"readResponse\"],\n        convert: (model, msg, publish, options, meta) => {\n            const result: KeyValue = {};\n            if (msg.data[\"57355\"] !== undefined) {\n                result.temperature_unit = utils.getFromLookup(msg.data[\"57355\"], {\n                    \"0\": \"celsius\",\n                    \"1\": \"fahrenheit\",\n                });\n            }\n            return result;\n        },\n    } satisfies Fz.Converter<\"manuSpecificTuya2\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS011F_electrical_measurement: {\n        ...fz.electrical_measurement,\n        convert: (model, msg, publish, options, meta) => {\n            const result = (fz.electrical_measurement.convert(model, msg, publish, options, meta) as KeyValueAny) ?? {};\n            const lookup: KeyValueString = {\n                power: \"activePower\",\n                current: \"rmsCurrent\",\n                voltage: \"rmsVoltage\",\n            };\n\n            // Wait 5 seconds before reporting a 0 value as this could be an invalid measurement.\n            // https://github.com/Koenkk/zigbee2mqtt/issues/16709#issuecomment-1509599046\n            if (result) {\n                for (const key of [\"power\", \"current\", \"voltage\"]) {\n                    if (key in result) {\n                        const value = result[key];\n                        clearTimeout(globalStore.getValue(msg.endpoint, key));\n                        if (value === 0) {\n                            const configuredReporting = msg.endpoint.configuredReportings.find(\n                                (c) => c.cluster.name === \"haElectricalMeasurement\" && c.attribute.name === lookup[key],\n                            );\n                            const time = (configuredReporting ? configuredReporting.minimumReportInterval : 5) * 2 + 1;\n                            globalStore.putValue(\n                                msg.endpoint,\n                                key,\n                                setTimeout(() => {\n                                    const payload = {[key]: value};\n                                    // Device takes a lot of time to report power 0 in some cases. When current == 0 we can assume power == 0\n                                    // https://github.com/Koenkk/zigbee2mqtt/discussions/19680#discussioncomment-7868445\n                                    if (key === \"current\") {\n                                        payload.power = 0;\n                                    }\n                                    publish(payload);\n                                }, time * 1000),\n                            );\n                            delete result[key];\n                        }\n                    }\n                }\n            }\n\n            // Device takes a lot of time to report power 0 in some cases. When the state is OFF we can assume power == 0\n            // https://github.com/Koenkk/zigbee2mqtt/discussions/19680#discussioncomment-7868445\n            if (meta.state.state === \"OFF\") {\n                result.power = 0;\n            }\n\n            return result;\n        },\n    } satisfies Fz.Converter<\"haElectricalMeasurement\", undefined, [\"attributeReport\", \"readResponse\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    TS011F_threshold: {\n        cluster: \"manuSpecificTuya3\",\n        type: \"raw\",\n        convert: (model, msg, publish, options, meta) => {\n            const splitToAttributes = (value: Buffer): KeyValueAny => {\n                const result: KeyValue = {};\n                const len = value.length;\n                let i = 0;\n                while (i < len) {\n                    const key = value.readUInt8(i);\n                    result[key] = [value.readUInt8(i + 1), value.readUInt16BE(i + 2)];\n                    i += 4;\n                }\n                return result;\n            };\n            const lookup: KeyValue = {0: \"OFF\", 1: \"ON\"};\n            const command = msg.data[2];\n            const data = msg.data.slice(3);\n            if (command === 0xe6) {\n                const value = splitToAttributes(data);\n                const result: KeyValue = {};\n                if (0x05 in value) {\n                    result.temperature_threshold = value[0x05][1];\n                    result.temperature_breaker = lookup[value[0x05][0]];\n                }\n                if (0x07 in value) {\n                    result.power_threshold = value[0x07][1];\n                    result.power_breaker = lookup[value[0x07][0]];\n                }\n                return result;\n            }\n            if (command === 0xe7) {\n                const value = splitToAttributes(data);\n                return {\n                    over_current_threshold: value[0x01][1],\n                    over_current_breaker: lookup[value[0x01][0]],\n                    over_voltage_threshold: value[0x03][1],\n                    over_voltage_breaker: lookup[value[0x03][0]],\n                    under_voltage_threshold: value[0x04][1],\n                    under_voltage_breaker: lookup[value[0x04][0]],\n                };\n            }\n        },\n    } satisfies Fz.Converter<\"manuSpecificTuya3\", undefined, \"raw\">,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    PJ1203A_sync_time_increase_seq: {\n        cluster: \"manuSpecificTuya\",\n        type: [\"commandMcuSyncTime\"],\n        convert: (model, msg, publish, options, meta) => {\n            const priv = storeLocal.getPrivatePJ1203A(meta.device);\n            priv.last_seq += priv.seq_inc;\n        },\n    } satisfies Fz.Converter<\"manuSpecificTuya\", undefined, [\"commandMcuSyncTime\"]>,\n    // biome-ignore lint/style/useNamingConvention: ignored using `--suppress`\n    PJ1203A_strict_fz_datapoints: {\n        ...tuya.fz.datapoints,\n        convert: (model, msg, publish, options, meta) => {\n            // Uncomment the next line to test the behavior when random messages are lost\n            // if ( Math.random() < 0.05 ) return;\n            const priv = storeLocal.getPrivatePJ1203A(meta.device);\n            // Detect missing or re-ordered messages but allow duplicate messages (should we?).\n            const expectedSeq = (priv.last_seq + priv.seq_inc) & 0xffff;\n            if (msg.data.seq !== expectedSeq && msg.data.seq !== priv.last_seq) {\n                logger.debug(`[PJ1203A] Missing or re-ordered message detected: Got seq=${msg.data.seq}, expected ${priv.next_seq}`, NS);\n                priv.clear();\n            }\n            priv.last_seq = msg.data.seq;\n            // And finally, process the datapoint using tuya.fz.datapoints\n            return tuya.fz.datapoints.convert(model, msg, publish, options, meta);\n        },\n    } satisfies Fz.Converter<\n        \"manuSpecificTuya\",\n        undefined,\n        [\"commandDataResponse\", \"commandDataReport\", \"commandActiveStatusReport\", \"commandActiveStatusReportAlt\"]\n    >,\n    ts020cIlluminance: {\n        cluster: \"manuSpecificTuya2\",\n        type: [\"attributeReport\"],\n        convert: (model, msg, publish, options, meta) => {\n            const result: KeyValue = {};\n            if (\"57345\" in msg.data) {\n                result.illuminance = msg.data[\"57345\"];\n            }\n            return result;\n        },\n    } satisfies Fz.Converter<\"manuSpecificTuya2\", undefined, [\"attributeReport\"]>,\n    ts0049_countdown: {\n        cluster: \"manuSpecificTuyaE001\",\n        type: \"raw\",\n        convert: (model, msg, publish, options, meta) => {\n            const len = msg.data.length;\n            const command = msg.data[2];\n            if (len > 10 && command === 0x0a && msg.data[7] === 0x0b && (msg.data[6] === 0x05 || msg.data[6] === 0x06)) {\n                const data = msg.data.slice(8);\n                const value = data.readUInt32BE(0);\n                return {\n                    countdown: value / 60,\n                };\n            }\n        },\n    } satisfies Fz.Converter<\"manuSpecificTuyaE001\", undefined, \"raw\">,\n};\n\nexport const definitions: DefinitionWithExtend[] = [\n    {\n        zigbeeModel: [\"TS0204\"],\n        model: \"TS0204\",\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        whiteLabel: [{vendor: \"Tesla Smart\", model: \"TSL-SEN-GAS\"}],\n        fromZigbee: [fz.ias_gas_alarm_1],\n        toZigbee: [],\n        exposes: [e.gas(), e.tamper()],\n    },\n    {\n        zigbeeModel: [\"TS020C\"],\n        model: \"TS020C\",\n        vendor: \"Tuya\",\n        description: \"PIR sensor\",\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.battery, fzLocal.ts020cIlluminance],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, queryOnDeviceAnnounce: true, queryOnConfigure: true})],\n        exposes: [\n            e.occupancy(),\n            e.battery(),\n            e.illuminance(),\n            e\n                .enum(\"sensitivity\", ea.STATE_SET, [\"low\", \"medium\", \"high\"])\n                .withDescription(\"PIR sensor sensitivity (refresh and update only while active)\"),\n            e\n                .enum(\"hold_time\", ea.STATE_SET, [\"10\", \"30\", \"60\", \"120\"])\n                .withDescription(\"PIR keep time in seconds (refresh and update only while active)\"),\n            e\n                .numeric(\"light_interval\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(720)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Brightness acquisition interval (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [12, \"illuminance\", tuya.valueConverter.raw], // doesn't work, hence fzLocal.TS020C_illuminance\n                [\n                    101,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [\n                    102,\n                    \"hold_time\",\n                    tuya.valueConverterBasic.lookup({\n                        \"10\": tuya.enum(0),\n                        \"30\": tuya.enum(1),\n                        \"60\": tuya.enum(2),\n                        \"120\": tuya.enum(3),\n                    }),\n                ],\n                [103, \"light_interval\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0205\"],\n        model: \"TS0205\",\n        vendor: \"Tuya\",\n        description: \"Smoke sensor\",\n        whiteLabel: [\n            {vendor: \"Tesla Smart\", model: \"TSL-SEN-SMOKE\"},\n            {vendor: \"Dongguan Daying Electornics Technology\", model: \"YG400A\"},\n            tuya.whitelabel(\"Tuya\", \"TS0205_smoke_2\", \"Optical smoke sensor (model YG500A on the PCB)\", [\"_TZ3210_up3pngle\"]),\n            tuya.whitelabel(\"Nedis\", \"ZBDS10WT\", \"Smoke sensor\", [\"_TYZB01_wqcac7lo\"]),\n        ],\n        // Configure battery % fails\n        // https://github.com/Koenkk/zigbee2mqtt/issues/22421\n        extend: [\n            m.battery({percentageReporting: false}),\n            m.iasZoneAlarm({\n                zoneType: \"smoke\",\n                zoneAttributes: [\"alarm_1\", \"tamper\"],\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            if (device.manufacturerName === \"_TZ3210_up3pngle\") {\n                // Required for this version\n                // https://github.com/Koenkk/zigbee-herdsman-converters/pull/8004\n                const endpoint = device.getEndpoint(1);\n                await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n                await reporting.batteryPercentageRemaining(endpoint);\n            }\n        },\n    },\n    {\n        zigbeeModel: [\"TS0111\"],\n        model: \"TS0111\",\n        vendor: \"Tuya\",\n        description: \"Socket\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n    },\n    {\n        zigbeeModel: [\"TS0218\"],\n        model: \"TS0218\",\n        vendor: \"Tuya\",\n        description: \"Button\",\n        fromZigbee: [fz.command_emergency, fz.battery],\n        exposes: [e.battery(), e.action([\"click\"])],\n        toZigbee: [],\n    },\n    {\n        fingerprint: [\n            {\n                manufacturerName: \"Zbeacon\",\n                modelID: \"TS0203\",\n                endpoints: [{ID: 1, profileID: 260, deviceID: 770, inputClusters: [0, 3, 1, 32, 1026, 1029], outputClusters: [25]}],\n            },\n            {\n                manufacturerName: \"Zbeacon\",\n                modelID: \"TS0202\",\n                endpoints: [{ID: 1, profileID: 260, deviceID: 770, inputClusters: [0, 3, 1, 32, 1026, 1029], outputClusters: [25]}],\n            },\n        ],\n        model: \"ZC-W1\",\n        vendor: \"iHseno\",\n        description: \"Temperature & humidity sensor\",\n        extend: [m.temperature(), m.humidity(), m.battery()],\n    },\n    {\n        zigbeeModel: [\"TS0203\", \"ZG-102Z\"],\n        model: \"TS0203\",\n        vendor: \"Tuya\",\n        description: \"Door/window sensor\",\n        fromZigbee: [fz.ias_contact_alarm_1, fz.battery, fz.ias_contact_alarm_1_report],\n        toZigbee: [],\n        whiteLabel: [\n            {vendor: \"CR Smart Home\", model: \"TS0203\"},\n            {vendor: \"Tuya\", model: \"iH-F001\"},\n            {vendor: \"Tesla Smart\", model: \"TSL-SEN-DOOR\"},\n            {vendor: \"Cleverio\", model: \"SS100\"},\n            {vendor: \"HOBEIAN\", model: \"ZG-102ZA\", fingerprint: [{modelID: \"ZG-102Z\"}]},\n            tuya.whitelabel(\"Niceboy\", \"ORBIS Windows & Door Sensor\", \"Door sensor\", [\"_TZ3000_qrldbmfn\"]),\n            tuya.whitelabel(\"Tuya\", \"ZD06\", \"Door window sensor\", [\"_TZ3000_rcuyhwe3\"]),\n            tuya.whitelabel(\"Tuya\", \"ZD08\", \"Door sensor\", [\"_TZ3000_7d8yme6f\"]),\n            tuya.whitelabel(\"Tuya\", \"MC500A\", \"Door sensor\", [\"_TZ3000_2mbfxlzr\"]),\n            tuya.whitelabel(\"Tuya\", \"19DZT\", \"Door sensor\", [\"_TZ3000_n2egfsli\"]),\n            tuya.whitelabel(\"Tuya\", \"DS04\", \"Door sensor\", [\"_TZ3000_yfekcy3n\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-JM-GWM-C-MS\", \"Smart door and window sensor\", [\"_TZ3000_decxrtwa\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-S01-GWM-C-MS\", \"Door/window alarm sensor\", [\"_TZ3000_8yhypbo7\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-X-GWM-C\", \"Door/window magnetic sensor\", [\"_TZ3000_gntwytxo\"]),\n            tuya.whitelabel(\"Luminea\", \"ZX-5232\", \"Smart door and window sensor\", [\"_TZ3000_4ugnzsli\"]),\n            tuya.whitelabel(\"QA\", \"QASD1\", \"Door sensor\", [\"_TZ3000_udyjylt7\"]),\n            tuya.whitelabel(\"Nous\", \"E3\", \"Door sensor\", [\"_TZ3000_v7chgqso\"]),\n            tuya.whitelabel(\"Woox\", \"R7047\", \"Smart Door & Window Sensor\", [\"_TZ3000_timx9ivq\"]),\n        ],\n        exposes: (device, options) => {\n            const exps: Expose[] = [e.contact(), e.battery(), e.battery_voltage()];\n            const noTamperModels = [\n                // manufacturerName for models without a tamper sensor\n                \"_TZ3000_rcuyhwe3\", // Tuya ZD06\n                \"_TZ3000_2mbfxlzr\", // Tuya MC500A\n                \"_TZ3000_n2egfsli\", // Tuya 19DZT\n                \"_TZ3000_yfekcy3n\", // Tuya DS04\n                \"_TZ3000_bpkijo14\",\n                \"_TZ3000_gntwytxo\", // Moes ZSS-X-GWM-C\n                \"_TZ3000_4ugnzsli\", // Luminea ZX-5232\n                \"_TZ3000_timx9ivq\", //Woox R7047\n            ];\n            if (!device || !noTamperModels.includes(device.manufacturerName)) {\n                exps.push(e.tamper());\n            }\n            const noBatteryLowModels = [\"_TZ3000_26fmupbb\", \"_TZ3000_oxslv1c9\", \"_TZ3000_osu834un\", \"_TZ3000_timx9ivq\"];\n            if (!device || !noBatteryLowModels.includes(device.manufacturerName)) {\n                exps.push(e.battery_low());\n            }\n\n            return exps;\n        },\n        meta: {\n            battery: {\n                // These sensors do send a Battery Percentage Remaining (0x0021)\n                // value, but is usually incorrect. For example, a coin battery tested\n                // with a load tester may show 80%, but report 2.5V / 1%. This voltage\n                // calculation matches what ZHA does by default.\n                // https://github.com/Koenkk/zigbee2mqtt/discussions/17337\n                // https://github.com/zigpy/zha-device-handlers/blob/c6ed94a52a469e72b32ece2a92d528060c7fd034/zhaquirks/__init__.py#L195-L228\n                voltageToPercentage: \"3V_1500_2800\",\n            },\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            try {\n                const endpoint = device.getEndpoint(1);\n                await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n                await reporting.batteryPercentageRemaining(endpoint);\n                await reporting.batteryVoltage(endpoint);\n            } catch {\n                /* Fails for some*/\n            }\n\n            const endpoint = device.getEndpoint(1);\n            if (endpoint.binds.some((b) => b.cluster.name === \"genPollCtrl\")) {\n                await endpoint.unbind(\"genPollCtrl\", coordinatorEndpoint);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_vuwtqx0t\", \"_TZE200_vuwtqx0t\"]),\n        model: \"TS0601_water_valve\",\n        vendor: \"Tuya\",\n        description: \"Ultrasonic water meter valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            // Main valve switch\n            e\n                .switch()\n                .setAccess(\"state\", ea.STATE_SET),\n\n            // Water consumption sensor\n            e\n                .numeric(\"water_consumed\", ea.STATE)\n                .withUnit(\"m³\")\n                .withDescription(\"Total water consumption\")\n                .withValueMin(0)\n                .withValueStep(0.001),\n\n            // Flow rate sensor\n            e\n                .numeric(\"flow_rate\", ea.STATE)\n                .withUnit(\"m³/h\")\n                .withDescription(\"Instantaneous water flow rate\")\n                .withValueMin(0)\n                .withValueStep(0.001),\n\n            // Temperature sensor\n            e.temperature(),\n\n            // Voltage monitoring\n            e.voltage(),\n            // Auto clean mode toggle\n            e\n                .binary(\"auto_clean\", ea.STATE_SET, true, false)\n                .withDescription(\"Auto clean mode\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"water_consumed\", tuya.valueConverter.divideBy1000],\n                [13, \"state\", tuya.valueConverter.onOffNotStrict],\n                [14, \"auto_clean\", tuya.valueConverter.raw],\n                [21, \"flow_rate\", tuya.valueConverter.divideBy1000],\n                [22, \"temperature\", tuya.valueConverter.divideBy100],\n                [26, \"voltage\", tuya.valueConverter.divideBy100],\n            ],\n        },\n        // Optional: Add device-specific options\n        options: [\n            exposes.options.precision(\"water_consumed\"),\n            exposes.options.calibration(\"water_consumed\"),\n            exposes.options.precision(\"flow_rate\"),\n            exposes.options.calibration(\"flow_rate\"),\n            exposes.options.precision(\"temperature\"),\n            exposes.options.calibration(\"temperature\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_zpvusbtv\"]),\n        model: \"ZN2S-RS02E\",\n        vendor: \"Tuya\",\n        description: \"Two gang switch with colored backlight modes\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.switch().withDescription(\"All switches\"),\n            e.switch().withEndpoint(\"l1\"),\n            e.switch().withEndpoint(\"l2\"),\n            e.binary(\"backlight_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Backlight mode\"),\n            e.binary(\"indicator_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Indicator mode\"),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child lock\"),\n            e\n                .enum(\"on_color\", ea.STATE_SET, [\"red\", \"blue\", \"green\", \"white\", \"yellow\", \"magenta\", \"cyan\", \"warm_white\", \"warm_yellow\"])\n                .withDescription(\"ON color\"),\n            e\n                .enum(\"off_color\", ea.STATE_SET, [\"red\", \"blue\", \"green\", \"white\", \"yellow\", \"magenta\", \"cyan\", \"warm_white\", \"warm_yellow\"])\n                .withDescription(\"OFF color\"),\n            e.numeric(\"countdown_l1\", ea.STATE_SET).withUnit(\"s\").withDescription(\"Countdown for l1\").withValueMin(0).withValueMax(86400),\n            e.numeric(\"countdown_l2\", ea.STATE_SET).withUnit(\"s\").withDescription(\"Countdown for l2\").withValueMin(0).withValueMax(86400),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [13, \"state\", tuya.valueConverter.onOff],\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [7, \"countdown_l1\", tuya.valueConverter.countdown],\n                [8, \"countdown_l2\", tuya.valueConverter.countdown],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [15, \"indicator_mode\", tuya.valueConverter.onOff],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n                [101, \"child_lock\", tuya.valueConverter.onOff],\n                [\n                    103,\n                    \"on_color\",\n                    tuya.valueConverterBasic.lookup({\n                        red: tuya.enum(0),\n                        blue: tuya.enum(1),\n                        green: tuya.enum(2),\n                        white: tuya.enum(3),\n                        yellow: tuya.enum(4),\n                        magenta: tuya.enum(5),\n                        cyan: tuya.enum(6),\n                        warm_white: tuya.enum(7),\n                        warm_yellow: tuya.enum(8),\n                    }),\n                ],\n                [\n                    104,\n                    \"off_color\",\n                    tuya.valueConverterBasic.lookup({\n                        red: tuya.enum(0),\n                        blue: tuya.enum(1),\n                        green: tuya.enum(2),\n                        white: tuya.enum(3),\n                        yellow: tuya.enum(4),\n                        magenta: tuya.enum(5),\n                        cyan: tuya.enum(6),\n                        warm_white: tuya.enum(7),\n                        warm_yellow: tuya.enum(8),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0203\", [\"_TZ3210_jowhpxop\"]),\n        model: \"TS0203_1\",\n        vendor: \"Tuya\",\n        description: \"Door sensor with scene switch\",\n        fromZigbee: [fz.ias_contact_alarm_1, fz.battery, fz.ias_contact_alarm_1_report],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [e.action([\"single\", \"double\", \"hold\"]), e.contact(), e.battery_low(), e.tamper(), e.battery(), e.battery_voltage()],\n        meta: {\n            tuyaDatapoints: [[101, \"action\", tuya.valueConverterBasic.lookup({single: 0, double: 1, hold: 2})]],\n        },\n        whiteLabel: [tuya.whitelabel(\"Linkoze\", \"LKDSZ001\", \"Door sensor with scene switch\", [\"_TZ3210_jowhpxop\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0021\", [\"_TZ3210_3ulg9kpo\"]),\n        model: \"LKWSZ211\",\n        vendor: \"Linkoze\",\n        description: \"Scene remote with 2 keys\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.battery(),\n            e.action([\"button_1_single\", \"button_1_double\", \"button_1_hold\", \"button_2_single\", \"button_2_double\", \"button_2_hold\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"action\",\n                    tuya.valueConverterBasic.lookup({\n                        button_1_single: tuya.enum(0),\n                        button_1_double: tuya.enum(1),\n                        button_1_hold: tuya.enum(2),\n                    }),\n                ],\n                [\n                    2,\n                    \"action\",\n                    tuya.valueConverterBasic.lookup({\n                        button_2_single: tuya.enum(0),\n                        button_2_double: tuya.enum(1),\n                        button_2_hold: tuya.enum(2),\n                    }),\n                ],\n                [10, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_bq5c8xfe\",\n            \"_TZE200_bjawzodf\",\n            \"_TZE200_qyflbnbj\",\n            \"_TZE200_44af8vyi\",\n            \"_TZE200_zl1kmjqx\",\n            \"_TZE204_qyflbnbj\",\n            \"_TZE284_qyflbnbj\",\n        ]),\n        model: \"TS0601_temperature_humidity_sensor_1\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_temperature_humidity_sensor],\n        toZigbee: [],\n        exposes: (device, options) => {\n            const exps: Expose[] = [e.temperature(), e.humidity(), e.battery()];\n            if (\n                !device ||\n                device.manufacturerName === \"_TZE200_qyflbnbj\" ||\n                device.manufacturerName === \"_TZE204_qyflbnbj\" ||\n                device.manufacturerName === \"_TZE284_qyflbnbj\"\n            ) {\n                exps.push(e.battery_low());\n                exps.push(e.enum(\"battery_level\", ea.STATE, [\"low\", \"middle\", \"high\"]).withDescription(\"Battery level state\"));\n            }\n\n            return exps;\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_mfamvsdb\"]),\n        model: \"F00MB00-04-1\",\n        vendor: \"FORIA\",\n        description: \"4 scenes switch\",\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            tuya.modernExtend.combineActions([\n                tuya.modernExtend.dpAction({dp: 1, lookup: {scene_1: 0}}),\n                tuya.modernExtend.dpAction({dp: 2, lookup: {scene_2: 0}}),\n                tuya.modernExtend.dpAction({dp: 3, lookup: {scene_3: 0}}),\n                tuya.modernExtend.dpAction({dp: 4, lookup: {scene_4: 0}}),\n            ]),\n            tuya.modernExtend.dpBinary({\n                name: \"vibration\",\n                dp: 0x6c,\n                type: tuya.dataTypes.enum,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Enable vibration\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"approach\",\n                dp: 0x6b,\n                type: tuya.dataTypes.enum,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Enable approach detection\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"illumination\",\n                dp: 0x6a,\n                type: tuya.dataTypes.enum,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Enable illumination detection\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"backlight\",\n                dp: 0x69,\n                type: tuya.dataTypes.enum,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Enable backlight\",\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_dhke3p9w\", \"_TZE284_dhke3p9w\"]),\n        model: \"F00YK04-18-1\",\n        vendor: \"FORIA\",\n        description: \"18 scenes remote\",\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            tuya.modernExtend.combineActions([\n                tuya.modernExtend.dpAction({dp: 1, lookup: {scene_1: 0}}),\n                tuya.modernExtend.dpAction({dp: 2, lookup: {scene_2: 0}}),\n                tuya.modernExtend.dpAction({dp: 3, lookup: {scene_3: 0}}),\n                tuya.modernExtend.dpAction({dp: 4, lookup: {scene_4: 0}}),\n                tuya.modernExtend.dpAction({dp: 5, lookup: {scene_5: 0}}),\n                tuya.modernExtend.dpAction({dp: 6, lookup: {scene_6: 0}}),\n                tuya.modernExtend.dpAction({dp: 7, lookup: {scene_7: 0}}),\n                tuya.modernExtend.dpAction({dp: 8, lookup: {scene_8: 0}}),\n                tuya.modernExtend.dpAction({dp: 9, lookup: {scene_9: 0}}),\n                tuya.modernExtend.dpAction({dp: 10, lookup: {scene_10: 0}}),\n                tuya.modernExtend.dpAction({dp: 11, lookup: {scene_11: 0}}),\n                tuya.modernExtend.dpAction({dp: 12, lookup: {scene_12: 0}}),\n                tuya.modernExtend.dpAction({dp: 13, lookup: {scene_13: 0}}),\n                tuya.modernExtend.dpAction({dp: 14, lookup: {scene_14: 0}}),\n                tuya.modernExtend.dpAction({dp: 15, lookup: {scene_15: 0}}),\n                tuya.modernExtend.dpAction({dp: 16, lookup: {scene_16: 0}}),\n                tuya.modernExtend.dpAction({dp: 101, lookup: {scene_17: 0}}),\n                tuya.modernExtend.dpAction({dp: 102, lookup: {scene_18: 0}}),\n            ]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_yjjdcqsq\",\n            \"_TZE200_9yapgbuv\",\n            \"_TZE200_utkemkbs\",\n            \"_TZE204_utkemkbs\",\n            \"_TZE284_utkemkbs\",\n            \"_TZE204_9yapgbuv\",\n            \"_TZE204_upagmta9\",\n            \"_TZE200_cirvgep4\",\n            \"_TZE204_d7lpruvi\",\n            \"_TZE200_upagmta9\",\n            \"_TZE204_yjjdcqsq\",\n            \"_TZE204_jygvp6fk\",\n            \"_TZE204_cirvgep4\",\n            \"_TZE284_yjjdcqsq\",\n            \"_TZE200_d7lpruvi\",\n            \"_TZE284_hdyjyqjm\",\n            \"_TZE284_d7lpruvi\",\n            \"_TZE284_upagmta9\",\n            \"_TZE204_ksz749x8\",\n            \"_TZE204_1wnh8bqp\",\n            \"_TZE284_1wnh8bqp\",\n        ]),\n        model: \"TS0601_temperature_humidity_sensor_2\",\n        vendor: \"Tuya\",\n        description: \"Temperature and humidity sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, queryOnDeviceAnnounce: true, queryOnConfigure: true, respondToMcuVersionResponse: true})],\n        exposes: [e.temperature(), e.humidity(), tuya.exposes.batteryState(), tuya.exposes.temperatureUnit()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [2, \"humidity\", tuya.valueConverter.raw],\n                [3, \"battery_state\", tuya.valueConverter.batteryState],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnitEnum],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"ZTH01\", \"Temperature and humidity sensor\", [\"_TZE200_yjjdcqsq\", \"_TZE204_yjjdcqsq\", \"_TZE284_yjjdcqsq\"]),\n            tuya.whitelabel(\"Tuya\", \"SZTH02\", \"Temperature and humidity sensor\", [\"_TZE200_utkemkbs\", \"_TZE204_utkemkbs\", \"_TZE284_utkemkbs\"]),\n            tuya.whitelabel(\"Tuya\", \"ZTH02\", \"Temperature and humidity sensor\", [\"_TZE200_9yapgbuv\", \"_TZE204_9yapgbuv\"]),\n            tuya.whitelabel(\"Tuya\", \"ZTH05\", \"Temperature and humidity sensor\", [\"_TZE204_upagmta9\", \"_TZE200_upagmta9\", \"_TZE284_upagmta9\"]),\n            tuya.whitelabel(\"Tuya\", \"ZTH08-E\", \"Temperature and humidity sensor\", [\"_TZE200_cirvgep4\", \"_TZE204_cirvgep4\"]),\n            tuya.whitelabel(\"Tuya\", \"ZTH08\", \"Temperature and humidity sensor\", [\"_TZE204_d7lpruvi\", \"_TZE284_d7lpruvi\", \"_TZE284_hdyjyqjm\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_s1xgth2u\", \"_TZE284_9ern5sfh\"]),\n        model: \"TS0601_temperature_humidity_sensor_3\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true, queryOnConfigure: true})],\n        exposes: [e.temperature(), e.humidity(), e.battery(), tuya.exposes.temperatureUnit()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [2, \"humidity\", tuya.valueConverter.raw],\n                [4, \"battery\", tuya.valueConverter.raw], // maybe?\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnitEnum],\n                [19, \"temperature_sensitivity\", tuya.valueConverter.raw], // maybe? commented this out for now\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_vvmbj46n\", \"_TZE284_vvmbj46n\", \"_TZE200_w6n8jeuu\"]),\n        model: \"ZTH05Z\",\n        vendor: \"Tuya\",\n        description: \"Temperature and humidity sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, queryOnDeviceAnnounce: true, queryOnConfigure: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            e.battery(),\n            e.enum(\"temperature_unit\", ea.STATE_SET, [\"celsius\", \"fahrenheit\"]).withDescription(\"Temperature unit\"),\n            e\n                .numeric(\"max_temperature_alarm\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(-20)\n                .withValueMax(60)\n                .withDescription(\"Alarm temperature max\"),\n            e\n                .numeric(\"min_temperature_alarm\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(-20)\n                .withValueMax(60)\n                .withDescription(\"Alarm temperature min\"),\n            e.numeric(\"max_humidity_alarm\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Alarm humidity max\"),\n            e.numeric(\"min_humidity_alarm\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Alarm humidity min\"),\n            e.enum(\"temperature_alarm\", ea.STATE, [\"lower_alarm\", \"upper_alarm\", \"cancel\"]).withDescription(\"Temperature alarm\"),\n            e.enum(\"humidity_alarm\", ea.STATE, [\"lower_alarm\", \"upper_alarm\", \"cancel\"]).withDescription(\"Humidity alarm\"),\n            e\n                .numeric(\"temperature_periodic_report\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withValueMin(1)\n                .withValueMax(120)\n                .withDescription(\"Temp periodic report\"),\n            e\n                .numeric(\"humidity_periodic_report\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withValueMin(1)\n                .withValueMax(120)\n                .withDescription(\"Humidity periodic report\"),\n            e\n                .numeric(\"temperature_sensitivity\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0.3)\n                .withValueMax(1)\n                .withValueStep(0.1)\n                .withDescription(\"Sensitivity of temperature\"),\n            e\n                .numeric(\"humidity_sensitivity\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withValueMin(3)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"Sensitivity of humidity\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [2, \"humidity\", tuya.valueConverter.raw],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnitEnum],\n                [10, \"max_temperature_alarm\", tuya.valueConverter.divideBy10],\n                [11, \"min_temperature_alarm\", tuya.valueConverter.divideBy10],\n                [12, \"max_humidity_alarm\", tuya.valueConverter.raw],\n                [13, \"min_humidity_alarm\", tuya.valueConverter.raw],\n                [\n                    14,\n                    \"temperature_alarm\",\n                    tuya.valueConverterBasic.lookup({\n                        lower_alarm: tuya.enum(0),\n                        upper_alarm: tuya.enum(1),\n                        cancel: tuya.enum(2),\n                    }),\n                ],\n                [\n                    15,\n                    \"humidity_alarm\",\n                    tuya.valueConverterBasic.lookup({\n                        lower_alarm: tuya.enum(0),\n                        upper_alarm: tuya.enum(1),\n                        cancel: tuya.enum(2),\n                    }),\n                ],\n                [17, \"temperature_periodic_report\", tuya.valueConverter.raw],\n                [18, \"humidity_periodic_report\", tuya.valueConverter.raw],\n                [19, \"temperature_sensitivity\", tuya.valueConverter.divideBy10],\n                [20, \"humidity_sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"ONENUO\", \"TH05Z\", \"Temperature & humidity sensor with clock and humidity display\", [\"_TZE200_vvmbj46n\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nvups4nh\"]),\n        model: \"TS0601_contact_temperature_humidity_sensor\",\n        vendor: \"Tuya\",\n        description: \"Contact, temperature and humidity sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\"})],\n        exposes: [e.contact(), e.temperature(), e.humidity(), e.battery()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"contact\", tuya.valueConverter.trueFalseInvert],\n                [2, \"battery\", tuya.valueConverter.raw],\n                [7, \"temperature\", tuya.valueConverter.divideBy10],\n                [8, \"humidity\", tuya.valueConverter.raw],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Aubess\", \"1005005194831629\", \"Contact, temperature and humidity sensor\", [\"_TZE200_nvups4nh\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_vzqtvljm\"]),\n        model: \"TS0601_illuminance_temperature_humidity_sensor_1\",\n        vendor: \"Tuya\",\n        description: \"Illuminance, temperature & humidity sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_illuminance_temperature_humidity_sensor],\n        toZigbee: [],\n        exposes: [e.temperature(), e.humidity(), e.illuminance(), e.battery()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_8ygsuhe1\",\n            \"_TZE200_yvx5lh6k\",\n            \"_TZE200_ryfmq5rl\",\n            \"_TZE200_c2fmom5z\",\n            \"_TZE200_mja3fuja\",\n            \"_TZE204_c2fmom5z\",\n            \"_TZE204_yvx5lh6k\",\n        ]),\n        model: \"TS0601_air_quality_sensor\",\n        vendor: \"Tuya\",\n        description: \"Air quality sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_air_quality],\n        toZigbee: [],\n        exposes: [e.temperature(), e.humidity(), e.co2(), e.voc().withUnit(\"ppb\"), e.formaldehyd().withUnit(\"µg/m³\")],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_rbbx5mfq\"]),\n        model: \"TS0601_illuminance_temperature_humidity_sensor_2\",\n        vendor: \"Tuya\",\n        description: \"Illuminance sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.illuminance(), e.temperature(), e.humidity()],\n        meta: {\n            tuyaDatapoints: [\n                [2, \"illuminance\", tuya.valueConverter.raw],\n                [6, \"temperature\", tuya.valueConverter.divideBy10],\n                [7, \"humidity\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_dwcarsat\", \"_TZE204_dwcarsat\"]),\n        model: \"TS0601_smart_air_house_keeper\",\n        vendor: \"Tuya\",\n        description: \"Smart air house keeper\",\n        fromZigbee: [legacy.fromZigbee.tuya_air_quality],\n        toZigbee: [],\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            e.co2(),\n            e.voc().withUnit(\"ppb\"),\n            e.formaldehyd().withUnit(\"µg/m³\"),\n            e.pm25().withValueMin(0).withValueMax(999).withValueStep(1),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ogkdpgy2\", \"_TZE200_3ejwxpmu\", \"_TZE204_3ejwxpmu\"]),\n        model: \"TS0601_temperature_humidity_co2_sensor\",\n        vendor: \"Tuya\",\n        description: \"NDIR co2 sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_air_quality],\n        toZigbee: [],\n        exposes: [e.temperature(), e.humidity(), e.co2()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ogkdpgy2\"]),\n        model: \"TS0601_co2_sensor\",\n        vendor: \"Tuya\",\n        description: \"NDIR co2 sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_air_quality],\n        toZigbee: [],\n        exposes: [e.co2()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_7bztmfm1\", \"_TZE204_7bztmfm1\"]),\n        model: \"DCR-CO\",\n        vendor: \"Tuya\",\n        description: \"Smart air box (carbon monoxide)\",\n        fromZigbee: [legacy.fromZigbee.tuya_CO],\n        toZigbee: [],\n        exposes: [e.binary(\"carbon_monoxide\", ea.STATE, \"ON\", \"OFF\").withDescription(\"Indicates if CO (carbon monoxide) is detected\"), e.co()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ggev5fsl\", \"_TZE200_u319yc66\", \"_TZE200_kvpwq8z7\"]),\n        model: \"TS0601_gas_sensor_1\",\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.gas(), tuya.exposes.selfTest(), tuya.exposes.selfTestResult(), tuya.exposes.faultAlarm(), tuya.exposes.silence()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalse0],\n                [8, \"self_test\", tuya.valueConverter.raw],\n                [9, \"self_test_result\", tuya.valueConverter.selfTestResult],\n                [11, \"fault_alarm\", tuya.valueConverter.trueFalse1],\n                [16, \"silence\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_yojqa8xn\", \"_TZE204_zougpkpy\", \"_TZE204_chbyv06x\", \"_TZE204_yojqa8xn\", \"_TZE284_chbyv06x\"]),\n        model: \"TS0601_gas_sensor_2\",\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.gas(),\n            tuya.exposes.gasValue().withUnit(\"LEL\"),\n            tuya.exposes.selfTest(),\n            tuya.exposes.selfTestResult(),\n            tuya.exposes.silence(),\n            e\n                .enum(\"alarm_ringtone\", ea.STATE_SET, [\"melody_1\", \"melody_2\", \"melody_3\", \"melody_4\", \"melody_5\"])\n                .withDescription(\"Ringtone of the alarm\"),\n            e.numeric(\"alarm_time\", ea.STATE_SET).withValueMin(1).withValueMax(180).withValueStep(1).withUnit(\"s\").withDescription(\"Alarm time\"),\n            e.binary(\"preheat\", ea.STATE, true, false).withDescription(\"Indicates sensor preheat is active\"),\n        ],\n        whiteLabel: [tuya.whitelabel(\"DYGSM\", \"DY-RQ500A\", \"Gas sensor\", [\"_TZE204_zougpkpy\", \"_TZE204_chbyv06x\", \"_TZE284_chbyv06x\"])],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalseEnum0],\n                [2, \"gas_value\", tuya.valueConverter.divideBy10],\n                [\n                    6,\n                    \"alarm_ringtone\",\n                    tuya.valueConverterBasic.lookup({\n                        melody_1: tuya.enum(0),\n                        melody_2: tuya.enum(1),\n                        melody_3: tuya.enum(2),\n                        melody_4: tuya.enum(3),\n                        melody_5: tuya.enum(4),\n                    }),\n                ],\n                [7, \"alarm_time\", tuya.valueConverter.raw],\n                [8, \"self_test\", tuya.valueConverter.raw],\n                [9, \"self_test_result\", tuya.valueConverter.selfTestResult],\n                [10, \"preheat\", tuya.valueConverter.raw],\n                [13, null, null], // alarm_switch; ignore for now since it is unclear what it does\n                [16, \"silence\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nus5kk3n\"]),\n        model: \"TS0601_gas_sensor_3\",\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.gas(), tuya.exposes.selfTest(), tuya.exposes.selfTestResult(), tuya.exposes.faultAlarm(), tuya.exposes.silence()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalse0],\n                [9, \"self_test_result\", tuya.valueConverter.selfTestResult],\n                [11, \"fault_alarm\", tuya.valueConverter.trueFalse1],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_mby4kbtq\", \"_TZE204_mby4kbtq\", \"_TZE204_uo8qcagc\"]),\n        model: \"TS0601_gas_sensor_4\", // _TZE200_mby4kbtq looks like TS0601_gas_sensor_2\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.gas(),\n            tuya.exposes.gasValue().withUnit(\"LEL\"),\n            e.binary(\"preheat\", ea.STATE, true, false).withDescription(\"Indicates sensor preheat is active\"),\n            tuya.exposes.faultAlarm(),\n            e.binary(\"alarm_switch\", ea.STATE_SET, true, false),\n            tuya.exposes.silence(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalse0],\n                [2, \"gas_value\", tuya.valueConverter.divideBy10],\n                [10, \"preheat\", tuya.valueConverter.raw],\n                [11, \"fault_alarm\", tuya.valueConverter.trueFalse1],\n                [13, \"alarm_switch\", tuya.valueConverter.raw],\n                [16, \"silence\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_hiith90n\"]),\n        model: \"R3 Smart Switch\",\n        vendor: \"Tuya\",\n        description: \"Circuit Breaker/Switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.switch()],\n        meta: {\n            tuyaDatapoints: [[16, \"state\", tuya.valueConverter.onOff]],\n        },\n    },\n    {\n        // Tuya/Senoro window sensor variant with 3-state opening on DP101.\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_6teua268\"]),\n        model: \"TZE284_6teua268\",\n        vendor: \"Tuya\",\n        whiteLabel: [{vendor: \"Senoro\", model: \"Senoro.Win v2\"}],\n        description: \"Window sensor with 3-state opening (DP101), optional alarm, battery\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            // DP101 → enum; device reports 0=open, 1=closed, 2=tilted (note swapped 0/1).\n            e\n                .enum(\"opening_state\", ea.STATE, [\"open\", \"closed\", \"tilted\"])\n                .withDescription(\"Opening state (Tuya DP101)\"),\n            // Some firmware variants expose an alarm bit (commonly DP16).\n            e\n                .binary(\"alarm\", ea.STATE, true, false)\n                .withDescription(\"Alarm (Tuya DP16; some FW variants may use DP10/13)\"),\n            e.battery(),\n        ],\n        meta: {\n            // Datapoints from logs:\n            //  - 101: 0=open, 1=closed, 2=tilted\n            //  - 16 : alarm (boolean) — optional by firmware\n            //  - 102: battery percentage (0..100)\n            tuyaDatapoints: [\n                [101, \"opening_state\", tuya.valueConverterBasic.lookup({open: 0, closed: 1, tilted: 2})],\n                // Alarm: primary DP16; some FW-Versions uses 10/13\n                [10, \"alarm\", tuya.valueConverter.raw],\n                [13, \"alarm\", tuya.valueConverter.raw],\n                [16, \"alarm\", tuya.valueConverter.raw],\n                // Battery: primary DP102; DP2 as fallback for other batches\n                [102, \"battery\", tuya.valueConverter.raw],\n                [2, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-301Z\"],\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0001\", [\n                \"_TZ3000_hktqahrq\",\n                \"_TZ3000_q6a3tepg\",\n                \"_TZ3000_skueekg3\",\n                \"_TZ3000_npzfdcof\",\n                \"_TZ3000_5ng23zjs\",\n                \"_TZ3000_rmjr4ufz\",\n                \"_TZ3000_v7gnj3ad\",\n                \"_TZ3000_3a9beq8a\",\n                \"_TZ3000_ark8nv4y\",\n                \"_TZ3000_mx3vgyea\",\n                \"_TZ3000_fdxihpp7\",\n                \"_TZ3000_qsp2pwtf\",\n                \"_TZ3000_kycczpw8\",\n                \"_TZ3000_46t1rvdu\",\n                \"_TZ3000_bhcpnvud\",\n            ]),\n            ...tuya.fingerprint(\"TS000F\", [\n                \"_TZ3000_hktqahrq\",\n                \"_TZ3000_m9af2l6g\",\n                \"_TZ3000_mx3vgyea\",\n                \"_TZ3000_skueekg3\",\n                \"_TZ3000_dlhhrhs8\",\n                \"_TZ3000_fdxihpp7\",\n            ]),\n        ],\n        model: \"WHD02\",\n        vendor: \"Tuya\",\n        whiteLabel: [\n            {vendor: \"Tuya\", model: \"iHSW02\"},\n            {\n                vendor: \"HOBEIAN\",\n                model: \"ZG-301Z\",\n                fingerprint: [{modelID: \"ZG-301Z\"}],\n            },\n            tuya.whitelabel(\"Tuya\", \"QS-zigbee-S08-16A-RF\", \"Wall switch module\", [\"_TZ3000_dlhhrhs8\"]),\n        ],\n        description: \"Wall switch module\",\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true, onOffCountdown: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\n            \"_TZ3000_mvn6jl7x\",\n            \"_TZ3000_raviyuvk\",\n            \"_TYZB01_hlla45kx\",\n            \"_TZ3000_92qd4sqa\",\n            \"_TZ3000_zwaadvus\",\n            \"_TZ3000_k6fvknrr\",\n            \"_TZ3000_6s5dc9lx\",\n            \"_TZ3000_helyqdvs\",\n            \"_TZ3000_rgpqqmbj\",\n            \"_TZ3000_8nyaanzb\",\n            \"_TZ3000_iy2c3n6p\",\n            \"_TZ3000_qlmnxmac\",\n            \"_TZ3000_sgb0xhwn\",\n        ]),\n        model: \"TS011F_2_gang_wall\",\n        vendor: \"Tuya\",\n        description: \"2 gang wall outlet\",\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                backlightModeLowMediumHigh: true,\n                childLock: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"ClickSmart+\", \"CMA30036\", \"2 gang socket outlet\", [\"_TYZB01_hlla45kx\"]),\n            tuya.whitelabel(\"Rylike\", \"RY-WS02Z\", \"2 gang socket outlet AU\", [\"_TZ3000_rgpqqmbj\", \"_TZ3000_8nyaanzb\", \"_TZ3000_iy2c3n6p\"]),\n            tuya.whitelabel(\"Nova Digital\", \"NT-S2\", \"2 gang socket outlet BR\", [\"_TZ3000_sgb0xhwn\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true, multiEndpointSkip: [\"power_on_behavior\"]},\n        configure: tuya.configureMagicPacket,\n    },\n    {\n        fingerprint: [\n            ...tuya.fingerprint(\"TS011F\", [\"_TZ3000_rk2yzt0u\", \"_TZ3000_o4cjetlm\"]),\n            ...tuya.fingerprint(\"TS0001\", [\n                \"_TZ3000_o4cjetlm\",\n                \"_TZ3000_iedbgyxt\",\n                \"_TZ3000_h3noz0a5\",\n                \"_TYZB01_4tlksk8a\",\n                \"_TZ3000_5ucujjts\",\n                \"_TZ3000_h8ngtlxy\",\n                \"_TZ3000_w0ypwa1f\",\n                \"_TZ3000_wpueorev\",\n                \"_TZ3000_cmcjbqup\",\n            ]),\n            ...tuya.fingerprint(\"TS0011\", [\"_TYZB01_rifa0wlb\"]),\n        ],\n        model: \"ZN231392\",\n        vendor: \"Tuya\",\n        description: \"Smart water/gas valve\",\n        extend: [tuya.modernExtend.tuyaOnOff({indicatorMode: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await endpoint.read(\"genOnOff\", [\"onOff\", \"moesStartUpOnOff\"]);\n        },\n    },\n    {\n        zigbeeModel: [\"CK-BL702-AL-01(7009_Z102LG03-1)\", \"CK-BL702-AL-01(7009_Z102LG04-1)\", \"CK-BL702-AL-01(7009_Z102LG04-2)\"],\n        model: \"CK-BL702-AL-01\",\n        vendor: \"Tuya\",\n        description: \"Zigbee LED bulb\",\n        extend: [\n            tuya.modernExtend.tuyaLight({\n                colorTemp: {range: [142, 500]},\n                color: true,\n            }),\n        ],\n    },\n    {\n        zigbeeModel: [\"SM0001\"],\n        model: \"SM0001\",\n        vendor: \"Tuya\",\n        description: \"Switch\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"Zemismart\", \"ZM-H7\", \"Hand wave wall smart switch\", [\"_TZ3000_jcqs2mrv\"])],\n    },\n    {\n        zigbeeModel: [\"TS0505\"],\n        model: \"TS0505\",\n        vendor: \"Tuya\",\n        description: \" GU10 zbeacon Zigbee LED bulb\",\n        extend: [\n            m.light({\n                colorTemp: {range: [153, 500]},\n                color: {modes: [\"xy\", \"hs\"]},\n            }),\n        ],\n    },\n    {\n        zigbeeModel: [\"TS0505B\"],\n        model: \"TS0505B_1\",\n        vendor: \"Tuya\",\n        description: \"Zigbee RGB+CCT light\",\n        whiteLabel: [\n            {vendor: \"Mercator Ikuü\", model: \"SMD4106W-RGB-ZB\"},\n            {vendor: \"Tuya\", model: \"A5C-21F7-01\"},\n            {vendor: \"Mercator Ikuü\", model: \"S9E27LED9W-RGB-Z\"},\n            {\n                vendor: \"Aldi\",\n                model: \"L122CB63H11A9.0W\",\n                description: \"LIGHTWAY smart home LED-lamp - bulb\",\n            },\n            {\n                vendor: \"Lidl\",\n                model: \"14153706L\",\n                description: \"Livarno smart LED ceiling light\",\n            },\n            {\n                vendor: \"Zemismart\",\n                model: \"LXZB-ZB-09A\",\n                description: \"Zemismart LED Surface Mounted Downlight 9W RGBW\",\n            },\n            {\n                vendor: \"Feconn\",\n                model: \"FE-GU10-5W\",\n                description: \"Zigbee GU10 5W smart bulb\",\n            },\n            {vendor: \"Nedis\", model: \"ZBLC1E14\"},\n            tuya.whitelabel(\"Aldi\", \"L122FF63H11A5.0W\", \"LIGHTWAY smart home LED-lamp - spot\", [\"_TZ3000_j0gtlepx\"]),\n            tuya.whitelabel(\"Aldi\", \"L122AA63H11A6.5W\", \"LIGHTWAY smart home LED-lamp - candle\", [\"_TZ3000_iivsrikg\"]),\n            tuya.whitelabel(\"Aldi\", \"C422AC11D41H140.0W\", \"MEGOS LED panel RGB+CCT 40W 3600lm 62 x 62 cm\", [\"_TZ3000_v1srfw9x\"]),\n            tuya.whitelabel(\"Aldi\", \"C422AC14D41H140.0W\", \"MEGOS LED panel RGB+CCT 40W 3600lm 30 x 120 cm\", [\"_TZ3000_gb5gaeca\"]),\n            tuya.whitelabel(\"Lidl\", \"14156506L\", \"Livarno Lux smart LED mood light\", [\"_TZ3210_r0xgkft5\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08010\", \"Livarno Home outdoor spotlight\", [\"_TZ3210_umi6vbsz\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08008\", \"Livarno Home LED ceiling light\", [\"_TZ3210_p9ao60da\"]),\n            tuya.whitelabel(\"Lidl\", \"14158704L\", \"Livarno Home LED floor lamp, RGBW\", [\"_TZ3210_z1vlyufu\"]),\n            tuya.whitelabel(\"Lidl\", \"14158804L\", \"Livarno Home LED desk lamp RGBW\", [\"_TZ3210_hxtfthp5\"]),\n            tuya.whitelabel(\"Lidl\", \"HG07834A/HG09155A/HG08131A\", \"Livarno Home GU10 spot RGB+CCT\", [\"_TZ3000_quqaeew6\"]),\n            tuya.whitelabel(\"Lidl\", \"HG07834B/HG09155B/HG08131B\", \"Livarno Home E14 candle RGB+CCT\", [\"_TZ3000_th6zqqy6\"]),\n            tuya.whitelabel(\"Lidl\", \"HG07834B\", \"Livarno Home E14 candle RGB+CCT\", [\"_TZ3000_wr6g6olr\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08131C\", \"Livarno Home outdoor E27 bulb in set with flare\", [\"_TZ3000_q50zhdsc\"]),\n            tuya.whitelabel(\"Lidl\", \"HG07834C/HG09155C/HG08131C\", \"Livarno Home E27 bulb RGB+CCT\", [\"_TZ3000_qd7hej8u\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08383B\", \"Livarno outdoor LED light chain\", [\"_TZ3000_bwlvyjwk\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08383A\", \"Livarno outdoor LED light chain\", [\"_TZ3000_taspddvq\"]),\n            tuya.whitelabel(\"Garza Smart\", \"Garza-Standard-A60\", \"Standard A60 bulb\", [\"_TZ3210_sln7ah6r\"]),\n            tuya.whitelabel(\"UR Lighting\", \"TH008L10RGBCCT\", \"10W RGB+CCT downlight\", [\"_TZ3210_dn5higyl\", \"_TZ3210_hicxa0rh\"]),\n            tuya.whitelabel(\"Lidl\", \"HG08007\", \"Livarno Home outdoor LED band\", [\"_TZ3210_zbabx9wh\"]),\n            tuya.whitelabel(\"Lidl\", \"399629_2110\", \"Livarno Lux Ceiling Panel RGB+CCT\", [\"_TZ3210_c0s1xloa\", \"_TZ3210_x13bu7za\"]),\n            tuya.whitelabel(\"Nous\", \"P3Z\", \"Smart light bulb\", [\"_TZ3210_cieijuw1\"]),\n            tuya.whitelabel(\"Moes\", \"ZLD-RCW_1\", \"RGB+CCT Zigbee LED controller\", [\"_TZ3000_7hcgjxpc\"]),\n            tuya.whitelabel(\"Moes\", \"ZB-TD5-RCW-GU10\", \"RGB+CCT 4.7W GU10 LED bulb\", [\"_TZ3210_rcggc0ys\", \"_TZ3210_ljoasixl\"]),\n            tuya.whitelabel(\"Moes\", \"ZB-TDA9-RCW-E27-MS\", \"RGB+CCT 9W E27 LED bulb\", [\"_TZ3210_wxa85bwk\"]),\n            tuya.whitelabel(\"Moes\", \"ZB-LZD10-RCW\", \"10W RGB+CCT Smart Downlight\", [\"_TZ3210_s9lumfhn\", \"_TZ3210_jjqdqxfq\", \"_TZ3210_dwzfzfjc\"]),\n            tuya.whitelabel(\"Moes\", \"ZB-TDC6-RCW-E14\", \"RGB+CCT 5W E14 LED bulb\", [\"_TZ3210_ifga63rg\"]),\n            tuya.whitelabel(\"MiBoxer\", \"E3-ZR\", \"3 in 1 LED Controller\", [\"_TZB210_wy1pyu1q\"]),\n            tuya.whitelabel(\"MiBoxer\", \"SZ5\", \"5 in 1 LED Controller\", [\"_TZB210_w9hcix2r\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT037Z+\", \"RGB led controller\", [\"_TZB210_417ikxay\", \"_TZB210_wxazcmsh\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT039Z\", \"RGB+CCT LED controller\", [\"_TZ3210_jicmoite\", \"_TZB210_rs0ufzwg\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT066Z\", \"RGB+CCT LED Downlight\", [\"_TZ3210_zrvxvydd\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT068ZR\", \"RGB+CCT LED Downlight\", [\"_TZB210_endmggws\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT103ZR\", \"GU10 RGB+CCT\", [\"_TZB210_6eed09b9\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT106ZR\", \"GU10 RGB+CCT\", [\"_TZB210_rwy5hexp\", \"_TZB210_lnnkh3f9\"]),\n            tuya.whitelabel(\"Tuya\", \"TS0505B_1_1\", \"Zigbee 3.0 18W led light bulb E27 RGBCW\", [\n                \"_TZ3210_jd3z4yig\",\n                \"_TZ3210_r5afgmkl\",\n                \"_TZ3210_mja6r5ix\",\n            ]),\n            tuya.whitelabel(\"MiBoxer\", \"FUTC11ZR\", \"Outdoor light\", [\"_TZB210_zmppwawa\"]),\n            tuya.whitelabel(\"TechToy\", \"_TZ3210_iw0zkcu8\", \"Smart bulb RGB 9W E27\", [\"_TZ3210_iw0zkcu8\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaLight({\n                colorTemp: {range: [153, 500]},\n                color: true,\n            }),\n        ],\n        toZigbee: [tzLocal.TS0505B_1_transitionFixesOnOffBrightness],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 29,\n            });\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0505B\", [\"_TZ3210_iystcadi\", \"_TZ3210_it1u8ahz\"]),\n        model: \"TS0505B_2\",\n        vendor: \"Tuya\",\n        description: \"Zigbee RGB+CCT light\",\n        whiteLabel: [\n            tuya.whitelabel(\"Lidl\", \"14149505L/14149506L_2\", \"Livarno Lux light bar RGB+CCT (black/white)\", [\"_TZ3210_iystcadi\"]),\n            tuya.whitelabel(\"Tuya\", \"TS0505B_2_2\", \"Zigbee GU10/E14 5W smart bulb\", [\"_TZ3210_it1u8ahz\"]),\n        ],\n        toZigbee: [tz.on_off, tzLocal.led_control, tuya.tz.do_not_disturb],\n        fromZigbee: [fz.on_off, fz.tuya_led_controller, fz.brightness],\n        exposes: [e.light_brightness_colortemp_colorhs([143, 500]).removeFeature(\"color_temp_startup\"), tuya.exposes.doNotDisturb()],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 29,\n            });\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0505B\", [\"_TZB210_3zfp8mki\", \"_TZB210_gj0ccsar\"]),\n        model: \"TS0505B_3\",\n        vendor: \"Tuya\",\n        description: \"Zigbee RGB+CCT light\",\n        whiteLabel: [\n            tuya.whitelabel(\"Skydance\", \"WZ5_dim_2\", \"Zigbee & RF 5 in 1 LED controller (DIM mode)\", [\"_TZB210_3zfp8mki\"]),\n            tuya.whitelabel(\"QA\", \"QADZC5\", \"5 in 1 LED controller\", [\"_TZB210_gj0ccsar\"]),\n        ],\n        extend: [\n            m.light({\n                colorTemp: {range: [153, 500]},\n                color: {modes: [\"hs\"], applyRedFix: true, enhancedHue: false},\n            }),\n        ],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 29,\n            });\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0505B\", [\"_TZ3210_bfwvfyx1\"]),\n        model: \"CK-BL702-AL-01_1\",\n        vendor: \"eWeLink\",\n        description: \"Zigbee 3.0 15W led light bulb E27 RGBCW\",\n        toZigbee: [tuya.tz.do_not_disturb],\n        extend: [\n            m.light({\n                colorTemp: {range: [25, 1000], startup: true},\n                effect: true,\n                powerOnBehavior: true,\n                moveToLevelWithOnOffDisable: true,\n                color: {modes: [\"hs\", \"xy\"], enhancedHue: false},\n            }),\n        ],\n        exposes: [tuya.exposes.doNotDisturb()],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {colorCapabilities: 29});\n        },\n    },\n    {\n        zigbeeModel: [\"TS0503B\"],\n        model: \"TS0503B\",\n        vendor: \"Tuya\",\n        description: \"Zigbee RGB light\",\n        whiteLabel: [{vendor: \"BTF-Lighting\", model: \"C03Z\"}, tuya.whitelabel(\"MiBoxer\", \"FUT037Z\", \"RGB led controller\", [\"_TZ3210_778drfdt\"])],\n        extend: [tuya.modernExtend.tuyaLight({color: true})],\n    },\n    {\n        zigbeeModel: [\"TS0504B\"],\n        model: \"TS0504B\",\n        vendor: \"Tuya\",\n        description: \"Zigbee RGBW light\",\n        toZigbee: [tzLocal.TS0504B_color],\n        extend: [tuya.modernExtend.tuyaLight({color: true})],\n    },\n    {\n        zigbeeModel: [\"TS0501A\"],\n        model: \"TS0501A\",\n        description: \"Zigbee light\",\n        vendor: \"Tuya\",\n        extend: [tuyaLight()],\n        whiteLabel: [\n            tuya.whitelabel(\"Lidl\", \"HG06463A\", \"Livarno Lux E27 ST64 filament bulb\", [\"_TZ3000_j2w1dw29\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06463B\", \"Livarno Lux E27 G95 filament bulb\", [\"_TZ3000_nosnx7im\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06462A\", \"Livarno Lux E27 A60 filament bulb\", [\"_TZ3000_7dcddnye\", \"_TZ3000_nbnmw9nc\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0501B\", [\"_TZB210_rkgngb5o\"]),\n        model: \"TS0501B_dimmer\",\n        description: \"Zigbee dimmer\",\n        vendor: \"Tuya\",\n        extend: [tuyaLight({configureReporting: true, effect: false})],\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"L1(ZW)\", \"Light dimmer 0-10V\", [\"_TZB210_rkgngb5o\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0501B\", [\"_TZB210_g01ie5wu\"]),\n        model: \"TS0501B_dimmer_2\",\n        description: \"Zigbee dimmer\",\n        vendor: \"Tuya\",\n        extend: [tuyaLight({minBrightness: \"command\", effect: false})],\n    },\n    {\n        zigbeeModel: [\"TS0501B\"],\n        model: \"TS0501B\",\n        description: \"Zigbee light\",\n        vendor: \"Tuya\",\n        extend: [tuyaLight()],\n        whiteLabel: [\n            tuya.whitelabel(\"MiBoxer\", \"FUT036Z\", \"Single color LED controller\", [\"_TZ3210_dxroobu3\", \"_TZ3210_dbilpfqk\"]),\n            tuya.whitelabel(\"Mercator Ikuü\", \"SMFL20W-ZB\", \"Ridley Floodlight\", [\"_TZ3000_juq7i1fr\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TYZB01_vwqnz1sn\"]),\n        model: \"TS0202_3\",\n        vendor: \"Tuya\",\n        description: \"Motion detector with illuminance\",\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.battery, fz.ias_occupancy_alarm_1_report],\n        toZigbee: [],\n        extend: [m.illuminance(), tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n        exposes: [e.occupancy(), e.battery_low(), e.battery(), e.tamper()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TZ3210_cwamkvua\"]),\n        model: \"TS0202_2\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor with scene switch\",\n        fromZigbee: [tuya.fz.datapoints, fz.ias_occupancy_alarm_1, fz.battery],\n        toZigbee: [tuya.tz.datapoints],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.batteryPercentageRemaining(endpoint);\n            await reporting.batteryVoltage(endpoint);\n        },\n        exposes: [\n            e.battery(),\n            e.battery_voltage(),\n            e.occupancy(),\n            e.action([\"single\", \"double\", \"hold\"]),\n            e.enum(\"light\", ea.STATE, [\"dark\", \"bright\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [102, \"light\", tuya.valueConverterBasic.lookup({dark: false, bright: true})],\n                [101, \"action\", tuya.valueConverterBasic.lookup({single: 0, double: 1, hold: 2})],\n            ],\n        },\n        whiteLabel: [{vendor: \"Linkoze\", model: \"LKMSZ001\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TYZB01_jytabjkb\", \"_TZ3000_lltemgsf\", \"_TYZB01_5nr7ncpl\", \"_TZ3000_mg4dy6z6\", \"_TZ3000_bsvqrxru\"]),\n        model: \"TS0202_1\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        // Requires alarm_1_with_timeout https://github.com/Koenkk/zigbee2mqtt/issues/2818#issuecomment-776119586\n        fromZigbee: [fz.ias_occupancy_alarm_1_with_timeout, fz.battery],\n        toZigbee: [],\n        exposes: [e.occupancy(), e.battery_low(), e.battery(), e.battery_voltage()],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"WHD02\", [\"_TZ3000_hktqahrq\"]),\n        zigbeeModel: [\"TS0202\"],\n        model: \"TS0202\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        whiteLabel: [\n            {vendor: \"Mercator Ikuü\", model: \"SMA02P\"},\n            {vendor: \"Tuya\", model: \"TY-ZPR06\"},\n            {vendor: \"Tesla Smart\", model: \"TS0202\"},\n            tuya.whitelabel(\"MiBoxer\", \"PIR1-ZB\", \"PIR sensor\", [\"_TZ3040_wqmtjsyk\"]),\n            tuya.whitelabel(\"Tuya\", \"ZMS01\", \"Motion sensor\", [\"_TZ3000_otvn3lne\"]),\n            tuya.whitelabel(\"Nous\", \"E2\", \"Motion sensor\", [\"_TZ3000_h4wnrtck\"]),\n            tuya.whitelabel(\"Tuya\", \"809WZT\", \"Motion sensor\", [\"_TZ3040_bb6xaihh\"]),\n            tuya.whitelabel(\"Niceboy\", \"ORBIS Motion Sensor\", \"Motion sensor\", [\"_TZ3000_qomxlryd\"]),\n            tuya.whitelabel(\"Luminea\", \"ZX-5311\", \"Motion sensor\", [\"_TZ3000_jmrgyl7o\"]),\n            tuya.whitelabel(\"Tuya\", \"ZP01\", \"Motion sensor\", [\"_TZ3000_lf56vpxj\"]),\n            tuya.whitelabel(\"Tuya\", \"HW500A\", \"Motion sensor\", [\"_TZ3000_bsvqrxru\"]),\n            tuya.whitelabel(\"Nedis\", \"ZBSM10WT\", \"Motion sensor\", [\"_TZ3000_nss8amz9\"]),\n        ],\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.battery, fz.ias_occupancy_alarm_1_report],\n        toZigbee: [],\n        exposes: (device, options) => {\n            const exps: Expose[] = [e.occupancy(), e.battery_low(), e.battery(), e.battery_voltage()];\n            if (!device || ![\"_TZ3000_bsvqrxru\", \"_TZ3000_nss8amz9\"].includes(device.manufacturerName)) {\n                exps.push(e.tamper());\n            }\n\n            return exps;\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            try {\n                await reporting.batteryPercentageRemaining(endpoint);\n                await reporting.batteryVoltage(endpoint);\n            } catch {\n                /* Fails for some https://github.com/Koenkk/zigbee2mqtt/issues/13708 */\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TZ3040_fwxuzcf4\", \"_TZ3040_msl6wxk9\"]),\n        model: \"ZM-35H-Q\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.battery, fz.ZM35HQ_attr, legacy.fromZigbee.ZM35HQ_battery],\n        toZigbee: [tz.ZM35HQ_attr],\n        extend: [m.quirkCheckinInterval(15000)],\n        exposes: [\n            e.occupancy(),\n            e.battery_low(),\n            e.battery(),\n            e.enum(\"sensitivity\", ea.ALL, [\"low\", \"medium\", \"high\"]).withDescription(\"PIR sensor sensitivity\"),\n            e.enum(\"keep_time\", ea.ALL, [30, 60, 120]).withDescription(\"PIR keep time in seconds\"),\n        ],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [tuya.whitelabel(\"Aubess\", \"40ZH-O\", \"Motion sensor\", [\"_TZ3040_msl6wxk9\"])],\n    },\n    {\n        zigbeeModel: [\"ZG-204Z\"],\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TZ3000_mcxw5ehu\", \"_TZ3000_6ygjfyll\", \"_TZ3040_6ygjfyll\", \"_TZ3000_msl6wxk9\"]),\n        model: \"IH012-RT01\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        fromZigbee: [fz.ZM35HQ_attr, fz.battery],\n        toZigbee: [tz.ZM35HQ_attr],\n        extend: [\n            m.quirkCheckinInterval(15000),\n            // Occupancy reporting interval is 60s, so allow for one dropped update plus a small safety margin of 5s\n            m.iasZoneAlarm({\n                zoneType: \"occupancy\",\n                zoneAttributes: [\"alarm_1\", \"battery_low\"],\n                keepAliveTimeout: 125,\n            }),\n        ],\n        exposes: [\n            e.battery(),\n            e.battery_voltage(),\n            e.enum(\"sensitivity\", ea.ALL, [\"low\", \"medium\", \"high\"]).withDescription(\"PIR sensor sensitivity\"),\n            e.enum(\"keep_time\", ea.ALL, [30, 60, 120]).withDescription(\"PIR keep time in seconds\"),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n            await reporting.batteryVoltage(endpoint);\n        },\n        whiteLabel: [\n            {\n                vendor: \"HOBEIAN\",\n                model: \"ZG-204Z\",\n                fingerprint: [{modelID: \"ZG-204Z\"}],\n            },\n            tuya.whitelabel(\"Tuya\", \"ZMS-102\", \"Motion sensor\", [\"_TZ3000_msl6wxk9\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0202\", [\"_TZ3000_o4mkahkc\"]),\n        model: \"IH012-RT02\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.ZM35HQ_attr, fz.battery],\n        toZigbee: [tz.ZM35HQ_attr],\n        extend: [m.quirkCheckinInterval(15000)],\n        exposes: [\n            e.occupancy(),\n            e.battery_low(),\n            e.tamper(),\n            e.battery(),\n            e.battery_voltage(),\n            e.enum(\"sensitivity\", ea.ALL, [\"low\", \"medium\", \"high\"]).withDescription(\"PIR sensor sensitivity\"),\n            e.enum(\"keep_time\", ea.ALL, [30, 60, 120]).withDescription(\"PIR keep time in seconds\"),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n            await reporting.batteryVoltage(endpoint);\n        },\n    },\n    {\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0207\", [\n                \"_TZ3000_m0vaazab\",\n                \"_TZ3000_ufttklsz\",\n                \"_TZ3000_nkkl7uzv\",\n                \"_TZ3000_misw04hq\",\n                \"_TZ3000_nlsszmzl\",\n                \"_TZ3000_gszjt2xx\",\n                \"_TZ3000_wlquqiiz\",\n                \"_TZ3000_5k5vh43t\",\n                \"_TZ3000_kxlmv9ag\",\n                \"_TZ3000_wmlc9p9z\",\n                \"_TZ3000_shopg9ss\",\n                \"_TZ3000_n0lphcok\",\n                \"_TZ3000_r80pzsb9\",\n            ]),\n            ...tuya.fingerprint(\"TS0001\", [\"_TZ3000_n0lphcok\"]),\n        ],\n        model: \"TS0207_repeater\",\n        vendor: \"Tuya\",\n        description: \"Repeater\",\n        fromZigbee: [fz.linkquality_from_basic],\n        toZigbee: [],\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"TS0001_repeater\", \"Zigbee signal repeater\", [\"_TZ3000_n0lphcok\"])],\n        exposes: [],\n    },\n    {\n        zigbeeModel: [\"TS0207\", \"FNB54-WTS08ML1.0\", \"ZG-222Z\"],\n        model: \"TS0207_water_leak_detector\",\n        vendor: \"Tuya\",\n        description: \"Water leak detector\",\n        fromZigbee: [fz.ias_water_leak_alarm_1, fz.battery],\n        whiteLabel: [\n            {vendor: \"CR Smart Home\", model: \"TS0207\"},\n            {\n                vendor: \"HOBEIAN\",\n                model: \"ZG-222Z\",\n                fingerprint: [{modelID: \"ZG-222Z\"}],\n            },\n            tuya.whitelabel(\"Meian\", \"SW02\", \"Water leak sensor\", [\"_TZ3000_kyb656no\"]),\n            tuya.whitelabel(\"Aubess\", \"IH-K665\", \"Water leak sensor\", [\"_TZ3000_kstbkt6a\"]),\n            tuya.whitelabel(\"HOBEIAN\", \"ZG-222ZA\", \"Water leak sensor\", [\"_TZ3000_k4ej3ww2\", \"_TZ3000_abaplimj\"]),\n            tuya.whitelabel(\"Tuya\", \"_TZ3000_mqiev3jk\", \"Solar powered rain sensor\", [\"_TZ3000_mqiev3jk\"]),\n            tuya.whitelabel(\"Tuya\", \"TS0207_water_leak_detector_1\", \"Zigbee water flood sensor + 1m probe cable\", [\n                \"_TZ3000_ocjlo4ea\",\n                \"_TZ3000_upgcbody\",\n            ]),\n            tuya.whitelabel(\"Tuya\", \"TS0207_water_leak_detector_3\", \"Zigbee water leak sensor\", [\"_TYZB01_sqmd19i1\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-QY-WL-C-MS\", \"Zigbee water leak sensor\", [\"_TZ3000_t6jriawg\"]),\n            tuya.whitelabel(\"Tuya\", \"899WZ\", \"Water leak detector with 80DB Alarm\", [\"_TZ3000_mugyhz0q\"]),\n            tuya.whitelabel(\"Niceboy\", \"ORBIS Water Sensor\", \"Water leak sensor\", [\"_TZ3000_awvmkayh\"]),\n            tuya.whitelabel(\"Nous\", \"E4\", \"Water Leakage Sensor)\", [\"_TZ3000_0s9gukzt\"]),\n        ],\n        toZigbee: [],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n        exposes: (device, options) => {\n            const exps: Expose[] = [e.water_leak(), e.battery_low(), e.battery()];\n            const noTamperModels = [\n                // manufacturerName for models without a tamper sensor\n                \"_TZ3000_mugyhz0q\", // Tuya 899WZ\n                \"_TZ3000_k4ej3ww2\", // Aubess IH-K665\n                \"_TZ3000_kstbkt6a\", // Aubess IH-K665\n                \"_TZ3000_upgcbody\", // Zigbee water leak sensor\n                \"_TYZB01_ttvdudvx\", // Zigbee water leak sensor\n            ];\n            if (!device || !noTamperModels.includes(device.manufacturerName)) {\n                exps.push(e.tamper());\n            }\n\n            return exps;\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0207\", [\"_TZ3210_tgvtvdoc\", \"_TZ3210_p68kms0l\"]),\n        model: \"RB-SRAIN01\",\n        vendor: \"Tuya\",\n        description: \"Solar rain sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        extend: [m.iasZoneAlarm({zoneType: \"rain\", zoneAttributes: [\"alarm_1\"]}), m.battery({percentageReporting: true})],\n        exposes: [\n            e.illuminance().withUnit(\"lx\"),\n            e.numeric(\"illuminance_average_20min\", ea.STATE).withUnit(\"lx\").withDescription(\"Illuminance average for the last 20 minutes\"),\n            e.numeric(\"illuminance_maximum_today\", ea.STATE).withUnit(\"lx\").withDescription(\"Illuminance maximum for the last 24 hours\"),\n            e.binary(\"cleaning_reminder\", ea.STATE, true, false).withDescription(\"Cleaning reminder\"),\n            e.numeric(\"rain_intensity\", ea.STATE).withUnit(\"mV\").withDescription(\"Rainfall intensity\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [4, \"battery\", tuya.valueConverter.raw],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"illuminance_average_20min\", tuya.valueConverter.raw],\n                [103, \"illuminance_maximum_today\", tuya.valueConverter.raw],\n                [104, \"cleaning_reminder\", tuya.valueConverter.trueFalse0],\n                [105, \"rain_intensity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0101\", [\"_TYZB01_ijihzffk\", \"_TZ3210_tfxwxklq\", \"_TZ3210_2dfy6tol\"]),\n        model: \"TS0101\",\n        vendor: \"Tuya\",\n        description: \"Zigbee Socket\",\n        whiteLabel: [\n            {vendor: \"Larkkey\", model: \"PS080\"},\n            {vendor: \"Mercator Ikuü\", model: \"SPBS01G\"},\n            tuya.whitelabel(\"Mercator Ikuü\", \"SISW01\", \"Inline Switch\", [\"_TZ3210_2dfy6tol\"]),\n        ],\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0108\", [\"_TYZB01_7yidyqxd\"]),\n        model: \"TS0108\",\n        vendor: \"Tuya\",\n        description: \"Socket with 2 USB\",\n        whiteLabel: [{vendor: \"Larkkey\", model: \"PS580\"}],\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        exposes: [e.switch().withEndpoint(\"l1\"), e.switch().withEndpoint(\"l2\")],\n        endpoint: (device) => {\n            return {l1: 1, l2: 7};\n        },\n        meta: {multiEndpoint: true, disableDefaultResponse: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(7), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_myd45weu\",\n            \"_TZE200_ga1maeof\",\n            \"_TZE200_2se8efxh\",\n            \"_TZE204_myd45weu\",\n            \"_TZE284_myd45weu\",\n            \"_TZE284_oitavov2\",\n            \"_TZE284_2se8efxh\",\n            \"_TZE200_9cqcpkgb\",\n        ]),\n        model: \"TS0601_soil\",\n        vendor: \"Tuya\",\n        description: \"Soil sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.temperature(), e.soil_moisture(), tuya.exposes.temperatureUnit(), e.battery(), tuya.exposes.batteryState()],\n        meta: {\n            tuyaDatapoints: [\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.raw],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [15, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_g2e6cpnw\", \"_TZE284_sgabhwa6\", \"_TZE284_awepdiwi\"]),\n        model: \"TS0601_soil_2\",\n        vendor: \"Tuya\",\n        description: \"Soil sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.soil_moisture(),\n            e.numeric(\"temperature\", ea.STATE).withUnit(\"°C\").withValueMin(-10).withValueMax(60).withDescription(\"Soil temperature\"),\n            e.numeric(\"temperature_f\", ea.STATE).withUnit(\"°F\").withValueMin(14).withValueMax(140).withDescription(\"Soil temperature\"),\n            e\n                .numeric(\"temperature_sensitivity\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0.3)\n                .withValueMax(1)\n                .withValueStep(0.1)\n                .withDescription(\"Temperature sensitivity\"),\n            e.numeric(\"humidity_sensitivity\", ea.STATE_SET).withUnit(\"%\").withValueMin(1).withValueMax(5).withDescription(\"Humidity sensitivity\"),\n            e.enum(\"temperature_alarm\", ea.STATE, [\"lower_alarm\", \"upper_alarm\", \"cancel\"]).withDescription(\"Temperature alarm state\"),\n            e.enum(\"humidity_alarm\", ea.STATE, [\"lower_alarm\", \"upper_alarm\", \"cancel\"]).withDescription(\"Humidity alarm state\"),\n            e\n                .numeric(\"max_temperature_alarm\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0)\n                .withValueMax(60)\n                .withDescription(\"Upper temperature limit\"),\n            e\n                .numeric(\"min_temperature_alarm\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0)\n                .withValueMax(60)\n                .withDescription(\"Lower temperature limit\"),\n            e.numeric(\"max_humidity_alarm\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Upper humidity limit\"),\n            e.numeric(\"min_humidity_alarm\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Lower humidity limit\"),\n            e.numeric(\"schedule_periodic\", ea.STATE_SET).withUnit(\"min\").withValueMin(5).withValueMax(60).withDescription(\"Report sensitivity\"),\n            e.battery(),\n            tuya.exposes.batteryState(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    101,\n                    \"temperature_alarm\",\n                    tuya.valueConverterBasic.lookup({\n                        lower_alarm: tuya.enum(0),\n                        upper_alarm: tuya.enum(1),\n                        cancel: tuya.enum(2),\n                    }),\n                ],\n                [\n                    102,\n                    \"humidity_alarm\",\n                    tuya.valueConverterBasic.lookup({\n                        lower_alarm: tuya.enum(0),\n                        upper_alarm: tuya.enum(1),\n                        cancel: tuya.enum(2),\n                    }),\n                ],\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.divideBy10],\n                [110, \"temperature_f\", tuya.valueConverter.divideBy10],\n                [107, \"temperature_sensitivity\", tuya.valueConverter.divideBy10],\n                [108, \"humidity_sensitivity\", tuya.valueConverter.raw],\n                [103, \"max_temperature_alarm\", tuya.valueConverter.divideBy10],\n                [104, \"min_temperature_alarm\", tuya.valueConverter.divideBy10],\n                [105, \"max_humidity_alarm\", tuya.valueConverter.raw],\n                [106, \"min_humidity_alarm\", tuya.valueConverter.raw],\n                [109, \"schedule_periodic\", tuya.valueConverter.raw],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE284_aao3yzhs\",\n            \"_TZE284_nhgdf6qr\",\n            \"_TZE284_ap9owrsa\",\n            \"_TZE284_33bwcga2\",\n            \"_TZE284_wckqztdq\",\n            \"_TZE284_3urschql\",\n        ]),\n        model: \"TS0601_soil_3\",\n        vendor: \"Tuya\",\n        description: \"Soil sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.temperature(), e.soil_moisture(), tuya.exposes.temperatureUnit(), e.battery(), tuya.exposes.batteryState()],\n        meta: {\n            tuyaDatapoints: [\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.divideBy10],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [15, \"battery\", tuya.valueConverterBasic.scale(6, 60, 0, 100)], //device reports back false scaling\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"GIEX\", \"GX04\", \"Soil Moisture Sensor\", [\"_TZE284_nhgdf6qr\"]),\n            tuya.whitelabel(\"GIEX\", \"GX06\", \"Soil Moisture Sensor\", [\"_TZE284_3urschql\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_ip2akl4w\",\n            \"_TZE200_1agwnems\",\n            \"_TZE200_la2c2uo9\",\n            \"_TZE200_579lguh2\",\n            \"_TZE200_vucankjx\",\n            \"_TZE200_4mh6tyyo\",\n            \"_TZE204_hlx9tnzb\",\n            \"_TZE204_n9ctkb6j\",\n            \"_TZE204_9qhuzgo0\",\n            \"_TZE200_9cxuhakf\",\n            \"_TZE200_a0syesf5\",\n            \"_TZE200_3p5ydos3\",\n            \"_TZE200_swaamsoy\",\n            \"_TZE200_ojzhk75b\",\n            \"_TZE200_w4cryh2i\",\n            \"_TZE200_dfxkcots\",\n            \"_TZE204_68utemio\",\n            \"_TZE200_9i9dt8is\",\n            \"_TZE200_ctq0k47x\",\n            \"_TZE200_ebwgzdqq\",\n            \"_TZE204_vevc4c6g\",\n            \"_TZE200_0nauxa0p\",\n            \"_TZE200_ykgar0ow\",\n            \"_TZE284_m1cvyneb\",\n            \"_TZE200_0hb4rdnp\",\n        ]),\n        model: \"TS0601_dimmer_1_gang_1\",\n        vendor: \"Tuya\",\n        description: \"1 gang smart dimmer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: (device, options) => {\n            const exps: Expose[] = [\n                tuya.exposes.lightBrightnessWithMinMax(),\n                tuya.exposes.countdown(),\n                e.power_on_behavior().withAccess(ea.STATE_SET),\n            ];\n\n            if (!device || ![\"_TZE200_4mh6tyyo\", \"_TZE200_ykgar0ow\", \"_TZE200_0hb4rdnp\"].includes(device.manufacturerName)) {\n                exps.push(tuya.exposes.lightType(), tuya.exposes.backlightModeOffNormalInverted().withAccess(ea.STATE_SET));\n            }\n\n            return exps;\n        },\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [3, \"min_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [4, \"light_type\", tuya.valueConverter.lightType],\n                [5, \"max_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [6, \"countdown\", tuya.valueConverter.countdown],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehavior],\n                [21, \"backlight_mode\", tuya.valueConverter.backlightModeOffNormalInverted],\n            ],\n        },\n        whiteLabel: [\n            {vendor: \"Lerlink\", model: \"X706U\"},\n            {vendor: \"Moes\", model: \"ZS-EUD_1gang\"},\n            {vendor: \"Larkkey\", model: \"ZSTY-SM-1DMZG-EU\"},\n            {vendor: \"Earda\", model: \"EDM-1ZAA-EU\"},\n            {vendor: \"Earda\", model: \"EDM-1ZAB-EU\"},\n            {vendor: \"Earda\", model: \"EDM-1ZBA-EU\"},\n            {vendor: \"Mercator Ikuü\", model: \"SSWD01\"},\n            {vendor: \"Moes\", model: \"ZS-USD\"},\n            {vendor: \"Moes\", model: \"EDM-1ZBB-EU\"},\n            tuya.whitelabel(\"Moes\", \"ZS-SR-EUD-1\", \"Star ring smart dimmer switch 1 gang\", [\"_TZE204_hlx9tnzb\"]),\n            tuya.whitelabel(\"Moes\", \"MS-105Z\", \"Smart Dimmer module\", [\"_TZE200_la2c2uo9\"]),\n            tuya.whitelabel(\"Mercator Ikuü\", \"SSWM-DIMZ\", \"Switch Mechanism\", [\"_TZE200_9cxuhakf\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZN2S-US1-SD\", \"Single gang dimmer\", [\"_TZE204_68utemio\"]),\n            tuya.whitelabel(\"Mercator Ikuü\", \"SSWRM-ZB\", \"Rotary dimmer mechanism\", [\"_TZE200_a0syesf5\"]),\n            tuya.whitelabel(\"Lonsonho\", \"EDM-1ZBB-EU\", \"Smart Dimmer Switch\", [\"_TZE200_0nauxa0p\"]),\n            tuya.whitelabel(\"ION Industries\", \"ID200W-ZIGB\", \"LED Zigbee Dimmer\", [\"_TZE200_ykgar0ow\", \"_TZE200_4mh6tyyo\"]),\n            tuya.whitelabel(\"ION Industries\", \"90.500.090\", \"Zigbee Dimmer Master/Slave set\", [\"_TZE200_0hb4rdnp\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_whpb9yts\"]),\n        model: \"TS0601_dimmer_1_gang_2\",\n        vendor: \"Tuya\",\n        description: \"1 gang smart dimmer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.lightBrightness(),\n            tuya.exposes.countdown(),\n            tuya.exposes.lightType(),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n            tuya.exposes.backlightModeOffNormalInverted().withAccess(ea.STATE_SET),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [3, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [4, \"light_type\", tuya.valueConverter.lightType],\n                [5, \"max_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [6, \"countdown\", tuya.valueConverter.countdown],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehavior],\n                [21, \"backlight_mode\", tuya.valueConverter.backlightModeOffNormalInverted],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_qzaing2g\"]),\n        model: \"TS0601_dimmer_1_gang_3\",\n        vendor: \"Tuya\",\n        description: \"1 gang smart dimmer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [tuya.exposes.lightBrightness(), e.voltage(), e.current(), e.power(), e.child_lock(), tuya.exposes.backlightModeOffOn()],\n        meta: {\n            tuyaDatapoints: [\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n                [21, \"current\", tuya.valueConverter.divideBy1000],\n                [22, \"power\", tuya.valueConverter.divideBy10],\n                [23, \"voltage\", tuya.valueConverter.divideBy10],\n                [101, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [141, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [142, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n                // Doesn't seem to work\n                // https://github.com/Koenkk/zigbee2mqtt/issues/26526#issuecomment-2749559071\n                // [143, \"min_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                // [144, \"max_brightness\", tuya.valueConverter.scale0_254to0_1000],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_fjjbhx9d\", \"_TZE200_e3oitdyu\", \"_TZE200_gwkapsoq\", \"_TZE204_zenj4lxv\"]),\n        model: \"TS0601_dimmer_2\",\n        vendor: \"Tuya\",\n        description: \"2 gang smart dimmer\",\n        whiteLabel: [\n            {vendor: \"Moes\", model: \"ZS-EUD_2gang\"},\n            {vendor: \"Moes\", model: \"MS-105B\"}, // _TZE200_e3oitdyu\n            tuya.whitelabel(\"Moes\", \"ZS-SR-EUD-2\", \"Star ring smart dimmer switch 2 gangs\", [\"_TZE204_zenj4lxv\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 1}}),\n            tuya.modernExtend.dpLight({\n                state: {\n                    dp: 1,\n                    type: tuya.dataTypes.bool,\n                    valueOn: [\"ON\", true],\n                    valueOff: [\"OFF\", false],\n                    skip: tuya.skip.stateOnAndBrightnessPresent,\n                },\n                brightness: {\n                    dp: 2,\n                    type: tuya.dataTypes.number,\n                    scale: [0, 254, 0, 1000],\n                },\n                min: {dp: 3, type: tuya.dataTypes.number, scale: [0, 254, 0, 1000]},\n                max: {dp: 5, type: tuya.dataTypes.number, scale: [0, 254, 0, 1000]},\n                endpoint: \"l1\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                name: \"countdown\",\n                dp: 6,\n                type: tuya.dataTypes.number,\n                expose: tuya.exposes.countdown(),\n                endpoint: \"l1\",\n            }),\n            tuya.modernExtend.dpLight({\n                state: {\n                    dp: 7,\n                    type: tuya.dataTypes.bool,\n                    valueOn: [\"ON\", true],\n                    valueOff: [\"OFF\", false],\n                    skip: tuya.skip.stateOnAndBrightnessPresent,\n                },\n                brightness: {\n                    dp: 8,\n                    type: tuya.dataTypes.number,\n                    scale: [0, 254, 0, 1000],\n                },\n                min: {dp: 9, type: tuya.dataTypes.number, scale: [0, 254, 0, 1000]},\n                max: {dp: 11, type: tuya.dataTypes.number, scale: [0, 254, 0, 1000]},\n                endpoint: \"l2\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                name: \"countdown\",\n                dp: 12,\n                type: tuya.dataTypes.number,\n                expose: tuya.exposes.countdown(),\n                endpoint: \"l2\",\n            }),\n            tuya.modernExtend.dpPowerOnBehavior({\n                dp: 14,\n                type: tuya.dataTypes.enum,\n            }),\n            tuya.modernExtend.dpBacklightMode({\n                dp: 21,\n                type: tuya.dataTypes.enum,\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_vm1gyrso\", \"_TZE204_1v1dxkck\", \"_TZE204_znvwzxkq\", \"_TZE284_znvwzxkq\"]),\n        model: \"TS0601_dimmer_3\",\n        vendor: \"Tuya\",\n        description: \"3 gang smart dimmer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.lightBrightnessWithMinMax().withEndpoint(\"l1\"),\n            tuya.exposes.lightBrightnessWithMinMax().withEndpoint(\"l2\"),\n            tuya.exposes.lightBrightnessWithMinMax().withEndpoint(\"l3\"),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l3\"),\n            tuya.exposes.lightType().withEndpoint(\"l1\"),\n            tuya.exposes.lightType().withEndpoint(\"l2\"),\n            tuya.exposes.lightType().withEndpoint(\"l3\"),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n            tuya.exposes.backlightModeOffNormalInverted().withAccess(ea.STATE_SET),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [3, \"min_brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [4, \"light_type_l1\", tuya.valueConverter.lightType],\n                [5, \"max_brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [6, \"countdown_l1\", tuya.valueConverter.countdown],\n                [7, \"state_l2\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [8, \"brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [9, \"min_brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [10, \"light_type_l2\", tuya.valueConverter.lightType],\n                [11, \"max_brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [12, \"countdown_l2\", tuya.valueConverter.countdown],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [15, \"state_l3\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [16, \"brightness_l3\", tuya.valueConverter.scale0_254to0_1000],\n                [17, \"min_brightness_l3\", tuya.valueConverter.scale0_254to0_1000],\n                [18, \"light_type_l3\", tuya.valueConverter.lightType],\n                [19, \"max_brightness_l3\", tuya.valueConverter.scale0_254to0_1000],\n                [20, \"countdown_l3\", tuya.valueConverter.countdown],\n                [21, \"backlight_mode\", tuya.valueConverter.backlightModeOffNormalInverted],\n            ],\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1};\n        },\n        whiteLabel: [\n            {vendor: \"Moes\", model: \"ZS-EUD_3gang\"},\n            tuya.whitelabel(\"Moes\", \"ZS-SR-EUD-3\", \"Star ring smart dimmer switch 3 gangs\", [\"_TZE204_1v1dxkck\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZN2S-RS3E-DH\", \"3 gang dimmer\", [\"_TZE204_znvwzxkq\", \"_TZE284_znvwzxkq\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_bxoo2swd\", \"_TZE200_tsxpl0d0\"]),\n        model: \"TS0601_dimmer_4\",\n        vendor: \"Tuya\",\n        description: \"2 gang smart dimmer module\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.lightBrightnessWithMinMax().withEndpoint(\"l1\"),\n            tuya.exposes.lightBrightnessWithMinMax().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.lightType().withEndpoint(\"l1\"),\n            tuya.exposes.lightType().withEndpoint(\"l2\"),\n            e.enum(\"power_on_behavior\", ea.STATE_SET, [\"off\", \"on\", \"previous\"]),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [3, \"min_brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [\n                    4,\n                    \"light_type_l1\",\n                    tuya.valueConverterBasic.lookup({\n                        led: tuya.enum(0),\n                        incandescent: tuya.enum(1),\n                        halogen: tuya.enum(2),\n                    }),\n                ],\n                [5, \"max_brightness_l1\", tuya.valueConverter.scale0_254to0_1000],\n                [6, \"countdown_l1\", tuya.valueConverter.countdown],\n                [7, \"state_l2\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [8, \"brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [9, \"min_brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [\n                    10,\n                    \"light_type_l2\",\n                    tuya.valueConverterBasic.lookup({\n                        led: tuya.enum(0),\n                        incandescent: tuya.enum(1),\n                        halogen: tuya.enum(2),\n                    }),\n                ],\n                [11, \"max_brightness_l2\", tuya.valueConverter.scale0_254to0_1000],\n                [12, \"countdown_l2\", tuya.valueConverter.countdown],\n                [\n                    14,\n                    \"power_on_behavior\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        on: tuya.enum(1),\n                        previous: tuya.enum(2),\n                    }),\n                ],\n            ],\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 1};\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Moes\", \"ZM-105B-M\", \"2 gang smart dimmer module\", [\"_TZE204_bxoo2swd\"]),\n            tuya.whitelabel(\"KnockautX\", \"FMD2C018\", \"2 gang smart dimmer module\", [\"_TZE200_tsxpl0d0\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_dcnsggvz\"]),\n        model: \"TS0601_dimmer_5\",\n        vendor: \"Tuya\",\n        description: \"1 gang smart dimmer module\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.lightBrightnessWithMinMax(),\n            e.enum(\"power_on_behavior\", ea.STATE_SET, [\"off\", \"on\", \"previous\"]),\n            tuya.exposes.countdown(),\n            tuya.exposes.lightType(),\n            tuya.exposes.switchType(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [3, \"min_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [\n                    4,\n                    \"light_type\",\n                    tuya.valueConverterBasic.lookup({\n                        led: tuya.enum(0),\n                        incandescent: tuya.enum(1),\n                        halogen: tuya.enum(2),\n                    }),\n                ],\n                [4, \"light_type\", tuya.valueConverter.lightType],\n                [5, \"max_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [6, \"countdown\", tuya.valueConverter.countdown],\n                [\n                    14,\n                    \"power_on_behavior\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        on: tuya.enum(1),\n                        previous: tuya.enum(2),\n                    }),\n                ],\n                [\n                    57,\n                    \"switch_type\",\n                    tuya.valueConverterBasic.lookup({\n                        toggle: tuya.enum(0),\n                        state: tuya.enum(1),\n                        momentary: tuya.enum(2),\n                    }),\n                ],\n            ],\n        },\n        whiteLabel: [{vendor: \"Moes\", model: \"MS-105-M\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_p0gzbqct\"]),\n        model: \"TS0601_dimmer_knob\",\n        vendor: \"Tuya\",\n        description: \"Zigbee smart knob dimmer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.lightBrightness().withMinBrightness().setAccess(\"min_brightness\", ea.STATE_SET),\n            tuya.exposes.lightType(),\n            tuya.exposes.indicatorModeNoneRelayPos(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [3, \"min_brightness\", tuya.valueConverter.scale0_254to0_1000],\n                [4, \"light_type\", tuya.valueConverter.lightType],\n                [21, \"indicator_mode\", tuya.valueConverterBasic.lookup({none: 0, relay: 1, pos: 2})],\n            ],\n        },\n        whiteLabel: [\n            {vendor: \"Moes\", model: \"WS-SY-EURD\"},\n            {vendor: \"Moes\", model: \"WS-SY-EURD-WH-MS\"},\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_oiymh3qu\"]),\n        model: \"TS011F_socket_module\",\n        vendor: \"Tuya\",\n        description: \"Socket module\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        whiteLabel: [\n            {vendor: \"LoraTap\", model: \"RR400ZB\"},\n            {vendor: \"LoraTap\", model: \"SP400ZB\"},\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_wxtp7c5y\", \"_TYZB01_mtunwanm\"]),\n        model: \"TS011F_wall_outlet\",\n        vendor: \"Tuya\",\n        description: \"In-wall outlet\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        whiteLabel: [\n            {vendor: \"Teekar\", model: \"SWP86-01OG\"},\n            tuya.whitelabel(\"ClickSmart+\", \"CMA30035\", \"1 gang socket outlet\", [\"_TYZB01_mtunwanm\"]),\n            {vendor: \"BSEED\", model: \"Zigbee Socket\"},\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3210_fhx7lk3d\"]),\n        model: \"CMA30651\",\n        vendor: \"ClickSmart+\",\n        description: \"13A Smart Switched Fused Connection Unit\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                onOffCountdown: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0011\", [\"_TZ3000_uaa34g7v\"]),\n        model: \"CSP041\",\n        vendor: \"ClickSmart+\",\n        description: \"1 gang switch module without neutral wire\",\n        extend: [m.onOff({powerOnBehavior: false})],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TYZB01_u9kkqh5o\"]),\n        model: \"CSP043\",\n        vendor: \"ClickSmart+\",\n        description: \"1 gang switch module with neutral wire\",\n        extend: [m.onOff({powerOnBehavior: false})],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0012\", [\"_TZ3000_biakwrag\"]),\n        model: \"CSP042\",\n        vendor: \"ClickSmart+\",\n        description: \"2 gang switch module without neutral wire\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: false,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true, multiEndpointSkip: [\"power_on_behavior\"]},\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110F\", [\"_TZ3000_estfrmup\", \"_TZ3000_ktuoyvt5\"]),\n        model: \"CSP051\",\n        vendor: \"ClickSmart+\",\n        description: \"1 gang smart dimmer switch module without neutral\",\n        extend: [m.light()],\n        whiteLabel: [tuya.whitelabel(\"Lonsonho\", \"QS-Zigbee-D02-TRIAC-L\", \"1 gang smart dimmer switch module without neutral\", [\"_TZ3000_ktuoyvt5\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110F\", [\"_TZ3000_hexqj6ls\"]),\n        model: \"CSP052\",\n        vendor: \"ClickSmart+\",\n        description: \"2 gang smart dimmer switch module without neutral\",\n        extend: [\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2}}),\n            m.light({\n                powerOnBehavior: false,\n                endpointNames: [\"l1\", \"l2\"],\n                configureReporting: true,\n            }),\n        ],\n        meta: {multiEndpoint: true},\n    },\n    {\n        fingerprint: [...tuya.fingerprint(\"isltm67\\u0000\", [\"_TYST11_pisltm67\"]), ...tuya.fingerprint(\"TS0601\", [\"_TZE200_pisltm67\"])],\n        model: \"S-LUX-ZB\",\n        vendor: \"Tuya\",\n        description: \"Light sensor\",\n        fromZigbee: [legacy.fromZigbee.SLUXZB],\n        toZigbee: [],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genBasic\"]);\n        },\n        exposes: [e.battery(), e.illuminance(), e.enum(\"brightness_level\", ea.STATE, [\"LOW\", \"MEDIUM\", \"HIGH\"])],\n    },\n    {\n        zigbeeModel: [\"TS130F\"],\n        model: \"TS130F\",\n        vendor: \"Tuya\",\n        description: \"Curtain/blind switch\",\n        fromZigbee: [\n            fz.cover_position_tilt,\n            tuya.fz.indicator_mode,\n            fz.tuya_cover_options,\n            tuya.fz.backlight_mode_off_on,\n            tuya.fz.switch_type_curtain,\n        ],\n        toZigbee: [\n            tz.cover_state,\n            tz.cover_position_tilt,\n            tz.tuya_cover_calibration,\n            tz.tuya_cover_reversal,\n            tuya.tz.backlight_indicator_mode_2,\n            tuya.tz.backlight_indicator_mode_1,\n            tuya.tz.switch_type_curtain,\n        ],\n        meta: {coverInverted: true},\n        whiteLabel: [\n            tuya.whitelabel(\"BSEED\", \"EC-GL86ZPCRS31\", \"Curtain/blind switch\", [\"_TZ3000_bs93npae\"]),\n            tuya.whitelabel(\"Danor\", \"SK-Z802C-US\", \"Smart curtain/shutter switch\", [\"_TZ3000_8h7wgocw\"]),\n            {vendor: \"LoraTap\", model: \"SC400\"},\n            tuya.whitelabel(\"LoraTap\", \"SC500ZB\", \"Smart curtain/shutter switch\", [\"_TZ3000_e3vhyirx\", \"_TZ3000_femsaaua\"]),\n            tuya.whitelabel(\"LoraTap\", \"SC500ZB-v4\", \"Smart curtain/shutter switch\", [\"_TZ3000_5iixzdo7\"]),\n            tuya.whitelabel(\"Nous\", \"B4Z\", \"Curtain switch\", [\"_TZ3000_yruungrl\"]),\n            tuya.whitelabel(\"Nous\", \"L12Z\", \"Smart ZigBee Curtain Module L12Z\", [\"_TZ3000_jwv3cwak\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZN-LC1E\", \"Smart curtain/shutter switch\", [\"_TZ3000_74hsp7qy\"]),\n            tuya.whitelabel(\"Girier\", \"TS130F_GIRIER\", \"Smart curtain switch\", [\"_TZ3210_dwytrmda\"]),\n            tuya.whitelabel(\"Zemismart\", \"TS130F_ZEMISMART\", \"Smart curtain wall switch\", [\"_TZ3000_vw8pawxa\"]),\n            tuya.whitelabel(\"QA\", \"QACZ1\", \"Smart curtain switch\", [\"_TZ3210_xbpt8ewc\"]),\n        ],\n        exposes: (device) => {\n            const exps: Expose[] = [\n                e.cover_position(),\n                e.enum(\"moving\", ea.STATE, [\"UP\", \"STOP\", \"DOWN\"]),\n                e.binary(\"motor_reversal\", ea.ALL, \"ON\", \"OFF\"),\n            ];\n            if ([\"_TZ3000_yruungrl\", \"_TZ3210_dwytrmda\", \"_TZ3210_xbpt8ewc\", \"_TZ3000_vw8pawxa\"].includes(device.manufacturerName)) {\n                exps.push(e.binary(\"calibration\", ea.ALL, \"ON\", \"OFF\"), e.numeric(\"calibration_time\", ea.ALL).withUnit(\"s\"));\n            } else if ([\"_TZ3000_cet6ch1r\", \"_TZ3000_5iixzdo7\"].includes(device.manufacturerName)) {\n                exps.push(\n                    e.binary(\"calibration_to_open\", ea.ALL, \"ON\", \"OFF\"),\n                    e.binary(\"calibration_to_close\", ea.ALL, \"ON\", \"OFF\"),\n                    e.numeric(\"calibration_time_to_open\", ea.ALL).withUnit(\"s\"),\n                    e.numeric(\"calibration_time_to_close\", ea.ALL).withUnit(\"s\"),\n                );\n            } else {\n                exps.push(e.binary(\"calibration\", ea.ALL, \"ON\", \"OFF\"), e.numeric(\"calibration_time\", ea.STATE).withUnit(\"s\"));\n            }\n            if (\n                ![\"_TZ3000_e3vhyirx\", \"_TZ3000_5iixzdo7\", \"_TZ3000_yruungrl\", \"_TZ3210_dwytrmda\", \"_TZ3210_xbpt8ewc\"].includes(\n                    device.manufacturerName,\n                )\n            ) {\n                exps.push(tuya.exposes.indicatorMode(), tuya.exposes.backlightModeOffOn());\n            }\n            if ([\"_TZ3000_5iixzdo7\"].includes(device.manufacturerName)) {\n                exps.push(tuya.exposes.switchTypeCurtain());\n            } else if ([\"_TZ3000_yruungrl\"].includes(device.manufacturerName)) {\n                exps.push(\n                    e.enum(\"switch_type_curtain\", ea.ALL, [\"flip-switch\", \"sync-switch\", \"button-switch\"]).withDescription(\"External switch type\"),\n                );\n            }\n            return exps;\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS130F\", [\"_TZ3000_1dd0d5yi\"]),\n        model: \"MS-108ZR\",\n        vendor: \"Moes\",\n        description: \"Zigbee + RF curtain switch module\",\n        ota: true,\n        meta: {coverInverted: true},\n        fromZigbee: [fz.tuya_cover_options, fz.cover_position_tilt],\n        toZigbee: [tz.cover_state, tz.moes_cover_calibration, tz.cover_position_tilt, tz.tuya_cover_reversal],\n        exposes: [\n            e.cover_position(),\n            e.numeric(\"calibration_time\", ea.ALL).withValueMin(0).withValueMax(500).withUnit(\"s\"),\n            e.enum(\"moving\", ea.STATE, [\"UP\", \"STOP\", \"DOWN\"]),\n            e.binary(\"motor_reversal\", ea.ALL, \"ON\", \"OFF\"),\n        ],\n    },\n    {\n        zigbeeModel: [\"qnazj70\", \"kjintbl\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_oisqyl4o\", \"_TZ3000_uim07oem\", \"_TZE200_js3mgbjb\", \"_TZE200_7deq70b8\", \"_TZE204_ptaqh9tk\"]),\n        model: \"TS0601_switch\",\n        vendor: \"Tuya\",\n        description: \"1, 2, 3 or 4 gang switch\",\n        exposes: [\n            e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l3\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l4\").setAccess(\"state\", ea.STATE_SET),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_switch],\n        toZigbee: [legacy.toZigbee.tuya_switch_state],\n        meta: {multiEndpoint: true},\n        whiteLabel: [\n            {vendor: \"Norklmes\", model: \"MKS-CM-W5\"},\n            {vendor: \"Somgoms\", model: \"ZSQB-SMB-ZB\"},\n            {vendor: \"Moes\", model: \"WS-EUB1-ZG\"},\n            {vendor: \"AVATTO\", model: \"ZGB-WS-EU\"},\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            if (device.getEndpoint(2)) await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            if (device.getEndpoint(3)) await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            if (device.getEndpoint(4)) await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        endpoint: (device) => {\n            // Endpoint selection is made in tuya_switch_state\n            return {l1: 1, l2: 1, l3: 1, l4: 1};\n        },\n    },\n    {\n        zigbeeModel: [\"TS0301\"],\n        model: \"TS0301\",\n        vendor: \"Tuya\",\n        description: \"Cover\",\n        extend: [m.battery(), m.windowCovering({controls: [\"lift\"]})],\n        whiteLabel: [tuya.whitelabel(\"Yookee\", \"D10110_1\", \"Smart blind\", [\"_TZE200_9caxna4s\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_aqnazj70\",\n            \"_TZE200_di3tfv5b\",\n            \"_TZE200_mexisfik\",\n            \"_TZE204_mexisfik\",\n            \"_TZE204_6wi2mope\",\n            \"_TZE200_6wi2mope\",\n            \"_TZE204_iik0pquw\",\n            \"_TZE204_aagrxlbd\",\n            \"_TZE204_f5efvtbv\",\n            \"_TZE284_f5efvtbv\",\n            \"_TZE204_lbhh5o6z\",\n        ]),\n        model: \"TS0601_switch_4_gang_1\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch\",\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n        ],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [\n            tuya.whitelabel(\"ZYXH\", \"TY-04Z\", \"4 gang switch\", [\"_TZE204_iik0pquw\"]),\n            {vendor: \"Norklmes\", model: \"MKS-CM-W5\"},\n            {vendor: \"Somgoms\", model: \"ZSQB-SMB-ZB\"},\n            {vendor: \"Moes\", model: \"WS-EUB1-ZG\"},\n            {vendor: \"AVATTO\", model: \"ZGB-WS-EU\"},\n            tuya.whitelabel(\"AVATTO\", \"WSMD-4\", \"4 gang switch\", [\"_TZE204_f5efvtbv\", \"_TZE284_f5efvtbv\"]),\n            tuya.whitelabel(\"AVATTO\", \"ZWSMD-4\", \"4 gang switch\", [\"_TZE204_lbhh5o6z\"]),\n            tuya.whitelabel(\"Tuya\", \"MG-ZG04W\", \"4 gang switch\", [\"_TZE204_mexisfik\"]),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n            ],\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1};\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_jwsjbxjs\", \"_TZE200_leaqthqq\"]),\n        model: \"TS0601_switch_5_gang\",\n        vendor: \"Tuya\",\n        description: \"5 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_mwvfvw8g\",\n            \"_TZE200_wnp4d4va\",\n            \"_TZE200_cduqh1l0\",\n            \"_TZE200_emxxanvi\",\n            \"_TZE204_g4au0afs\",\n            \"_TZE204_w1wwxoja\",\n            \"_TZE204_lmgrbuwf\",\n            \"_TZE284_tdhnhhiy\",\n            \"_TZE204_wskr3up8\",\n            \"_TZE204_gxbdnfrh\",\n        ]),\n        model: \"TS0601_switch_6_gang\",\n        vendor: \"Tuya\",\n        description: \"6 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Mercator Ikuü\", \"SSW06G\", \"6 Gang switch\", [\"_TZE200_wnp4d4va\"]),\n            tuya.whitelabel(\"Nova Digital\", \"NTZB-04-W-B\", \"4 gang switch with 2 gang socket 4x4\", [\"_TZE204_lmgrbuwf\"]),\n            tuya.whitelabel(\"Nova Digital\", \"SYZB-6W\", \"6 gang switch 4x4\", [\"_TZE284_tdhnhhiy\"]),\n            tuya.whitelabel(\"Nova Digital\", \"FZB-6\", \"6 gang switch 4x4\", [\"_TZE204_wskr3up8\"]),\n            tuya.whitelabel(\"Nova Digital\", \"SA-6\", \"Safira smart switch - 6 gang\", [\"_TZE204_gxbdnfrh\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_raz9qavg\"]),\n        model: \"KRC-103\",\n        vendor: \"Videosec\",\n        description: \"6 gang kinetic switch actuator\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true}), m.deviceEndpoints({endpoints: {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1}})],\n        exposes: [\n            e.switch().withEndpoint(\"l1\"),\n            e.switch().withEndpoint(\"l2\"),\n            e.switch().withEndpoint(\"l3\"),\n            e.switch().withEndpoint(\"l4\"),\n            e.switch().withEndpoint(\"l5\"),\n            e.switch().withEndpoint(\"l6\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [19, \"state_l1\", tuya.valueConverter.onOff],\n                [20, \"state_l2\", tuya.valueConverter.onOff],\n                [21, \"state_l3\", tuya.valueConverter.onOff],\n                [22, \"state_l4\", tuya.valueConverter.onOff],\n                [23, \"state_l5\", tuya.valueConverter.onOff],\n                [24, \"state_l6\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-302Z1\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ojtqawav\", \"_TZE204_gbagoilo\", \"_TZE200_ojtqawav\"]),\n        model: \"TS0601_switch_1_gang\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch\",\n        exposes: [e.switch().setAccess(\"state\", ea.STATE_SET)],\n        fromZigbee: [legacy.fromZigbee.tuya_switch],\n        toZigbee: [legacy.toZigbee.tuya_switch_state],\n        whiteLabel: [tuya.whitelabel(\"Shawader\", \"SMKG-1KNL-US/TZB-W\", \"1 gang switch\", [\"_TZE204_ojtqawav\"])],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_gbagoilo\"]),\n        model: \"MG-ZG01W\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch with power meter\",\n        exposes: [\n            tuya.exposes.switch(),\n            tuya.exposes.countdown(),\n            e.voltage(),\n            e.current(),\n            e.power(),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n        ],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [7, \"countdown\", tuya.valueConverter.countdown],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehavior],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n                [21, \"current\", tuya.valueConverter.divideBy1000],\n                [22, \"power\", tuya.valueConverter.divideBy10],\n                [23, \"voltage\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-302Z2\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_nkjintbl\",\n            \"_TZE200_ji1gn7rw\",\n            \"_TZE200_3t91nb6k\",\n            \"_TZE204_wvovwe9h\",\n            \"_TZE200_wvovwe9h\",\n            \"_TZE204_3t91nb6k\",\n        ]),\n        model: \"TS0601_switch_2_gang\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch\",\n        exposes: [e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET), e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET)],\n        fromZigbee: [legacy.fromZigbee.tuya_switch],\n        toZigbee: [legacy.toZigbee.tuya_switch_state],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            if (device.getEndpoint(2)) await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        endpoint: (device) => {\n            // Endpoint selection is made in tuya_switch_state\n            return {l1: 1, l2: 1};\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nh9m9emk\"]),\n        model: \"MG-ZG02W\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch\",\n        exposes: [e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET), e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET)],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n            ],\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 1};\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-302Z3\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_kyfqmmyl\", \"_TZE200_2hf7x9n3\", \"_TZE204_atpwqgml\", \"_TZE200_bynnczcb\", \"_TZE200_atpwqgml\"]),\n        model: \"TS0601_switch_3_gang\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch\",\n        whiteLabel: [\n            {\n                vendor: \"Nova Digital\",\n                model: \"WS-US-ZB\",\n                description: \"Interruptor touch Zigbee 3 Teclas\",\n            },\n        ],\n        exposes: [\n            e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l3\").setAccess(\"state\", ea.STATE_SET),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_switch],\n        toZigbee: [legacy.toZigbee.tuya_switch_state],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        endpoint: (device) => {\n            // Endpoint selection is made in tuya_switch_state\n            return {l1: 1, l2: 1, l3: 1};\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_go3tvswy\", \"_TZE204_2imwyigp\", \"_TZE200_2imwyigp\"]),\n        model: \"MG-ZG03W\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l3\").setAccess(\"state\", ea.STATE_SET),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n            ],\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1};\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0215A\", [\n            \"_TZ3000_4fsgukof\",\n            \"_TZ3000_wr2ucaj9\",\n            \"_TZ3000_zsh6uat3\",\n            \"_TZ3000_tj4pwzzm\",\n            \"_TZ3000_2izubafb\",\n            \"_TZ3000_pkfazisv\",\n            \"_TZ3000_0dumfk2z\",\n            \"_TZ3000_ssp0maqm\",\n            \"_TZ3000_p3fph1go\",\n            \"_TZ3000_9r5jaajv\",\n        ]),\n        model: \"TS0215A_sos\",\n        vendor: \"Tuya\",\n        description: \"SOS button\",\n        fromZigbee: [fz.command_emergency, fz.battery],\n        exposes: [e.battery(), e.battery_voltage(), e.action([\"emergency\"])],\n        toZigbee: [],\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"BT400B\", \"Zigbee Panic Button\", [\"_TZ3000_0dumfk2z\"]),\n            tuya.whitelabel(\"Woox\", \"R7052\", \"Smart SOS button\", [\"_TZ3000_ssp0maqm\"]),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\", \"genTime\", \"genBasic\", \"ssIasAce\", \"ssIasZone\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n            await reporting.batteryVoltage(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0215A\", [\n            \"_TZ3000_p6ju8myv\",\n            \"_TZ3000_0zrccfgx\",\n            \"_TZ3000_fsiepnrh\",\n            \"_TZ3000_ug1vtuzn\",\n            \"_TZ3000_eo3dttwe\",\n            \"_TZ3000_jwcixnrz\",\n        ]),\n        model: \"TS0215A_remote\",\n        vendor: \"Tuya\",\n        description: \"Security remote control\",\n        fromZigbee: [fz.command_arm, fz.command_emergency, fz.battery],\n        exposes: [e.battery(), e.action([\"disarm\", \"arm_day_zones\", \"arm_night_zones\", \"arm_all_zones\", \"exit_delay\", \"emergency\"])],\n        toZigbee: [],\n        whiteLabel: [\n            {vendor: \"Woox\", model: \"R7054\"},\n            {vendor: \"Nedis\", model: \"ZBRC10WT\"},\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\", \"genTime\", \"genBasic\", \"ssIasAce\", \"ssIasZone\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0503A\", [\"_TZ3000_obacbukl\"]),\n        model: \"TS0503A\",\n        vendor: \"Tuya\",\n        description: \"Led strip controller\",\n        extend: [tuya.modernExtend.tuyaLight({color: true})],\n    },\n    {\n        zigbeeModel: [\"TS0503A\"],\n        model: \"TYZS1L\",\n        vendor: \"Tuya\",\n        description: \"Led strip controller HSB\",\n        exposes: [e.light_colorhs()],\n        fromZigbee: [fz.on_off, fz.tuya_led_controller],\n        toZigbee: [tz.tuya_led_controller, tz.ignore_transition, tz.ignore_rate],\n    },\n    {\n        zigbeeModel: [\"TS0502A\"],\n        model: \"TS0502A\",\n        vendor: \"Tuya\",\n        description: \"Light controller\",\n        extend: [tuya.modernExtend.tuyaLight({colorTemp: {range: [153, 500]}})],\n        whiteLabel: [\n            tuya.whitelabel(\"Lidl\", \"HG06492B/HG08130B\", \"Livarno Home E14 candle CCT\", [\"_TZ3000_oborybow\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06492A/HG08130A\", \"Livarno Lux GU10 spot CCT\", [\"_TZ3000_el5kt5im\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06492C/HG08130C/HG09154C\", \"Livarno Lux E27 bulb CCT\", [\"_TZ3000_49qchf10\"]),\n            tuya.whitelabel(\"Lidl\", \"14147206L\", \"Livarno Lux ceiling light\", [\"_TZ3000_rylaozuc\", \"_TZ3000_5fkufhn1\"]),\n            tuya.whitelabel(\"Lidl\", \"14153905L\", \"Livarno Home LED floor lamp\", [\"_TZ3000_8uaoilu9\"]),\n        ],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 16,\n            });\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0503B\", [\"_TZB210_lmqquxus\"]),\n        zigbeeModel: [\"TS0502B\"],\n        model: \"TS0502B\",\n        vendor: \"Tuya\",\n        description: \"Light controller\",\n        whiteLabel: [\n            tuya.whitelabel(\"Mercator Ikuü\", \"SMI7040\", \"Ford Batten Light\", [\"_TZ3000_zw7wr5uo\"]),\n            {\n                vendor: \"Mercator Ikuü\",\n                model: \"SMD9300\",\n                description: \"Donovan Panel Light\",\n            },\n            tuya.whitelabel(\"Aldi\", \"F122SB62H22A4.5W\", \"LIGHTWAY smart home LED-lamp - filament\", [\"_TZ3000_g1glzzfk\"]),\n            tuya.whitelabel(\"MiBoxer\", \"FUT035Z+\", \"Dual white LED controller\", [\n                \"_TZ3210_frm6149r\",\n                \"_TZ3210_jtifm80b\",\n                \"_TZ3210_xwqng7ol\",\n                \"_TZB210_lmqquxus\",\n                \"_TZB210_ue01a0s2\",\n            ]),\n            tuya.whitelabel(\"MiBoxer\", \"E2-ZR\", \"2 in 1 LED controller\", [\"_TZB210_ayx58ft5\", \"_TZB210_eiwanbeb\"]),\n            tuya.whitelabel(\"MiBoxer\", \"PZ2\", \"2 in 1 LED controller\", [\"_TZB210_0bkzabht\"]),\n            tuya.whitelabel(\"Lidl\", \"14156408L\", \"Livarno Lux smart LED ceiling light\", [\"_TZ3210_c2iwpxf1\"]),\n            tuya.whitelabel(\"EcoDim\", \"ED-10032\", \"Zigbee LED filament lamp dimmable E27, bulb A60, Smokey 2000K-4000K\", [\"_TZ3210_09hzmirw\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaLight({\n                colorTemp: {range: [153, 500]},\n                configureReporting: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 16,\n            });\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n        },\n    },\n    {\n        zigbeeModel: [\"TS0504A\"],\n        model: \"TS0504A\",\n        vendor: \"Tuya\",\n        description: \"RGBW LED controller\",\n        extend: [\n            tuya.modernExtend.tuyaLight({\n                colorTemp: {range: undefined},\n                color: true,\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0505A\", [\"_TZ3000_sosdczdl\"]),\n        model: \"TS0505A_led\",\n        vendor: \"Tuya\",\n        description: \"RGB+CCT LED\",\n        toZigbee: [tz.on_off, tz.tuya_led_control],\n        fromZigbee: [fz.on_off, fz.tuya_led_controller, fz.brightness],\n        exposes: [e.light_brightness_colortemp_colorhs([153, 500]).removeFeature(\"color_temp_startup\")],\n    },\n    {\n        zigbeeModel: [\"TS0505A\"],\n        model: \"TS0505A\",\n        vendor: \"Tuya\",\n        description: \"RGB+CCT light controller\",\n        extend: [\n            tuya.modernExtend.tuyaLight({\n                colorTemp: {range: undefined},\n                color: true,\n            }),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"Lidl\", \"HG06106B\", \"Livarno Lux E14 candle RGB\", [\"_TZ3000_odygigth\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06106A\", \"Livarno Lux GU10 spot RGB\", [\"_TZ3000_kdpxju99\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06106C\", \"Livarno Lux E27 bulb RGB\", [\"_TZ3000_dbou1ap4\"]),\n            tuya.whitelabel(\"Lidl\", \"14148906L\", \"Livarno Lux mood light RGB+CCT\", [\"_TZ3000_9cpuaca6\"]),\n            tuya.whitelabel(\"Lidl\", \"14149505L/14149506L_1\", \"Livarno Lux light bar RGB+CCT (black/white)\", [\"_TZ3000_gek6snaj\"]),\n            tuya.whitelabel(\"Mycket\", \"MS-SP-LE27WRGB\", \"E27 RGBW bulb\", [\"_TZ3000_evag0pvn\"]),\n            tuya.whitelabel(\"Lidl\", \"HG06104A\", \"Livarno Home RGB+CCT LED light strip 2m\", [\"_TZ3000_riwp3k79\", \"_TZ3000_riwp3k79\"]),\n        ],\n        configure: (device, coordinatorEndpoint) => {\n            device.getEndpoint(1).saveClusterAttributeKeyValue(\"lightingColorCtrl\", {\n                colorCapabilities: 29,\n            });\n        },\n    },\n    {\n        zigbeeModel: [\"TS0201\", \"SNTZ003\", \"TY0201\"],\n        model: \"TS0201\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor with display\",\n        fromZigbee: [fzLocal.TS0201_battery, fz.temperature, fzLocal.TS0201_humidity],\n        toZigbee: [],\n        exposes: [e.battery(), e.temperature(), e.humidity(), e.battery_voltage()],\n        configure: tuya.configureMagicPacket,\n        ota: true,\n        whiteLabel: [\n            {vendor: \"BlitzWolf\", model: \"BW-IS4\"},\n            tuya.whitelabel(\"Tuya\", \"TS0201_1\", \"Zigbee 3.0 temperature humidity sensor with display\", [\"_TZ3210_alxkwn0h\"]),\n            tuya.whitelabel(\"Tuya\", \"ZTH01/ZTH02\", \"Temperature and humidity sensor\", [\"_TZ3000_0s1izerx\"]),\n            tuya.whitelabel(\"Tuya\", \"ZY-ZTH02\", \"Temperature and humidity sensor\", [\"_TZ3000_v1w2k9dd\", \"_TZ3000_rdhukkmi\"]),\n            tuya.whitelabel(\"SEDEA\", \"eTH730\", \"Temperature and humidity sensor\", [\"_TZ3000_lqmvrwa2\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-S01-TH\", \"Temperature and humidity sensor\", [\"_TZ3000_f2bw0b6k\"]),\n            tuya.whitelabel(\"Danfoss\", \"014G2480\", \"Temperature and humidity sensor\", [\"_TZ3000_mxzo5rhf\"]),\n            tuya.whitelabel(\"Tuya\", \"HS09\", \"Hanging temperature humidity sensor\", [\"_TZ3000_1twfmkcc\"]),\n            tuya.whitelabel(\"Nedis\", \"ZBSC10WT\", \"Temperature and humidity sensor\", [\"_TZ3000_fie1dpkm\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0201\", [\n            \"_TZ3000_bguser20\",\n            \"_TZ3000_yd2e749y\",\n            \"_TZ3000_6uzkisv2\",\n            \"_TZ3000_xr3htd96\",\n            \"_TZ3000_fllyghyj\",\n            \"_TZ3000_saiqcn0y\",\n            \"_TZ3000_bjawzodf\",\n        ]),\n        model: \"WSD500A\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        fromZigbee: [fzLocal.TS0201_battery, fz.temperature, fz.humidity],\n        toZigbee: [],\n        exposes: [e.battery(), e.temperature(), e.humidity(), e.battery_voltage()],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"TH02Z\", \"Temperature and humidity sensor\", [\"_TZ3000_fllyghyj\", \"_TZ3000_saiqcn0y\"])],\n        meta: {\n            battery: {\n                // These sensors do send a Battery Percentage Remaining (0x0021)\n                // value, but is usually incorrect. For example, a coin battery tested\n                // with a load tester may show 80%, but report 2.5V / 1%. This voltage\n                // calculation matches what ZHA does by default.\n                // https://github.com/Koenkk/zigbee2mqtt/discussions/17337\n                // https://github.com/zigpy/zha-device-handlers/blob/c6ed94a52a469e72b32ece2a92d528060c7fd034/zhaquirks/__init__.py#L195-L228\n                voltageToPercentage: \"3V_1500_2800\",\n            },\n        },\n    },\n    {\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0201\", [\"_TZ3000_dowj6gyi\", \"_TZ3000_8ybe88nf\", \"_TZ3000_akqdg6g7\"]),\n            {manufacturerName: \"_TZ3000_zl1kmjqx\"},\n        ],\n        model: \"IH-K009\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        fromZigbee: [fzLocal.TS0201_battery, fz.temperature, fz.humidity],\n        extend: [m.battery()],\n        exposes: [e.temperature(), e.humidity(), e.battery_voltage()],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"RSH-HS06_1\", \"Temperature & humidity sensor\", [\"_TZ3000_zl1kmjqx\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"SM0201\", [\"_TYZB01_cbiezpds\", \"_TYZB01_zqvwka4k\"]),\n        model: \"SM0201\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor with LED screen\",\n        fromZigbee: [fz.battery, fz.temperature, fz.humidity],\n        toZigbee: [],\n        exposes: [e.battery(), e.temperature(), e.humidity(), e.battery_voltage()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_3zofvcaa\", \"_TZ3000_pvlvoxvt\", \"_TZ3000_lqb7lcq9\", \"_TZ3210_urjf5u18\", \"_TZ3210_8n4dn1ne\"]),\n        model: \"TS011F_2_gang_2_usb_wall\",\n        vendor: \"Tuya\",\n        description: \"2 gang 2 usb wall outlet\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                backlightModeLowMediumHigh: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n                childLock: true,\n            }),\n        ],\n        endpoint: () => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const endpointID of [1, 2, 3, 4]) {\n                const endpoint = device.getEndpoint(endpointID);\n                await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n                await reporting.onOff(endpoint);\n            }\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Nova Digital\", \"NTS2-W-B\", \"2 gang 2 usb wall outlet 4x2\", [\"_TZ3000_lqb7lcq9\"]),\n            tuya.whitelabel(\"AVATTO\", \"ZWOT12\", \"2 gang 2 usb wall outlet 4x2\", [\"_TZ3210_urjf5u18\"]),\n            tuya.whitelabel(\"Coibeu\", \"ZB414\", \"2 gang 2 usb wall outlet 4x2\", [\"_TZ3210_8n4dn1ne\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_bep7ccew\", \"_TZ3000_gazjngjl\"]),\n        model: \"TS011F_2_gang_power\",\n        vendor: \"Tuya\",\n        description: \"2 gang socket with power monitoring and USB\",\n        extend: [\n            tuyaMagicPacket(),\n            m.deviceEndpoints({\n                endpoints: {left: 1, right: 2},\n                multiEndpointSkip: [\"current\", \"voltage\", \"power\", \"energy\"],\n            }),\n            m.onOff({powerOnBehavior: false, endpointNames: [\"left\", \"right\"]}),\n            m.identify(),\n            m.electricityMeter(),\n        ],\n    },\n    {\n        zigbeeModel: [\"TS0041\"],\n        model: \"TS0041\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 1 button\",\n        whiteLabel: [\n            {vendor: \"Smart9\", model: \"S9TSZGB\"},\n            {vendor: \"Lonsonho\", model: \"TS0041\"},\n            {vendor: \"Benexmart\", model: \"ZM-sui1\"},\n            tuya.whitelabel(\"Tuya\", \"SH-SC07\", \"Button scene switch\", [\"_TZ3000_mrpevh8p\"]),\n            tuya.whitelabel(\"Tuya\", \"MINI-ZSB\", \"Smart button\", [\"_TZ3000_qgwcxxws\"]),\n            tuya.whitelabel(\"Nous\", \"LZ4\", \"Wireless switch button\", [\"_TZ3000_6km7djcm\"]),\n            tuya.whitelabel(\"Marmitek\", \"Push_LE\", \"Smart switch\", [\"_TZ3000_4upl1fcj\"]),\n        ],\n        exposes: [e.battery(), e.action([\"single\", \"double\", \"hold\"])],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        /*\n         * reporting.batteryPercentageRemaining removed as it was causing devices to fall of the network\n         * every 1 hour, with light flashing when it happened, extremely short battery life, 2 presses for\n         * action to register: https://github.com/Koenkk/zigbee2mqtt/issues/8072\n         * Initially wrapped in a try catch: https://github.com/Koenkk/zigbee2mqtt/issues/6313\n         */\n    },\n    {\n        zigbeeModel: [\"TS0041A\"],\n        model: \"TS0041A\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 1 button\",\n        whiteLabel: [\n            tuya.whitelabel(\"Cleverio\", \"SB100\", \"Wireless switch with 1 button\", [\"_TYZB01_4qw4rl1u\"]),\n            tuya.whitelabel(\"Marmitek\", \"Push_ME\", \"Wireless switch with 1 button\", [\"_TYZB01_1xktopx6\"]),\n        ],\n        exposes: [e.battery(), e.battery_voltage(), e.action([\"single\", \"double\", \"hold\"])],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        /*\n         * reporting.batteryPercentageRemaining removed as it was causing devices to fall of the network\n         * every 1 hour, with light flashing when it happened, extremely short battery life, 2 presses for\n         * action to register: https://github.com/Koenkk/zigbee2mqtt/issues/8072\n         * Initially wrapped in a try catch: https://github.com/Koenkk/zigbee2mqtt/issues/6313\n         */\n    },\n    {\n        zigbeeModel: [\"TS0042\"],\n        model: \"TS0042\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 2 buttons\",\n        whiteLabel: [\n            {vendor: \"Smart9\", model: \"S9TSZGB\"},\n            {vendor: \"Lonsonho\", model: \"TS0042\"},\n            {vendor: \"ClickSmart+\", model: \"CSPGM2075PW\"},\n            tuya.whitelabel(\"Marmitek\", \"Push_LO\", \"Smart switch\", [\"_TZ3000_dfgbtub0\"]),\n        ],\n        exposes: [e.battery(), e.action([\"1_single\", \"1_double\", \"1_hold\", \"2_single\", \"2_double\", \"2_hold\"])],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        /*\n         * reporting.batteryPercentageRemaining removed as it was causing devices to fall of the network\n         * every 1 hour, with light flashing when it happened, extremely short battery life, 2 presses for\n         * action to register: https://github.com/Koenkk/zigbee2mqtt/issues/8072\n         * Initially wrapped in a try catch: https://github.com/Koenkk/zigbee2mqtt/issues/6313\n         */\n    },\n    {\n        zigbeeModel: [\"TS0043\"],\n        model: \"TS0043\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 3 buttons\",\n        whiteLabel: [\n            {vendor: \"Smart9\", model: \"S9TSZGB\"},\n            {vendor: \"Lonsonho\", model: \"TS0043\"},\n            {vendor: \"LoraTap\", model: \"SS600ZB\"},\n        ],\n        exposes: [e.battery(), e.action([\"1_single\", \"1_double\", \"1_hold\", \"2_single\", \"2_double\", \"2_hold\", \"3_single\", \"3_double\", \"3_hold\"])],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        /*\n         * reporting.batteryPercentageRemaining removed as it was causing devices to fall of the network\n         * every 1 hour, with light flashing when it happened, extremely short battery life, 2 presses for\n         * action to register: https://github.com/Koenkk/zigbee2mqtt/issues/8072\n         * Initially wrapped in a try catch: https://github.com/Koenkk/zigbee2mqtt/issues/6313\n         */\n    },\n    {\n        zigbeeModel: [\"TS0044\"],\n        model: \"TS0044\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 4 buttons\",\n        whiteLabel: [\n            {vendor: \"Lonsonho\", model: \"TS0044\"},\n            {vendor: \"Haozee\", model: \"ESW-OZAA-EU\"},\n            {vendor: \"Moes\", model: \"ZT-SY-EU-G-4S-WH-MS\"},\n            {vendor: \"Nedis\", model: \"ZBWS40WT\"},\n            tuya.whitelabel(\"Moes\", \"ZT-SR-EU4\", \"Star Ring 4 Gang Scene Switch\", [\"_TZ3000_a4xycprs\"]),\n            tuya.whitelabel(\"Tuya\", \"TS0044_1\", \"Zigbee 4 button remote - 12 scene\", [\"_TZ3000_dziaict4\", \"_TZ3000_mh9px7cq\", \"_TZ3000_j61x9rxn\"]),\n            tuya.whitelabel(\"Tuya\", \"TM-YKQ004\", \"Zigbee 4 button remote - 12 scene\", [\"_TZ3000_u3nv1jwk\"]),\n            tuya.whitelabel(\"HOBEIAN\", \"ZG-101ZS\", \"Star Ring 4 Gang Scene Switch\", [\"_TZ3000_bgtzm4ny\"]),\n            tuya.whitelabel(\"Moes\", \"XH-SY-04Z\", \"4 button portable remote control\", [\"_TZ3000_kfu8zapd\"]),\n            tuya.whitelabel(\"LoraTap\", \"SS6400ZB\", \"4 button portable remote control\", [\"_TZ3000_ee8nrt2l\"]),\n        ],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        exposes: [\n            e.battery(),\n            e.action([\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n            ]),\n        ],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        /*\n         * reporting.batteryPercentageRemaining removed as it was causing devices to fall of the network\n         * every 1 hour, with light flashing when it happened, extremely short battery life, 2 presses for\n         * action to register: https://github.com/Koenkk/zigbee2mqtt/issues/8072\n         * Initially wrapped in a try catch: https://github.com/Koenkk/zigbee2mqtt/issues/6313\n         */\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS004F\", [\n            \"_TZ3000_nuombroo\",\n            \"_TZ3000_xabckq1v\",\n            \"_TZ3000_czuyt8lz\",\n            \"_TZ3000_0ht8dnxj\",\n            \"_TZ3000_b3mgfu0d\",\n            \"_TZ3000_11pg3ima\",\n            \"_TZ3000_et7afzxz\",\n        ]),\n        model: \"TS004F\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 4 buttons\",\n        exposes: [\n            e.battery(),\n            e\n                .enum(\"operation_mode\", ea.ALL, [\"command\", \"event\"])\n                .withDescription('Operation mode: \"command\" - for group control, \"event\" - for clicks'),\n            e.action([\n                \"on\",\n                \"off\",\n                \"brightness_step_up\",\n                \"brightness_step_down\",\n                \"brightness_move_up\",\n                \"brightness_move_down\",\n                \"color_temperature_step_up\",\n                \"color_temperature_step_down\",\n                \"brightness_stop\",\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n            ]),\n        ],\n        fromZigbee: [\n            fz.battery,\n            tuya.fz.on_off_action,\n            fz.tuya_operation_mode,\n            fz.command_on,\n            fz.command_off,\n            fz.command_step,\n            fz.command_move,\n            fz.command_stop,\n            fz.command_step_color_temperature,\n        ],\n        whiteLabel: [tuya.whitelabel(\"Zemismart\", \"ZMR4\", \"Wireless switch with 4 buttons\", [\"_TZ3000_11pg3ima\", \"_TZ3000_et7afzxz\"])],\n        toZigbee: [tz.tuya_operation_mode],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await endpoint.read(\"genBasic\", [0x0004, 0x000, 0x0001, 0x0005, 0x0007, 0xfffe]);\n            await endpoint.write(\"genOnOff\", {tuyaOperationMode: 1});\n            await endpoint.read(\"genOnOff\", [\"tuyaOperationMode\"]);\n            try {\n                await endpoint.read(0xe001, [0xd011]);\n            } catch {\n                /* do nothing */\n            }\n            await endpoint.read(\"genPowerCfg\", [\"batteryVoltage\", \"batteryPercentageRemaining\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            for (const ep of [1, 2, 3, 4]) {\n                // Not all variants have all endpoints\n                // https://github.com/Koenkk/zigbee2mqtt/issues/15730#issuecomment-1364498358\n                if (device.getEndpoint(ep)) {\n                    await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n                }\n            }\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS004F\", [\"_TZ3000_r0o2dahu\"]),\n        model: \"TS004F_6_button\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 6 buttons\",\n        exposes: [\n            e.battery(),\n            e\n                .enum(\"operation_mode\", ea.ALL, [\"command\", \"event\"])\n                .withDescription('Operation mode: \"command\" - for group control, \"event\" - for clicks'),\n            e.action([\n                \"on\",\n                \"off\",\n                \"brightness_step_up\",\n                \"brightness_step_down\",\n                \"brightness_move_up\",\n                \"brightness_move_down\",\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n                \"5_single\",\n                \"5_double\",\n                \"5_hold\",\n                \"6_single\",\n                \"6_double\",\n                \"6_hold\",\n            ]),\n        ],\n        fromZigbee: [fz.battery, tuya.fz.on_off_action, fz.tuya_operation_mode, fz.command_on, fz.command_off, fz.command_step, fz.command_move],\n        toZigbee: [tz.tuya_operation_mode],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await endpoint.read(\"genBasic\", [0x0004, 0x000, 0x0001, 0x0005, 0x0007, 0xfffe]);\n            await endpoint.write(\"genOnOff\", {tuyaOperationMode: 1});\n            await endpoint.read(\"genOnOff\", [\"tuyaOperationMode\"]);\n            try {\n                await endpoint.read(0xe001, [0xd011]);\n            } catch {\n                /* do nothing */\n            }\n            await endpoint.read(\"genPowerCfg\", [\"batteryVoltage\", \"batteryPercentageRemaining\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            for (const ep of [1, 2, 3, 4, 5, 6]) {\n                // Not all variants have all endpoints\n                // https://github.com/Koenkk/zigbee2mqtt/issues/15730#issuecomment-1364498358\n                if (device.getEndpoint(ep)) {\n                    await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n                }\n            }\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_dzuqwsyg\", \"_TZE204_dzuqwsyg\"]),\n        model: \"BAC-003\",\n        vendor: \"Tuya\",\n        description: \"FCU thermostat temperature controller\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        options: [\n            e\n                .enum(\"control_sequence_of_operation\", ea.SET, [\"cooling_only\", \"cooling_and_heating_4-pipes\"])\n                .withDescription(\"Operating environment of the thermostat\"),\n            e.binary(\"expose_device_state\", ea.SET, true, false).withDescription(\"Expose device power state as a separate property when enabled.\"),\n        ],\n        exposes: (device, options) => {\n            const system_modes = [\"off\", \"cool\", \"heat\", \"fan_only\"];\n\n            // Device can operate either in 2-pipe or 4-pipe configuration\n            // For 2-pipe configurations remove 'heat' mode\n            switch (options?.control_sequence_of_operation) {\n                case \"cooling_only\":\n                    system_modes.splice(2, 1);\n                    break;\n            }\n\n            const exposes = [\n                e\n                    .climate()\n                    .withLocalTemperature(ea.STATE)\n                    .withSystemMode(system_modes, ea.STATE_SET)\n                    .withFanMode([\"low\", \"medium\", \"high\", \"auto\"], ea.STATE_SET)\n                    .withSetpoint(\"current_heating_setpoint\", 5, 35, 1, ea.STATE_SET)\n                    .withPreset([\"auto\", \"manual\"])\n                    .withLocalTemperatureCalibration(-3, 3, 1, ea.STATE_SET),\n                e.child_lock(),\n                e\n                    .composite(\"schedule\", \"schedule\", ea.STATE_SET)\n                    .withFeature(e.text(\"weekdays\", ea.SET).withDescription('Schedule (1-5), 4 periods in format \"hh:mm/tt\".'))\n                    .withFeature(e.text(\"saturday\", ea.SET).withDescription('Schedule (6), 4 periods in format \"hh:mm/tt\".'))\n                    .withFeature(e.text(\"sunday\", ea.SET).withDescription('Schedule (7), 4 periods in format \"hh:mm/tt\".'))\n                    .withDescription('Auto-mode schedule, 4 periods each per category. Example: \"06:00/20 11:30/21 13:30/22 17:30/23.5\".'),\n                e.max_temperature().withValueMin(35).withValueMax(45).withPreset(\"default\", 35, \"Default value\"),\n                e\n                    .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                    .withUnit(\"°C\")\n                    .withValueMax(5)\n                    .withValueMin(1)\n                    .withValueStep(1)\n                    .withPreset(\"default\", 1, \"Default value\")\n                    .withDescription(\"The delta between local_temperature and current_heating_setpoint to trigger activity\"),\n            ];\n\n            if (options?.expose_device_state === true) {\n                exposes.unshift(e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON or OFF\"));\n            }\n\n            return exposes;\n        },\n        meta: {\n            publishDuplicateTransaction: true,\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    {\n                        to: async (v: string, meta: Tz.Meta) => {\n                            if (meta.options?.expose_device_state === true) {\n                                await tuya.sendDataPointBool(\n                                    meta.device.endpoints[0],\n                                    1,\n                                    utils.getFromLookup(v, {on: true, off: false}),\n                                    \"dataRequest\",\n                                    1,\n                                );\n                            }\n                        },\n                        from: (v: boolean, meta: Fz.Meta, options?: KeyValue) => {\n                            meta.state.system_mode = v === true ? (meta.state.system_mode_device ?? \"cool\") : \"off\";\n\n                            if (options?.expose_device_state === true) {\n                                return v === true ? \"ON\" : \"OFF\";\n                            }\n\n                            delete meta.state.state;\n                        },\n                    },\n                ],\n                [\n                    2,\n                    \"system_mode\",\n                    {\n                        // Extend system_mode to support 'off' in addition to 'cool', 'heat' and 'fan_only'\n                        to: async (v: string, meta: Tz.Meta) => {\n                            const entity = meta.device.endpoints[0];\n                            // Power State\n                            await tuya.sendDataPointBool(entity, 1, v !== \"off\", \"dataRequest\", 1);\n                            switch (v) {\n                                case \"cool\":\n                                    await tuya.sendDataPointEnum(entity, 2, 0, \"dataRequest\", 1);\n                                    break;\n                                case \"heat\":\n                                    await tuya.sendDataPointEnum(entity, 2, 1, \"dataRequest\", 1);\n                                    break;\n                                case \"fan_only\":\n                                    await tuya.sendDataPointEnum(entity, 2, 2, \"dataRequest\", 1);\n                                    break;\n                            }\n                        },\n                        from: (v: number, meta: Fz.Meta) => {\n                            const modes = [\"cool\", \"heat\", \"fan_only\"];\n                            meta.state.system_mode_device = modes[v];\n                            return modes[v];\n                        },\n                    },\n                ],\n                [4, \"preset\", tuya.valueConverterBasic.lookup({manual: true, auto: false})],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.raw],\n                [19, \"max_temperature\", tuya.valueConverter.raw],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [26, \"deadzone_temperature\", tuya.valueConverter.raw],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.localTemperatureCalibration],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        auto: tuya.enum(3),\n                    }),\n                ],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [\n                    101,\n                    \"schedule\",\n                    {\n                        to: (v: {weekdays: string; saturday: string; sunday: string}, meta: Tz.Meta) => {\n                            const periods = (value: string) => {\n                                const regex = /((?<h>[01][0-9]|2[0-3]):(?<m>[0-5][0-9])\\/(?<t>[0-3][0-9](\\.[0,5]|)))/gm;\n                                const matches = [...value.matchAll(regex)];\n\n                                if (matches.length === 4) {\n                                    return matches.reduce((arr, m) => {\n                                        arr.push(Number.parseInt(m.groups.h, 10));\n                                        arr.push(Number.parseInt(m.groups.m, 10));\n                                        arr.push(Number.parseFloat(m.groups.t) * 2);\n                                        return arr;\n                                    }, []);\n                                }\n\n                                logger.warning(\"Ignoring invalid or incomplete schedule\", NS);\n                            };\n\n                            const schedule = [...periods(v.weekdays), ...periods(v.saturday), ...periods(v.sunday)];\n\n                            return schedule;\n                        },\n                        from: (v: number[], meta: Fz.Meta) => {\n                            const format = (data: number[]) => {\n                                return data.reduce((a, v, i) => {\n                                    switch (i % 3) {\n                                        // Hour\n                                        case 0:\n                                            return `${a}${i > 0 ? \" \" : \"\"}${v.toString().padStart(2, \"0\")}`;\n                                        // Minute\n                                        case 1:\n                                            return `${a}:${v.toString().padStart(2, \"0\")}`;\n                                        // Setpoint\n                                        case 2:\n                                            return `${a}/${v / 2}`;\n                                        default:\n                                            throw new Error(`Unexpected index ${i} in schedule data`);\n                                    }\n                                }, \"\");\n                            };\n\n                            return {\n                                weekdays: format(v.slice(0, 12)),\n                                saturday: format(v.slice(1 * 12, 2 * 12)),\n                                sunday: format(v.slice(2 * 12, 3 * 12)),\n                            };\n                        },\n                    },\n                ],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"BAC-002-ALZB\", \"FCU thermostat temperature controller\", [\"_TZE200_dzuqwsyg\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_qq9mpfhw\"]),\n        model: \"TS0601_water_sensor\",\n        vendor: \"Tuya\",\n        description: \"Water leak sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_water_leak],\n        exposes: [e.water_leak()],\n        toZigbee: [],\n        whiteLabel: [{vendor: \"NEO\", model: \"NAS-WS02B0\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_jthf7vb6\"]),\n        model: \"WLS-100z\",\n        vendor: \"Tuya\",\n        description: \"Water leak sensor\",\n        fromZigbee: [fz.ignore_tuya_raw, legacy.fromZigbee.wls100z_water_leak],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\", bindBasicOnConfigure: true})],\n        exposes: [e.battery(), e.water_leak()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\n            \"_TZ3000_xkap8wtb\",\n            \"_TZ3000_qnejhcsu\",\n            \"_TZ3000_x3ewpzyr\",\n            \"_TZ3000_mkhkxx1p\",\n            \"_TZ3000_tgddllx4\",\n            \"_TZ3000_kqvb5akv\",\n            \"_TZ3000_g92baclx\",\n            \"_TZ3000_qlai3277\",\n            \"_TZ3000_qaabwu5c\",\n            \"_TZ3000_ikuxinvo\",\n            \"_TZ3000_hzlsaltw\",\n            \"_TZ3000_jsfzkftc\",\n            \"_TZ3000_0ghwhypc\",\n            \"_TZ3000_1adss9de\",\n        ]),\n        model: \"TS0001_power\",\n        description: \"Switch with power monitoring\",\n        vendor: \"Tuya\",\n        ota: true,\n        fromZigbee: [fz.on_off, fz.electrical_measurement, fz.metering, tuya.fz.power_outage_memory, tuya.fz.switch_type],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tuya.tz.switch_type],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            /*\n            https://github.com/Koenkk/zigbee2mqtt/issues/27090\n            INVALID_DATA_TYPE error for _TZ3000_xkap8wtb, appVersion:162 softwareBuildID: 0122052017\n            */\n            if (\"_TZ3000_xkap8wtb\" === device.manufacturerName && [162, 100].includes(device.applicationVersion)) {\n                logger.warning(\n                    \"Detected TS0001 _TZ3000_xkap8wtb switch with appVersion 100 or 162. Skip reporting for haElectricalMeasurement and seMeteringreporting in favor of polling.\",\n                    NS,\n                );\n                await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            } else {\n                await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n                await reporting.rmsVoltage(endpoint, {change: 5});\n                await reporting.rmsCurrent(endpoint, {change: 50});\n                await reporting.activePower(endpoint, {change: 10});\n                await reporting.currentSummDelivered(endpoint);\n            }\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        exposes: [\n            e.switch(),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            tuya.exposes.switchType(),\n            e.enum(\"power_outage_memory\", ea.ALL, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"Nous\", \"B2Z\", \"1 gang switch with power monitoring\", [\"_TZ3000_qlai3277\"]),\n            tuya.whitelabel(\"Colorock\", \"CR-MNZ1\", \"1 gang switch 30A with power monitoring\", [\"_TZ3000_tgddllx4\"]),\n            tuya.whitelabel(\"Nous\", \"L6Z\", \"Switch with power monitoring\", [\"_TZ3000_qaabwu5c\", \"_TZ3000_1adss9de\"]),\n            tuya.whitelabel(\"Tuya\", \"XSH01A\", \"1 gang switch\", [\"_TZ3000_x3ewpzyr\"]),\n        ],\n        extend: [\n            tuya.modernExtend.electricityMeasurementPoll({\n                electricalMeasurement: (device) =>\n                    device.manufacturerName === \"_TZ3000_x3ewpzyr\" ||\n                    (device.manufacturerName === \"_TZ3000_xkap8wtb\" && [162, 100].includes(device.applicationVersion)),\n                metering: (device) =>\n                    device.manufacturerName === \"_TZ3000_x3ewpzyr\" ||\n                    (device.manufacturerName === \"_TZ3000_xkap8wtb\" && [162, 100].includes(device.applicationVersion)),\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0002\", [\"_TZ3000_aaifmpuq\", \"_TZ3000_irrmjcgi\", \"_TZ3000_huvxrx4i\"]),\n        model: \"TS0002_power\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch with power monitoring\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                endpoints: [\"l1\", \"l2\"],\n                electricalMeasurements: true,\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {\n            multiEndpoint: true,\n            multiEndpointSkip: [\"energy\", \"current\", \"voltage\", \"power\"],\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await endpoint.read(\"genBasic\", [\"manufacturerName\", \"zclVersion\", \"appVersion\", \"modelId\", \"powerSource\", 0xfffe]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            await reporting.rmsVoltage(endpoint, {change: 5});\n            await reporting.rmsCurrent(endpoint, {change: 50});\n            await reporting.activePower(endpoint, {change: 10});\n            await reporting.currentSummDelivered(endpoint);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"XSH01B\", \"2 gang switch module with power monitoring\", [\"_TZ3000_irrmjcgi\"]),\n            tuya.whitelabel(\"Nous\", \"B3Z\", \"2 gang switch module with power monitoring\", [\"_TZ3000_aaifmpuq\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3000_xkap8wtb\"]),\n        model: \"TS000F_power\",\n        description: \"Switch with power monitoring\",\n        vendor: \"Tuya\",\n        fromZigbee: [fz.on_off, fz.electrical_measurement, fz.metering, tuya.fz.power_on_behavior_1, tuya.fz.switch_type],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tuya.tz.switch_type],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            await reporting.rmsVoltage(endpoint, {change: 5});\n            await reporting.rmsCurrent(endpoint, {change: 50});\n            await reporting.currentSummDelivered(endpoint);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        whiteLabel: [{vendor: \"Aubess\", model: \"WHD02\"}],\n        exposes: [e.switch(), e.power(), e.current(), e.voltage(), e.energy(), e.power_on_behavior(), tuya.exposes.switchType()],\n    },\n    {\n        zigbeeModel: [\"TS0001\"],\n        model: \"TS0001\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        whiteLabel: [\n            {\n                vendor: \"CR Smart Home\",\n                model: \"TS0001\",\n                description: \"Valve control\",\n            },\n            {vendor: \"Lonsonho\", model: \"X701\"},\n            {vendor: \"Bandi\", model: \"BDS03G1\"},\n            tuya.whitelabel(\"Nous\", \"B1Z\", \"1 gang switch\", [\"_TZ3000_ctftgjwb\"]),\n            tuya.whitelabel(\"Tuya\", \"XMSJ\", \"Zigbee USB power switch\", [\"_TZ3000_8n7lqbm0\"]),\n            tuya.whitelabel(\"Tuya\", \"ZG-001\", \"Smart home relay module\", [\"_TZ3000_g8n1n7lg\"]),\n            tuya.whitelabel(\"Nova Digital\", \"SA-1\", \"Safira smart light switch - 1 gang\", [\"_TZ3000_udl7uyd2\"]),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_myaaknbq\", \"_TZ3000_cpozgbrx\"]),\n        model: \"TS0001_switch_module_1\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch module\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                indicatorMode: true,\n                backlightModeOffOn: true,\n                onOffCountdown: true,\n            }),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"PSMART\", \"T441\", \"1 gang switch module\", [\"_TZ3000_myaaknbq\"]),\n            tuya.whitelabel(\"PSMART\", \"T461\", \"1 gang switch module\", [\"_TZ3000_cpozgbrx\"]),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_gbshwgag\"]),\n        model: \"TS0001_switch_module_2\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch with backlight\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorMode: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n\n    ////////////////////////\n    // TS0002 DEFINITIONS //\n    ////////////////////////\n\n    {\n        // TS0002 model with only on/off capability\n        fingerprint: tuya.fingerprint(\"TS0002\", [\n            \"_TZ3000_01gpyda5\",\n            \"_TZ3000_bvrlqyj7\",\n            \"_TZ3000_7ed9cqgi\",\n            \"_TZ3000_zmy4lslw\",\n            \"_TZ3000_ruxexjfz\",\n            \"_TZ3000_4xfqlgqo\",\n            \"_TZ3000_hojntt34\",\n            \"_TZ3000_eei0ubpy\",\n            \"_TZ3000_qaa59zqd\",\n            \"_TZ3000_lmlsduws\",\n            \"_TZ3000_lugaswf8\",\n            \"_TZ3000_nuenzetq\",\n            \"_TZ3000_ruldv5dt\",\n            \"_TZ3000_fbjdkph9\",\n            \"_TZ3000_zbfya6h0\",\n            \"_TZ3000_tas0zemd\",\n        ]),\n        model: \"TS0002_basic\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch module\",\n        whiteLabel: [\n            {vendor: \"OXT\", model: \"SWTZ22\"},\n            tuya.whitelabel(\"Moes\", \"ZM-104B-M\", \"2 gang switch\", [\"_TZ3000_qaa59zqd\"]),\n            tuya.whitelabel(\"pcblab.io\", \"RR620ZB\", \"2 gang Zigbee switch module\", [\"_TZ3000_4xfqlgqo\"]),\n            tuya.whitelabel(\"Nous\", \"L13Z\", \"2 gang switch\", [\"_TZ3000_ruxexjfz\", \"_TZ3000_hojntt34\"]),\n            tuya.whitelabel(\"Tuya\", \"ZG-2002-RF\", \"Three mode Zigbee Switch\", [\"_TZ3000_lugaswf8\", \"_TZ3000_nuenzetq\", \"_TZ3000_ruldv5dt\"]),\n            tuya.whitelabel(\"Mercator Ikuü\", \"SSW02\", \"2 gang switch\", [\"_TZ3000_fbjdkph9\"]),\n            tuya.whitelabel(\"Aubess\", \"TMZ02\", \"2 gang switch\", [\"_TZ3000_lmlsduws\"]),\n            tuya.whitelabel(\"RSH\", \"TS0002_basic_2\", \"2 gang switch\", [\"_TZ3000_zbfya6h0\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        // TS0002 model with limited functionality available\n        fingerprint: tuya.fingerprint(\"TS0002\", [\n            \"_TZ3000_fisb3ajo\",\n            \"_TZ3000_5gey1ohx\",\n            \"_TZ3000_mtnpt6ws\",\n            \"_TZ3000_mufwv0ry\",\n            \"_TZ3000_54hjn4vs\",\n            \"_TZ3000_aa5t61rh\",\n            \"_TZ3000_in5qxhtt\",\n            \"_TZ3000_ogpla3lh\",\n            \"_TZ3000_i9w5mehz\",\n        ]),\n        model: \"TS0002_limited\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch module\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                onOffCountdown: true,\n                indicatorMode: true,\n                backlightModeOffOn: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"AVATTO\", \"ZWSM16-2-Zigbee\", \"2 gang switch module\", [\"_TZ3000_mtnpt6ws\"]),\n            tuya.whitelabel(\"PSMART\", \"T442\", \"2 gang switch module\", [\"_TZ3000_mufwv0ry\"]),\n            tuya.whitelabel(\"Lonsonho\", \"X702A\", \"2 gang switch with backlight\", [\"_TZ3000_54hjn4vs\", \"_TZ3000_aa5t61rh\"]),\n            tuya.whitelabel(\"Homeetec\", \"37022463-1\", \"2 Gang switch with backlight\", [\"_TZ3000_in5qxhtt\"]),\n            tuya.whitelabel(\"RoomsAI\", \"37022463-2\", \"2 Gang switch with backlight\", [\"_TZ3000_ogpla3lh\"]),\n        ],\n    },\n    {\n        // TS0002 2 gang switch module with all available features. This is the default for TS0002 devices.\n        model: \"TS0002\",\n        zigbeeModel: [\"TS0002\"],\n        vendor: \"Tuya\",\n        description: \"2-Gang switch with backlight, countdown and inching\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorMode: true,\n                onOffCountdown: true,\n                inchingSwitch: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n            tuya.clusters.addTuyaCommonPrivateCluster(),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Zemismart\", \"TB26-2\", \"2 Gang switch with backlight, countdown, inching\", [\"_TZ3000_ywubfuvt\"]),\n            {vendor: \"Zemismart\", model: \"ZM-CSW002-D_switch\"},\n            {vendor: \"Lonsonho\", model: \"X702\"},\n            {vendor: \"AVATTO\", model: \"ZTS02\"},\n            tuya.whitelabel(\"PSMART\", \"T462\", \"2 Gang switch with backlight, countdown, inching\", [\"_TZ3000_wnzoyohq\"]),\n            tuya.whitelabel(\"Nova Digital\", \"FZB-2\", \"2-Gang switch with backlight, countdown and inching\", [\"_TZ3000_5ksufhqi\"]),\n            tuya.whitelabel(\"iHseno\", \"_TZ3000_zxrfobzw\", \"2-gang touch switch\", [\"_TZ3000_zxrfobzw\"]),\n        ],\n    },\n\n    {\n        fingerprint: tuya.fingerprint(\"TS0002\", [\"_TZ3000_h1ipgkwn\"]),\n        model: \"_TZ3000_h1ipgkwn\",\n        description: \"2 channel USB switch\",\n        vendor: \"Tuya\",\n        extend: [m.deviceEndpoints({endpoints: {l1: 1, l2: 2}}), m.onOff({powerOnBehavior: true, endpointNames: [\"l1\", \"l2\"]})],\n    },\n\n    ////////////////////////\n    // TS0003 DEFINITIONS //\n    ////////////////////////\n\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\n            \"_TZ3000_rhkfbfcv\",\n            \"_TZ3000_empogkya\",\n            \"_TZ3000_lubfc1t5\",\n            \"_TZ3000_lsunm46z\",\n            \"_TZ3000_v4l4b0lp\",\n            \"_TZ3000_uilitwsy\",\n            \"_TZ3000_66fekqhh\",\n            \"_TZ3000_ok0ggpk7\",\n        ]),\n        model: \"TS0003_switch_3_gang_with_backlight\",\n        vendor: \"Tuya\",\n        description: \"3-Gang switch with backlight\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                indicatorMode: true,\n                backlightModeOffOn: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Lonsonho\", \"X703A\", \"3 Gang switch with backlight\", [\"_TZ3000_rhkfbfcv\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZM-L03E-Z\", \"3 gang switch with neutral\", [\"_TZ3000_empogkya\", \"_TZ3000_lsunm46z\", \"_TZ3000_uilitwsy\"]),\n            tuya.whitelabel(\"AVATTO\", \"ZWOT16-W2\", \"2 gang switch and 1 socket\", [\"_TZ3000_66fekqhh\"]),\n            tuya.whitelabel(\"Tuya\", \"M10Z\", \"2 gang switch with 20A power socket\", [\"_TZ3000_lubfc1t5\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_fawk5xjv\", \"_TZ3000_bvij6kod\"]),\n        model: \"NFZB-03\",\n        vendor: \"Nova Digital\",\n        description: \"3 gang switch with power-on behavior and indicator mode\",\n        extend: [\n            tuya.modernExtend.tuyaBase(),\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2, l3: 3}}),\n            tuya.modernExtend.tuyaOnOff({\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n                powerOutageMemory: true,\n                switchType: true,\n                indicatorMode: true,\n                backlightModeOffOn: true,\n                inchingSwitch: true,\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_aracgljk\"]),\n        model: \"SA-3\",\n        vendor: \"Nova Digital\",\n        description: \"Safira smart light switch - 3 gang\",\n        extend: [\n            tuya.modernExtend.tuyaBase(),\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2, l3: 3}}),\n            tuya.modernExtend.tuyaOnOff({\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n                powerOutageMemory: true,\n                switchType: true,\n                indicatorMode: true,\n                backlightModeOffOn: true,\n            }),\n        ],\n    },\n    {\n        zigbeeModel: [\"TS0003\"],\n        model: \"TS0003\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch\",\n        extend: [\n            m.deviceEndpoints({endpoints: {left: 1, center: 2, right: 3}}),\n            m.onOff({\n                endpointNames: [\"left\", \"center\", \"right\"],\n                powerOnBehavior: false,\n            }),\n        ],\n        whiteLabel: [\n            {vendor: \"BSEED\", model: \"TS0003\", description: \"Zigbee switch\"},\n            tuya.whitelabel(\"Tuya\", \"TS0003_1\", \"3 gang switch\", [\"_TZ3000_ouwfc1qj\"]),\n            tuya.whitelabel(\"Zemismart\", \"TB26-3\", \"3 gang switch\", [\"_TZ3000_eqsair32\"]),\n        ],\n        meta: {disableDefaultResponse: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_4o16jdca\", \"_TZ3000_odzoiovu\", \"_TZ3000_hbic3ka3\", \"_TZ3000_lvhy15ix\"]),\n        model: \"TS0003_switch_module_2\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch module\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                indicatorMode: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"AVATTO\", \"ZWSM16-3-Zigbee\", \"3 gang switch module\", [\"_TZ3000_hbic3ka3\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_pf7swkqp\"]),\n        model: \"TS0003_switch_module_3\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch module\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"RSH\", \"SB03-Zigbee\", \"3 gang switch module\", [\"_TZ3000_pf7swkqp\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_ju82pu2b\"]),\n        model: \"TW-03\",\n        vendor: \"Tuya\",\n        description: \"3-Gang switch\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_vsasbzkf\", \"_TZ3000_nnwehhst\"]),\n        model: \"TS0003_switch_module_1\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch module\",\n        whiteLabel: [{vendor: \"OXT\", model: \"SWTZ23\"}],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                backlightModeOffOn: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: [{modelID: \"TS0003\", manufacturerName: \"_TZ3000_mw1pqqqt\"}],\n        model: \"_TZ3000_mw1pqqqt\",\n        description: \"3 channel USB switch\",\n        vendor: \"Tuya\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: false,\n                indicatorMode: false,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\n            \"_TZ3000_tqlv4ug4\",\n            \"_TZ3000_gjrubzje\",\n            \"_TZ3000_tygpxwqa\",\n            \"_TZ3000_4rbqgcuv\",\n            \"_TZ3000_veu2v775\",\n            \"_TZ3000_prits6g4\",\n            \"_TZ3000_afgzktgb\",\n        ]),\n        model: \"TS0001_switch_module\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch module\",\n        whiteLabel: [\n            {vendor: \"OXT\", model: \"SWTZ21\"},\n            {vendor: \"Moes\", model: \"ZM-104-M\"},\n            tuya.whitelabel(\"AVATTO\", \"ZWSM16-1-Zigbee\", \"1 gang switch module\", [\"_TZ3000_4rbqgcuv\"]),\n        ],\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true, onOffCountdown: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_pgq7ormg\"]),\n        model: \"_TZ3000_pgq7ormg\",\n        vendor: \"iHseno\",\n        description: \"1 gang switch module\",\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true, onOffCountdown: true, indicatorMode: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0004\", [\"_TZ3000_ltt60asa\", \"_TZ3000_mmkbptmx\", \"_TZ3000_liygxtcq\"]),\n        model: \"TS0004_switch_module\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch module\",\n        whiteLabel: [{vendor: \"OXT\", model: \"SWTZ27\"}, tuya.whitelabel(\"RSH\", \"SB04-Zigbee\", \"4 gang switch\", [\"_TZ3000_liygxtcq\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        zigbeeModel: [\n            \"owvfni3\\u0000\",\n            \"owvfni3\",\n            \"u1rkty3\",\n            \"aabybja\", // Curtain motors\n            \"mcdj3aq\",\n            \"mcdj3aq\\u0000\", // Tubular motors\n        ],\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0601\", [\n                \"_TZE200_5zbp6j0u\",\n                \"_TZE200_nkoabg8w\",\n                \"_TZE200_xuzcvlku\",\n                \"_TZE200_4vobcgd3\",\n                \"_TZE200_nogaemzt\",\n                \"_TZE200_r0jdjrvi\",\n                \"_TZE200_pk0sfzvr\",\n                \"_TZE200_fdtjuw7u\",\n                \"_TZE200_zpzndjez\",\n                \"_TZE200_wmcdj3aq\",\n                \"_TZE200_cowvfni3\",\n                \"_TZE200_rddyvrci\",\n                \"_TZE200_nueqqe6k\",\n                \"_TZE200_bqcqqjpb\",\n                \"_TZE200_xaabybja\",\n                \"_TZE200_rmymn92d\",\n                \"_TZE200_feolm6rk\",\n                \"_TZE200_3i3exuay\",\n                \"_TZE200_tvrvdj6o\",\n                \"_TZE200_b2u1drdv\",\n                \"_TZE200_ol5jlkkr\",\n                \"_TZE204_guvc7pdy\",\n                \"_TZE200_zxxfv8wi\",\n                \"_TZE200_1fuxihti\",\n                \"_TZE204_1fuxihti\",\n                \"_TZE204_57hjqelq\",\n                \"_TZE200_hojryzzd\",\n                \"_TZE204_m1wl5fvq\",\n                \"_TZE200_en3wvcbx\",\n                \"_TZE200_fctwhugx\",\n                \"_TZE200_hsgrhjpf\",\n                \"_TZE200_g5wdnuow\",\n                \"_TZE200_5sbebbzs\",\n                \"_TZE200_udank5zs\",\n                \"_TZE204_dpqsvdbi\",\n                \"_TZE200_zuz7f94z\",\n                \"_TZE200_nv6nxo0c\",\n                \"_TZE200_3ylew7b4\",\n                \"_TZE200_llm0epxg\",\n                \"_TZE200_n1aauwb4\",\n                \"_TZE200_xu4a5rhj\",\n                \"_TZE200_bjzrowv2\",\n                \"_TZE204_bjzrowv2\",\n                \"_TZE200_axgvo9jh\",\n                \"_TZE200_gaj531w3\",\n                \"_TZE200_yia0p3tr\",\n                \"_TZE200_rsj5pu8y\",\n                \"_TZE200_yrugsphv\",\n                \"_TZE204_yrugsphv\",\n                \"_TZE204_nladmfvf\",\n                \"_TZE200_2odrmqwq\",\n                \"_TZE204_lh3arisb\",\n                \"_TZE284_udank5zs\",\n                \"_TZE284_b7kbnl6q\",\n                \"_TZE200_7shyddj3\",\n                \"_TZE204_a2jcoyuk\",\n                \"_TZE204_ic7jtutb\",\n                \"_TZE204_zuq5xxib\",\n            ]),\n            ...tuya.fingerprint(\"zo2pocs\\u0000\", [\"_TYST11_fzo2pocs\"]),\n            ...tuya.fingerprint(\"dank5zs\\u0000\", [\"_TYST11_udank5zs\"]),\n        ],\n        model: \"TS0601_cover_1\",\n        vendor: \"Tuya\",\n        description: \"Curtain motor/roller blind motor/window pusher/tubular motor\",\n        whiteLabel: [\n            {vendor: \"Yushun\", model: \"YS-MT750\"},\n            tuya.whitelabel(\"Yushun\", \"YS-MT750L\", \"Curtain motor\", [\"_TZE200_bqcqqjpb\", \"_TZE200_gaj531w3\"]),\n            {vendor: \"Zemismart\", model: \"ZM79E-DT\"},\n            {vendor: \"Binthen\", model: \"BCM100D\"},\n            {vendor: \"Binthen\", model: \"CV01A\"},\n            {vendor: \"Zemismart\", model: \"M515EGB\"},\n            {vendor: \"Oz Smart Things\", model: \"ZM85EL-1Z\"},\n            {vendor: \"Tuya\", model: \"M515EGZT\"},\n            {vendor: \"Tuya\", model: \"DT82LEMA-1.2N\"},\n            {vendor: \"Tuya\", model: \"ZD82TN\", description: \"Curtain motor\"},\n            {vendor: \"Larkkey\", model: \"ZSTY-SM-1SRZG-EU\"},\n            {vendor: \"Zemismart\", model: \"AM43\", description: \"Roller blind motor\"},\n            {\n                vendor: \"Zemismart\",\n                model: \"M2805EGBZTN\",\n                description: \"Tubular motor\",\n            },\n            {\n                vendor: \"Zemismart\",\n                model: \"BCM500DS-TYZ\",\n                description: \"Curtain motor\",\n            },\n            {vendor: \"A-OK\", model: \"AM25\", description: \"Tubular motor\"},\n            {vendor: \"Alutech\", model: \"AM/R-Sm\", description: \"Tubular motor\"},\n            tuya.whitelabel(\"Shenzhen Golden Security Technology\", \"GM46\", \"Curtain motor\", [\"_TZE204_guvc7pdy\"]),\n            tuya.whitelabel(\"Roximo\", \"CRTZ01\", \"Curtain motor\", [\"_TZE204_57hjqelq\"]),\n            {vendor: \"Quoya\", model: \"AT8510-TY\"},\n            tuya.whitelabel(\"Somgoms\", \"ZSTY-SM-1DMZG-US-W_1\", \"Curtain switch\", [\"_TZE200_axgvo9jh\"]),\n            tuya.whitelabel(\"HUARUI\", \"CMD900LE\", \"Lithium battery intelligent curtain opening and closing motor\", [\"_TZE200_zxxfv8wi\"]),\n            tuya.whitelabel(\"Novato\", \"WPK\", \"Smart curtain track\", [\"_TZE204_lh3arisb\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZMS1-TYZ\", \"Smart curtain track\", [\"_TZE204_zuq5xxib\"]),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_cover],\n        toZigbee: [legacy.toZigbee.tuya_cover_control, legacy.toZigbee.tuya_cover_options],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e\n                .composite(\"options\", \"options\", ea.STATE_SET)\n                .withFeature(e.numeric(\"motor_speed\", ea.STATE_SET).withValueMin(0).withValueMax(255).withDescription(\"Motor speed\"))\n                .withFeature(e.binary(\"reverse_direction\", ea.STATE_SET, true, false).withDescription(\"Reverse the motor direction\")),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_xu4a5rhj\"]),\n        model: \"M3TYW-2.0-13\",\n        vendor: \"Tuya\",\n        description: \"Longsam M3 curtain motor\",\n        fromZigbee: [legacy.fromZigbee.tuya_cover],\n        toZigbee: [tzLocal.invert_cover_percent_fix, legacy.toZigbee.tuya_cover_options],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e\n                .composite(\"options\", \"options\", ea.STATE_SET)\n                .withFeature(e.numeric(\"motor_speed\", ea.STATE_SET).withValueMin(0).withValueMax(255).withDescription(\"Motor speed\"))\n                .withFeature(e.binary(\"reverse_direction\", ea.STATE_SET, true, false).withDescription(\"Reverse the motor direction\")),\n        ],\n        options: [exposes.options.cover_position_percent_fix()],\n    },\n    {\n        fingerprint: [...tuya.fingerprint(\"TS0601\", [\"_TZE200_eegnwoyw\"]), ...tuya.fingerprint(\"TS0105\", [\"_TZE600_ogyg1y6b\"])],\n        model: \"TS0601_cover_2\",\n        vendor: \"Tuya\",\n        description: \"Curtain motor or roller blind motor with fixed speed\",\n        whiteLabel: [\n            tuya.whitelabel(\"Zemismart\", \"BCM100DB\", \"Curtain Motor\", [\"_TZE200_eegnwoyw\"]),\n            tuya.whitelabel(\"Nova Digital\", \"ZBCMR-01\", \"Roller Blind Motor\", [\"_TZE600_ogyg1y6b\"]),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_cover],\n        toZigbee: [legacy.toZigbee.tuya_cover_control],\n        exposes: [e.cover_position().setAccess(\"position\", ea.STATE_SET)],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_cpbo62rn\", \"_TZE200_libht6ua\", \"_TZE284_libht6ua\"]),\n        model: \"TS0601_cover_6\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.text(\"work_state\", ea.STATE),\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.battery(),\n            e.illuminance().withUnit(\"%\"),\n            e.enum(\"opening_mode\", ea.STATE_SET, [\"tilt\", \"lift\"]).withDescription(\"Opening mode\"),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"left\", \"right\"]).withDescription(\"Motor side\"),\n            e.enum(\"set_upper_limit\", ea.STATE_SET, [\"start\", \"stop\"]).withDescription(\"Learning\"),\n            e.enum(\"factory_reset\", ea.STATE_SET, [\"SET\"]).withDescription(\"Remove limits\"),\n        ],\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"LY-108\", \"Cover\", [\"_TZE200_cpbo62rn\"])],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        CLOSE: tuya.enum(2),\n                        STOP: tuya.enum(1),\n                        OPEN: tuya.enum(0),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPositionInverted],\n                [3, \"position\", tuya.valueConverter.coverPositionInverted],\n                [\n                    4,\n                    \"opening_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        tilt: tuya.enum(0),\n                        lift: tuya.enum(1),\n                    }),\n                ],\n                [\n                    7,\n                    \"work_state\",\n                    tuya.valueConverterBasic.lookup({\n                        standby: tuya.enum(0),\n                        success: tuya.enum(1),\n                        learning: tuya.enum(2),\n                    }),\n                ],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [\n                    101,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        left: tuya.enum(0),\n                        right: tuya.enum(1),\n                    }),\n                ],\n                [\n                    102,\n                    \"set_upper_limit\",\n                    tuya.valueConverterBasic.lookup({\n                        start: tuya.enum(1),\n                        stop: tuya.enum(0),\n                    }),\n                ],\n                [104, \"illuminance\", tuya.valueConverter.raw],\n                [107, \"factory_reset\", tuya.valueConverter.setLimit],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_zvo63cmo\"]),\n        model: \"TS0601_cover_7\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [e.cover_position().setAccess(\"position\", ea.STATE_SET), e.battery()],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.raw],\n                // motor_direction doesn't work: https://github.com/Koenkk/zigbee2mqtt/issues/18103\n                // [5, 'motor_direction', tuya.valueConverterBasic.lookup({'normal': tuya.enum(0), 'reversed': tuya.enum(1)})],\n                [101, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_r0jdjrvi\", \"_TZE200_g5xqosu7\", \"_TZE204_g5xqosu7\", \"_TZE284_fzo2pocs\", \"_TZE200_9vpe3fl1\"]),\n        model: \"TS0601_cover_8\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        configure: tuya.configureMagicPacket,\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        options: [exposes.options.invert_cover()],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"reverse_direction\", ea.STATE_SET, [\"forward\", \"back\"]).withDescription(\"Reverse the motor direction\"),\n            e.binary(\"motor_fault\", ea.STATE, true, false).withDescription(\"Motor Fault\"),\n            e\n                .enum(\"upper_stroke_limit\", ea.STATE_SET, [\"SET\", \"RESET\"])\n                .withDescription(\"Set or Reset the upper stroke limit\")\n                .withCategory(\"config\"),\n            e\n                .enum(\"middle_stroke_limit\", ea.STATE_SET, [\"SET\", \"RESET\"])\n                .withDescription(\"Set or Reset the middle stroke limit\")\n                .withCategory(\"config\"),\n            e\n                .enum(\"lower_stroke_limit\", ea.STATE_SET, [\"SET\", \"RESET\"])\n                .withDescription(\"Set or Reset the lower stroke limit\")\n                .withCategory(\"config\"),\n            e\n                .enum(\"motor_working_mode\", ea.STATE_SET, [\"continuous\", \"intermittently\"])\n                .withDescription(\"Motor operating mode\")\n                .withCategory(\"config\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPositionInverted],\n                [3, \"position\", tuya.valueConverter.coverPositionInverted],\n                [\n                    5,\n                    \"reverse_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        forward: tuya.enum(0),\n                        back: tuya.enum(1),\n                    }),\n                ],\n                [12, \"motor_fault\", tuya.valueConverter.trueFalse1],\n                [103, \"upper_stroke_limit\", tuya.valueConverterBasic.lookup({SET: true, RESET: false})],\n                [104, \"middle_stroke_limit\", tuya.valueConverterBasic.lookup({SET: true, RESET: false})],\n                [105, \"lower_stroke_limit\", tuya.valueConverterBasic.lookup({SET: true, RESET: false})],\n                [106, \"motor_working_mode\", tuya.valueConverterBasic.lookup({continuous: tuya.enum(0), intermittently: tuya.enum(1)})],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Lilistore\", \"TS0601_lilistore\", \"Cover motor\", [\"_TZE204_r0jdjrvi\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZM90E-DT250N/A400\", \"Window opener\", [\"_TZE204_r0jdjrvi\"]),\n            tuya.whitelabel(\"Nova Digital\", \"CMR-1\", \"Roller Blind Motor\", [\"_TZE200_9vpe3fl1\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_a8z0g46u\", \"_TZE204_a8z0g46u\"]),\n        model: \"YY-LT500\",\n        vendor: \"Tuya\",\n        description: \"Window opener\",\n        options: [exposes.options.invert_cover()],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [e.cover_position().setAccess(\"position\", ea.STATE_SET)],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [7, \"position\", tuya.valueConverter.coverPosition],\n                [8, \"position\", tuya.valueConverter.coverPosition],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_p2qzzazi\"]),\n        model: \"TS0601_cover_9\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [e.cover_position().setAccess(\"position\", ea.STATE_SET), e.battery()],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.raw],\n                [\n                    5,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: tuya.enum(0),\n                        reversed: tuya.enum(1),\n                    }),\n                ],\n                [101, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_debczeci\", \"_TZE284_1lvln0x6\"]),\n        model: \"iHsenso_TS0601_human_presence\",\n        vendor: \"iHseno\",\n        description: \"Human presence sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.presence().withDescription(\"Human presence detected\"),\n            e.battery().withDescription(\"Battery percentage\"),\n            e.enum(\"pir_sensitivity\", ea.STATE_SET, [\"low\", \"middle\", \"high\"]).withDescription(\"PIR sensor sensitivity\"),\n            e.enum(\"pir_time\", ea.STATE_SET, [\"15s\", \"30s\", \"60s\"]).withDescription(\"PIR delay time in seconds\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [9, \"pir_sensitivity\", tuya.valueConverterBasic.lookup({low: 0, middle: 1, high: 2})],\n                [10, \"pir_time\", tuya.valueConverterBasic.lookup({\"15s\": 0, \"30s\": 1, \"60s\": 2})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_clm4gdw4\", \"_TZE200_2vfxweng\", \"_TZE200_gnw1rril\", \"_TZE204_ycke4deo\", \"_TZE284_koxaopnk\"]),\n        model: \"TS0601_cover_10\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Set the motor direction\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(2),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(0),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.raw],\n                [5, \"motor_direction\", tuya.valueConverterBasic.lookup({normal: false, reversed: true})],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Nova Digital\", \"ZC-GM42\", \"Roller blind motor\", [\"_TZE204_ycke4deo\"]),\n            tuya.whitelabel(\"Moes\", \"ZC-LS02\", \"Roller blind motor\", [\"_TZE284_koxaopnk\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ax8a8ahx\"]),\n        model: \"ZM79E-DT\",\n        vendor: \"Tervix\",\n        description: \"Pro Line Zigbee curtain motor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.text(\"work_state\", ea.STATE),\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"opening_mode\", ea.STATE_SET, [\"tilt\", \"lift\"]).withDescription(\"Opening mode\"),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"left\", \"right\"]).withDescription(\"Motor side\"),\n            e.enum(\"set_upper_limit\", ea.STATE_SET, [\"start\", \"stop\"]).withDescription(\"Learning\"),\n            e.enum(\"factory_reset\", ea.STATE_SET, [\"SET\"]).withDescription(\"Remove limits\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        CLOSE: tuya.enum(2),\n                        STOP: tuya.enum(1),\n                        OPEN: tuya.enum(0),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPositionInverted],\n                [3, \"position\", tuya.valueConverter.coverPositionInverted],\n                [\n                    4,\n                    \"opening_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        tilt: tuya.enum(0),\n                        lift: tuya.enum(1),\n                    }),\n                ],\n                [\n                    7,\n                    \"work_state\",\n                    tuya.valueConverterBasic.lookup({\n                        standby: tuya.enum(0),\n                        success: tuya.enum(1),\n                        learning: tuya.enum(2),\n                    }),\n                ],\n                [\n                    101,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        left: tuya.enum(0),\n                        right: tuya.enum(1),\n                    }),\n                ],\n                [\n                    102,\n                    \"set_upper_limit\",\n                    tuya.valueConverterBasic.lookup({\n                        start: tuya.enum(1),\n                        stop: tuya.enum(0),\n                    }),\n                ],\n                [107, \"factory_reset\", tuya.valueConverter.setLimit],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_2rvvqjoa\"]),\n        model: \"BX82-TYZ1\",\n        vendor: \"Manhot\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Set the motor direction\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(2),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(0),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.raw],\n                [\n                    5,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: tuya.enum(0),\n                        reversed: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_2gi1hy8s\"]),\n        model: \"MB60L-ZG-ZT-TY\",\n        vendor: \"Manhot\",\n        description: \"Smart blinds motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e.battery(),\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"set_limits\", ea.STATE_SET, [\"up\", \"down\", \"reset\"]),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Motor Steering\"),\n            e.binary(\"tilt_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Step movement\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child Lock\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [9, \"position\", tuya.valueConverter.coverPositionInverted],\n                [\n                    11,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: tuya.enum(0),\n                        reversed: tuya.enum(1),\n                    }),\n                ],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [\n                    16,\n                    \"set_limits\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                        reset: tuya.enum(2),\n                    }),\n                ],\n                [101, \"child_lock\", tuya.valueConverter.onOff],\n                [103, \"tilt_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"kud7u2l\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_ckud7u2l\",\n            \"_TZE200_ywdxldoj\",\n            \"_TZE200_do5qy8zo\",\n            \"_TZE200_cwnjrr72\",\n            \"_TZE200_pvvbommb\",\n            \"_TZE200_9sfg7gm0\",\n            \"_TZE200_2atgpdho\",\n            \"_TZE200_cpmgn2cf\",\n            \"_TZE200_znlqjmih\",\n            \"_TZE284_znlqjmih\",\n            \"_TZE200_8thwkzxl\",\n            \"_TZE200_4eeyebrt\",\n            \"_TZE200_8whxpsiw\",\n            \"_TZE200_xby0s3ta\",\n            \"_TZE200_7fqkphoq\",\n            \"_TZE200_rufdtfyv\" /* model: '07732L', vendor: 'Immax' */,\n            \"_TZE200_lpwgshtl\",\n            \"_TZE200_rk1wojce\" /* model: 'P5630S', vendor: 'Emos' */,\n            \"_TZE200_rndg81sf\" /* model: 'HY368', vendor: 'THALEOS' */,\n            \"_TZE200_qjp4ynvi\",\n        ]),\n        model: \"TS0601_thermostat\",\n        vendor: \"Tuya\",\n        description: \"Radiator valve with thermostat\",\n        whiteLabel: [\n            {vendor: \"Moes\", model: \"HY368\"},\n            {vendor: \"Moes\", model: \"HY369RT\"},\n            {vendor: \"SHOJZJ\", model: \"378RT\"},\n            {vendor: \"Silvercrest\", model: \"TVR01\"},\n            {vendor: \"Immax\", model: \"07732B\"},\n            tuya.whitelabel(\"Immax\", \"07732L\", \"Radiator valve with thermostat\", [\"_TZE200_rufdtfyv\"]),\n            {vendor: \"Evolveo\", model: \"Heat M30\"},\n            tuya.whitelabel(\"Emos\", \"P5630S\", \"Radiator valve with thermostat\", [\"_TZE200_rk1wojce\"]),\n            tuya.whitelabel(\"THALEOS\", \"HY368\", \"Radiator valve with thermostat\", [\"_TZE200_rndg81sf\"]),\n        ],\n        meta: {\n            tuyaThermostatPreset: legacy.thermostatPresets,\n            tuyaThermostatSystemMode: legacy.thermostatSystemModes3,\n        },\n        ota: true,\n        extend: [tuya.modernExtend.tuyaBase({forceTimeUpdates: true})],\n        fromZigbee: [legacy.fromZigbee.tuya_thermostat, fz.ignore_tuya_set_time],\n        toZigbee: [\n            legacy.toZigbee.tuya_thermostat_child_lock,\n            legacy.toZigbee.tuya_thermostat_window_detection,\n            legacy.toZigbee.tuya_thermostat_valve_detection,\n            legacy.toZigbee.tuya_thermostat_current_heating_setpoint,\n            legacy.toZigbee.tuya_thermostat_auto_lock,\n            legacy.toZigbee.tuya_thermostat_calibration,\n            legacy.toZigbee.tuya_thermostat_min_temp,\n            legacy.toZigbee.tuya_thermostat_max_temp,\n            legacy.toZigbee.tuya_thermostat_boost_time,\n            legacy.toZigbee.tuya_thermostat_comfort_temp,\n            legacy.toZigbee.tuya_thermostat_eco_temp,\n            legacy.toZigbee.tuya_thermostat_force_to_mode,\n            legacy.toZigbee.tuya_thermostat_force,\n            legacy.toZigbee.tuya_thermostat_preset,\n            legacy.toZigbee.tuya_thermostat_window_detect,\n            legacy.toZigbee.tuya_thermostat_schedule,\n            legacy.toZigbee.tuya_thermostat_week,\n            legacy.toZigbee.tuya_thermostat_schedule_programming_mode,\n            legacy.toZigbee.tuya_thermostat_away_mode,\n            legacy.toZigbee.tuya_thermostat_away_preset,\n        ],\n        exposes: [\n            e.child_lock(),\n            e.window_detection(),\n            e.binary(\"window_open\", ea.STATE, true, false).withDescription(\"Window open?\"),\n            e.battery_low(),\n            e.valve_detection(),\n            e.position(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode(\n                    [\"heat\", \"auto\", \"off\"],\n                    ea.STATE_SET,\n                    \"Mode of this device, in the `heat` mode the TS0601 will remain continuously heating, i.e. it does not regulate \" +\n                        \"to the desired temperature. If you want TRV to properly regulate the temperature you need to use mode `auto` \" +\n                        \"instead setting the desired temperature.\",\n                )\n                .withLocalTemperatureCalibration(-9, 9, 0.5, ea.STATE_SET)\n                .withPreset([\"schedule\", \"manual\", \"boost\", \"complex\", \"comfort\", \"eco\", \"away\"])\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            e.auto_lock(),\n            e.away_mode(),\n            e.away_preset_days(),\n            e.boost_time(),\n            e.comfort_temperature(),\n            e.eco_temperature(),\n            e.force(),\n            e.max_temperature().withValueMin(16).withValueMax(70),\n            e.min_temperature(),\n            e.away_preset_temperature(),\n            e.week(),\n            e\n                .text(\"workdays_schedule\", ea.STATE_SET)\n                .withDescription('Workdays schedule, 6 entries max, example: \"00:20/5°C 01:20/5°C 6:59/15°C 18:00/5°C 20:00/5°C 23:30/5°C\"'),\n            e\n                .text(\"holidays_schedule\", ea.STATE_SET)\n                .withDescription('Holidays schedule, 6 entries max, example: \"00:20/5°C 01:20/5°C 6:59/15°C 18:00/5°C 20:00/5°C 23:30/5°C\"'),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_g2ki0ejr\"]),\n        model: \"BAB-1413_Pro\",\n        vendor: \"Tuya\",\n        description: \"Thermostat radiator valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        ota: true,\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e\n                .numeric(\"max_temperature_limit\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Max temperature limit\")\n                .withValueMin(15)\n                .withValueMax(45)\n                .withValueStep(0.5),\n            e\n                .numeric(\"min_temperature_limit\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Min temperature limit\")\n                .withValueMin(5)\n                .withValueMax(15)\n                .withValueStep(0.5),\n            e.window_detection(),\n            e.open_window_temperature().withValueMin(5).withValueMax(30).withValueStep(0.5),\n            e.comfort_temperature().withValueMin(5).withValueMax(35),\n            e.eco_temperature().withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e.holiday_temperature().withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e\n                .climate()\n                .withPreset([\"auto\", \"manual\", \"holiday\", \"comfort\"])\n                .withLocalTemperatureCalibration(-9, 9, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 45, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET, \"Only for Homeassistant\")\n                .withRunningState([\"idle\", \"heat\"], ea.STATE_SET),\n            tuya.exposes.frostProtection(\n                \"When Anti-Freezing function is activated, the temperature in the house is kept \" +\n                    'at 8 °C, the device display \"AF\".press the pair button to cancel.',\n            ),\n            e\n                .numeric(\"boost_time\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withDescription(\"Boost running time. Minimum 0 - maximum 24 hours\")\n                .withValueMin(0)\n                .withValueMax(1440)\n                .withValueStep(15)\n                .withCategory(\"config\"),\n            e.numeric(\"boost_timeset_countdown\", ea.STATE).withUnit(\"min\").withDescription(\"Boost time remaining\"),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"06:00/21.5 17:20/26 20:00/21 24:00/18\").map((text) => text.withCategory(\"config\")),\n            e.binary(\"valve\", ea.STATE, \"CLOSED\", \"OPEN\"),\n            // e.enum('factory_reset', ea.STATE_SET, ['factory reset']).withLabel('Factory reset').withDescription('Reset all settings to factory ones'),\n            e\n                .binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"Back to factory settings, USE WITH CAUTION\"),\n            tuya.exposes.errorStatus(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    49,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(1),\n                        idle: tuya.enum(0),\n                    }),\n                ],\n                [\n                    49,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(1),\n                        off: tuya.enum(0),\n                    }),\n                ],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        comfort: tuya.enum(3),\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(2),\n                        holiday: tuya.enum(1),\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [7, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [9, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [10, \"min_temperature_limit\", tuya.valueConverter.divideBy10],\n                [14, \"window_detection\", tuya.valueConverter.onOff],\n                [16, \"open_window_temperature\", tuya.valueConverter.divideBy10],\n                [17, \"open_window_time\", tuya.valueConverter.raw],\n                // [18, 'backlight', tuya.valueConverter.raw],\n                [19, \"factory_reset\", tuya.valueConverter.onOff],\n                [21, \"holiday_temperature\", tuya.valueConverter.raw],\n                [24, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [25, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [17, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [18, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [19, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [20, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [21, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [22, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [23, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                // [35, 'error_status', tuya.valueConverter.raw],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                // [37, 'boost_time', tuya.valueConverter.raw],\n                // [38, 'boost_timeset_countdown', tuya.valueConverter.countdown],\n                // [39, 'Switch Scale', tuya.valueConverter.raw],\n                // Did not work properly from Smart life also\n                // [47, 'local_temperature_calibration', tuya.valueConverter.localTempCalibration1],\n                // [48, 'valve_testing', tuya.valueConverter.raw],\n                [49, \"valve\", tuya.valueConverter.trueFalseEnum0],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_tbgecldg\", \"_TZE284_tbgecldg\", \"_TZE200_tbgecldg\"]),\n        model: \"PO-THCO-EAU\",\n        vendor: \"Powernity\",\n        description: \"Thermostat radiator valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.battery().withUnit(\"%\"),\n            e.child_lock(),\n            e.comfort_temperature().withValueMin(0.5).withValueMax(29.5),\n            e.eco_temperature().withValueMin(0.5).withValueMax(29.5),\n            e.holiday_temperature().withValueMin(0.5).withValueMax(29.5),\n            e\n                .numeric(\"auto_temperature\", ea.STATE_SET)\n                .withDescription(\"Auto settings temperature\")\n                .withUnit(\"°C\")\n                .withValueMin(0.5)\n                .withValueStep(0.5)\n                .withValueMax(29.5),\n            e\n                .climate()\n                .withPreset([\"auto\", \"manual\", \"holiday\"])\n                .withLocalTemperatureCalibration(-5.5, 5.5, 0.1, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 0.5, 29.5, 0.5, ea.STATE_SET),\n            e.binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Boost Heating: the device will enter the boost heating mode.\"),\n            e\n                .numeric(\"boost_time\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\n                    \"Setting \" +\n                        \"minimum 0 - maximum 900 seconds boost time. The boost function is activated. The remaining \" +\n                        \"time for the function will be counted down in seconds ( 900 to 0 ).\",\n                )\n                .withValueMin(0)\n                .withValueMax(900),\n            e.binary(\"window_open\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status CLOSE or OPEN \"),\n            e.open_window_temperature().withValueMin(5).withValueMax(25),\n            e\n                .numeric(\"open_window_time\", ea.STATE_SET)\n                .withDescription(\n                    \"In the setting time, when the range of indoor temperature changes reaches the set range, the window opening reminder will be displayed\",\n                )\n                .withUnit(\"minutes\")\n                .withValueMin(0)\n                .withValueMax(60)\n                .withValueStep(1),\n            tuya.exposes.errorStatus(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(1),\n                        holiday: tuya.enum(2),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy2],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [30, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [34, \"battery\", tuya.valueConverterBasic.scale(0, 100, 50, 150)],\n                [101, \"comfort_temperature\", tuya.valueConverter.divideBy2],\n                [102, \"eco_temperature\", tuya.valueConverter.divideBy2],\n                [103, \"holiday_temperature\", tuya.valueConverter.divideBy2],\n                [104, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [105, \"auto_temperature\", tuya.valueConverter.divideBy2],\n                [106, \"boost_heating\", tuya.valueConverter.onOff],\n                [107, \"window_open\", tuya.valueConverter.onOff],\n                [116, \"open_window_temperature\", tuya.valueConverter.divideBy2],\n                [117, \"open_window_time\", tuya.valueConverter.raw],\n                [118, \"boost_time\", tuya.valueConverter.countdown],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_68nvbio9\",\n            \"_TZE200_pw7mji0l\",\n            \"_TZE200_cf1sl3tj\",\n            \"_TZE200_nw1r9hp6\",\n            \"_TZE200_9p5xmj5r\",\n            \"_TZE200_eevqq1uv\",\n            \"_TZE200_ba69l9ol\",\n        ]),\n        model: \"TS0601_cover_3\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        options: [exposes.options.invert_cover()],\n        exposes: [\n            e.battery(),\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"reverse_direction\", ea.STATE_SET, [\"forward\", \"back\"]).withDescription(\"Reverse the motor direction\"),\n            e.enum(\"border\", ea.STATE_SET, [\"up\", \"down\", \"up_delete\", \"down_delete\", \"remove_top_bottom\"]),\n            e.enum(\"click_control\", ea.STATE_SET, [\"up\", \"down\"]).withDescription(\"Single motor steps\"),\n            e.binary(\"motor_fault\", ea.STATE, true, false),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"Zemismart\", \"ZM16EL-03/33\", \"Cover motor\", [\"_TZE200_68nvbio9\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZM25EL\", \"Cover motor\", [\"_TZE200_pw7mji0l\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZM85EL-2Z\", \"Roman Rod I type U curtains track\", [\"_TZE200_cf1sl3tj\", \"_TZE200_nw1r9hp6\"]),\n            tuya.whitelabel(\"Hiladuo\", \"B09M3R35GC\", \"Motorized roller shade\", [\"_TZE200_9p5xmj5r\"]),\n        ],\n        meta: {\n            // All datapoints go in here\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.coverPosition],\n                [\n                    5,\n                    \"reverse_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        forward: tuya.enum(0),\n                        back: tuya.enum(1),\n                    }),\n                ],\n                [12, \"motor_fault\", tuya.valueConverter.trueFalse1],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [\n                    16,\n                    \"border\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                        up_delete: tuya.enum(2),\n                        down_delete: tuya.enum(3),\n                        remove_top_bottom: tuya.enum(4),\n                    }),\n                ],\n                [\n                    20,\n                    \"click_control\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_zah67ekd\", \"_TZE200_icka1clh\"]),\n        model: \"TS0601_cover_4\",\n        vendor: \"Tuya\",\n        description: \"Cover\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Set the motor direction\"),\n            e.numeric(\"motor_speed\", ea.STATE_SET).withValueMin(0).withValueMax(255).withDescription(\"Motor speed\").withUnit(\"rpm\"),\n            e.enum(\"opening_mode\", ea.STATE_SET, [\"tilt\", \"lift\"]).withDescription(\"Opening mode\"),\n            e.enum(\"set_upper_limit\", ea.SET, [\"SET\"]).withDescription(\"Set the upper limit, to reset limits use factory_reset\"),\n            e.enum(\"set_bottom_limit\", ea.SET, [\"SET\"]).withDescription(\"Set the bottom limit, to reset limits use factory_reset\"),\n            e.binary(\"factory_reset\", ea.SET, true, false).withDescription(\"Factory reset the device\"),\n        ],\n        whiteLabel: [tuya.whitelabel(\"Moes\", \"AM43-0.45/40-ES-EB\", \"Roller blind/shades drive motor\", [\"_TZE200_zah67ekd\", \"_TZE200_icka1clh\"])],\n        configure: (device, coordinatorEndpoint) => {\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [3, \"position\", tuya.valueConverter.raw],\n                [5, \"motor_direction\", tuya.valueConverter.tubularMotorDirection],\n                [7, null, null], // work_state, not useful, ignore\n                [\n                    101,\n                    \"opening_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        tilt: tuya.enum(0),\n                        lift: tuya.enum(1),\n                    }),\n                ],\n                [102, \"factory_reset\", tuya.valueConverter.raw],\n                [103, \"set_upper_limit\", tuya.valueConverter.setLimit],\n                [104, \"set_bottom_limit\", tuya.valueConverter.setLimit],\n                [105, \"motor_speed\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_sur6q7ko\" /* model: '3012732', vendor: 'LSC Smart Connect' */,\n            \"_TZE200_hue3yfsn\" /* model: 'TV02-Zigbee', vendor: 'Tuya' */,\n            \"_TZE200_e9ba97vf\" /* model: 'TV01-ZB', vendor: 'Moes' */,\n            \"_TZE200_husqqvux\" /* model: 'TSL-TRV-TV01ZG', vendor: 'Tesla Smart' */,\n            \"_TZE200_lnbfnyxd\" /* model: 'TSL-TRV-TV01ZG', vendor: 'Tesla Smart' */,\n            \"_TZE200_fsow0qsk\" /* model: 'TSL-TRV-TV05ZG', vendor: 'Tesla Smart' */,\n            \"_TZE200_lllliz3p\" /* model: 'TV02-Zigbee', vendor: 'Tuya' */,\n            \"_TZE200_mudxchsu\" /* model: 'TV05-ZG curve', vendor: 'Tuya' */,\n            \"_TZE200_7yoranx2\" /* model: 'TV01-ZB', vendor: 'Moes' */,\n            \"_TZE200_kds0pmmv\",\n            \"_TZE200_py4cm3he\" /* model: 'TV06-Zigbee', vendor: 'Tuya' */,\n            \"_TZE200_wsbfwodu\" /* model: 'HA-08 THERMO', vendor: 'AlecoAir' */,\n        ]),\n        model: \"TV02-Zigbee\",\n        vendor: \"Tuya\",\n        description: \"Thermostat radiator valve\",\n        whiteLabel: [\n            {vendor: \"Moes\", model: \"TV01-ZB\"},\n            {vendor: \"AVATTO\", model: \"TRV06-1\"},\n            {vendor: \"Tesla Smart\", model: \"TSL-TRV-TV01ZG\"},\n            {vendor: \"Tesla Smart\", model: \"TSL-TRV-TV05ZG\"},\n            {vendor: \"Unknown/id3.pl\", model: \"GTZ08\"},\n            tuya.whitelabel(\"Moes\", \"ZTRV-ZX-TV01-MS\", \"Thermostat radiator valve\", [\"_TZE200_7yoranx2\"]),\n            tuya.whitelabel(\"Moes\", \"TV01-ZB\", \"Thermostat radiator valve\", [\"_TZE200_e9ba97vf\"]),\n            tuya.whitelabel(\"AlecoAir\", \"HA-08_THERMO\", \"Thermostat radiator valve\", [\"_TZE200_wsbfwodu\"]),\n            tuya.whitelabel(\"GIEX\", \"TV06\", \"Thermostat radiator valve\", [\"_TZE200_py4cm3he\"]),\n        ],\n        ota: true,\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.battery_low(),\n            e.child_lock(),\n            e.open_window(),\n            e.open_window_temperature().withValueMin(5).withValueMax(30),\n            e.comfort_temperature().withValueMin(5).withValueMax(30),\n            e.eco_temperature().withValueMin(5).withValueMax(30),\n            e\n                .climate()\n                .withPreset([\"auto\", \"manual\", \"holiday\"])\n                .withLocalTemperatureCalibration(-5, 5, 0.1, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 30, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET, \"Only for Homeassistant\"),\n            e\n                .binary(\"heating_stop\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"Battery life can be prolonged\" +\n                        \" by switching the heating off. To achieve this, the valve is closed fully. To activate the \" +\n                        'heating stop, the device display \"HS\", press the pair button to cancel.',\n                ),\n            tuya.exposes.frostProtection(\n                \"When Anti-Freezing function is activated, the temperature in the house is kept \" +\n                    'at 8 °C, the device display \"AF\".press the pair button to cancel.',\n            ),\n            e\n                .numeric(\"boost_timeset_countdown\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\n                    \"Setting \" +\n                        \"minimum 0 - maximum 465 seconds boost time. The boost (♨) function is activated. The remaining \" +\n                        \"time for the function will be counted down in seconds ( 465 to 0 ).\",\n                )\n                .withValueMin(0)\n                .withValueMax(465),\n            e.holiday_temperature().withValueMin(5).withValueMax(30),\n            e\n                .text(\"holiday_start_stop\", ea.STATE_SET)\n                .withDescription(\n                    \"The holiday mode will automatically start \" +\n                        \"at the set time starting point and run the holiday temperature. Can be defined in the following format: \" +\n                        \"`startYear/startMonth/startDay startHours:startMinutes | endYear/endMonth/endDay endHours:endMinutes`. \" +\n                        'For example: `2022/10/01 16:30 | 2022/10/21 18:10`. After the end of holiday mode, it switches to \"auto\" ' +\n                        \"mode and uses schedule.\",\n                ),\n            e\n                .enum(\"working_day\", ea.STATE_SET, [\"mon_sun\", \"mon_fri+sat+sun\", \"separate\"])\n                .withDescription(\n                    \"`mon_sun` \" +\n                        \"- schedule for Monday used for each day (define it only for Monday). `mon_fri+sat+sun` - schedule for \" +\n                        \"workdays used from Monday (define it only for Monday), Saturday and Sunday are defined separately. `separate` \" +\n                        \"- schedule for each day is defined separately.\",\n                ),\n            e\n                .composite(\"schedule\", \"schedule\", ea.SET)\n                .withFeature(e.enum(\"week_day\", ea.SET, [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]))\n                .withFeature(e.text(\"schedule\", ea.SET))\n                .withDescription(\n                    'Schedule will work with \"auto\" preset. In this mode, the device executes ' +\n                        \"a preset week programming temperature time and temperature. Before using these properties, check `working_day` \" +\n                        \"property. Each day can contain up to 10 segments. At least 1 segment should be defined. Different count of segments \" +\n                        \"can be defined for each day, e.g., 3 segments for Monday, 5 segments for Thursday, etc. It should be defined in the \" +\n                        \"following format: `hours:minutes/temperature`. Minutes can be only tens, i.e., 00, 10, 20, 30, 40, 50. Segments should \" +\n                        \"be divided by space symbol. Each day should end with the last segment of 24:00. Examples: `04:00/20 08:30/22 10:10/18 \" +\n                        \"18:40/24 22:50/19.5`; `06:00/21.5 17:20/26 24:00/18`. The temperature will be set from the beginning/start of one \" +\n                        \"period and until the next period, e.g., `04:00/20 24:00/22` means that from 00:00 to 04:00 temperature will be 20 \" +\n                        \"degrees and from 04:00 to 00:00 temperature will be 22 degrees.\",\n                ),\n            ...tuya.exposes.scheduleAllDays(ea.STATE, \"HH:MM/C\"),\n            e.binary(\"online\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"The current data request from the device.\"),\n            tuya.exposes.errorStatus(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [2, \"preset\", tuya.valueConverter.tv02Preset()],\n                [8, \"open_window\", tuya.valueConverter.onOff],\n                [10, null, tuya.valueConverter.TV02FrostProtection],\n                [10, \"frost_protection\", tuya.valueConverter.TV02FrostProtection],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [\n                    31,\n                    \"working_day\",\n                    tuya.valueConverterBasic.lookup({\n                        mon_sun: tuya.enum(0),\n                        \"mon_fri+sat+sun\": tuya.enum(1),\n                        separate: tuya.enum(2),\n                    }),\n                ],\n                [32, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [35, \"battery_low\", tuya.valueConverter.trueFalse0],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [45, \"error_status\", tuya.valueConverter.raw],\n                [46, \"holiday_start_stop\", tuya.valueConverter.thermostatHolidayStartStop],\n                [101, \"boost_timeset_countdown\", tuya.valueConverter.raw],\n                [102, \"open_window_temperature\", tuya.valueConverter.divideBy10],\n                [104, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [105, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [106, \"schedule\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [107, null, tuya.valueConverter.TV02SystemMode],\n                [107, \"system_mode\", tuya.valueConverter.TV02SystemMode],\n                [107, \"heating_stop\", tuya.valueConverter.TV02SystemMode],\n                [115, \"online\", tuya.valueConverter.onOffNotStrict],\n                [108, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [112, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [109, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [113, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [110, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [114, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n                [111, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDaySingleDP],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_0hg58wyk\" /* model: 'S366', vendor: 'Cloud Even' */]),\n        model: \"TS0601_thermostat_2\",\n        vendor: \"Tuya\",\n        description: \"Thermostat radiator valve\",\n        whiteLabel: [{vendor: \"S366\", model: \"Cloud Even\"}],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        manual: tuya.enum(0),\n                        holiday: tuya.enum(1),\n                        program: tuya.enum(2),\n                    }),\n                ],\n                [3, null, null], // TODO: Unknown DP\n                [8, \"open_window\", tuya.valueConverter.onOff],\n                [10, \"frost_protection\", tuya.valueConverter.onOff],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [35, \"battery_low\", tuya.valueConverter.trueFalse0],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [45, \"error_status\", tuya.valueConverter.raw],\n                [101, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [102, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [103, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [104, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [105, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [106, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [107, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n            ],\n        },\n        exposes: [\n            e.battery_low(),\n            e.child_lock(),\n            e.open_window(),\n            tuya.exposes.frostProtection(),\n            tuya.exposes.errorStatus(),\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"holiday\", \"program\"])\n                .withLocalTemperatureCalibration(-5, 5, 0.1, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 30, 0.5, ea.STATE_SET),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_bvu2wnxz\" /* model: 'ME167', vendor: 'AVATTO' */,\n            \"_TZE200_6rdj8dzm\" /* model: 'ME167', vendor: 'AVATTO' */,\n            \"_TZE200_9xfjixap\" /* model: 'ME167', vendor: 'AVATTO' */,\n            \"_TZE200_jkfbph7l\" /* model: 'ME167', vendor: 'AVATTO' */,\n            \"_TZE200_p3dbf6qs\" /* model: 'ME167', vendor: 'AVATTO' */,\n            \"_TZE200_rxntag7i\" /* model: 'ME168', vendor: 'AVATTO' */,\n            \"_TZE200_yqgbrdyo\",\n            \"_TZE284_p3dbf6qs\",\n            \"_TZE200_rxq4iti9\",\n            \"_TZE204_ogx8u5z6\",\n            \"_TZE284_ogx8u5z6\",\n            \"_TZE204_vjpaih9f\",\n            \"_TZE200_hvaxb2tc\" /* model: 'TRV06', vendor: 'AVATTO' */,\n            \"_TZE284_o3x45p96\" /* model: 'TRV06', vendor: 'AVATTO' */,\n            \"_TZE284_c6wv4xyo\" /* model: 'AVATTO_TRV06', vendor: 'AVATTO' */,\n            \"_TZE204_o3x45p96\" /* model: 'AVATTO_TRV06', vendor: 'AVATTO' */,\n            \"_TZE200_ow09xlxm\" /* model: 'TRV06-AT', vendor: 'THALEOS' */,\n            \"_TZE284_rv6iuyxb\" /* model: 'TRV06-AT', vendor: 'THALEOS' */,\n            \"_TZE200_rv6iuyxb\" /* model: 'TRV06-AT', vendor: 'THALEOS' */,\n            \"_TZE200_suxywabt\" /* model: 'TRV06-AT', vendor: 'THALEOS' */,\n            \"_TZE200_d3z1ukqw\" /* model: 'Eco-4160', vendor: 'Echos' */,\n        ]),\n        model: \"TS0601_thermostat_3\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve\",\n        whiteLabel: [\n            tuya.whitelabel(\"AVATTO\", \"ME167\", \"Thermostatic radiator valve\", [\n                \"_TZE200_p3dbf6qs\",\n                \"_TZE200_bvu2wnxz\",\n                \"_TZE200_6rdj8dzm\",\n                \"_TZE200_9xfjixap\",\n                \"_TZE200_jkfbph7l\",\n            ]),\n            tuya.whitelabel(\"AVATTO\", \"ME168_1\", \"Thermostatic radiator valve\", [\"_TZE200_rxntag7i\"]),\n            tuya.whitelabel(\"AVATTO\", \"TRV06_1\", \"Thermostatic radiator valve\", [\"_TZE204_vjpaih9f\", \"_TZE200_hvaxb2tc\", \"_TZE284_o3x45p96\"]),\n            tuya.whitelabel(\"EARU\", \"TRV06\", \"Smart thermostat module\", [\"_TZE200_yqgbrdyo\", \"_TZE200_rxq4iti9\"]),\n            tuya.whitelabel(\"AVATTO\", \"AVATTO_TRV06\", \"Thermostatic radiator valve\", [\"_TZE284_c6wv4xyo\", \"_TZE204_o3x45p96\"]),\n            tuya.whitelabel(\"THALEOS\", \"TRV06-AT\", \"Thermostatic radiator valve\", [\n                \"_TZE200_ow09xlxm\",\n                \"_TZE284_rv6iuyxb\",\n                \"_TZE200_rv6iuyxb\",\n                \"_TZE200_suxywabt\",\n            ]),\n            tuya.whitelabel(\"Echos\", \"Eco-4160\", \"Thermostatic radiator valve\", [\"_TZE200_d3z1ukqw\"]),\n        ],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.child_lock(),\n            e.battery_low(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 1, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"auto\", \"heat\", \"off\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withPiHeatingDemand()\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e\n                .binary(\"scale_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"If the heat sink is not fully opened within \" +\n                        \"two weeks or is not used for a long time, the valve will be blocked due to silting up and the heat sink will not be \" +\n                        \"able to be used. To ensure normal use of the heat sink, the controller will automatically open the valve fully every \" +\n                        'two weeks. It will run for 30 seconds per time with the screen displaying \"Ad\", then return to its normal working state ' +\n                        \"again.\",\n                ),\n            e\n                .binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"When the room temperature is lower than 5 °C, the valve opens; when the temperature rises to 8 °C, the valve closes.\",\n                ),\n            e.numeric(\"error\", ea.STATE).withDescription('If NTC is damaged, \"Er\" will be on the TRV display.'),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        heat: tuya.enum(1),\n                        off: tuya.enum(2),\n                    }),\n                ],\n                [\n                    3,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(0),\n                        idle: tuya.enum(1),\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [7, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [28, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1, 6)],\n                [29, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2, 6)],\n                [30, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3, 6)],\n                [31, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4, 6)],\n                [32, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5, 6)],\n                [33, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6, 6)],\n                [34, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7, 6)],\n                [35, null, tuya.valueConverter.errorOrBatteryLow],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                [39, \"scale_protection\", tuya.valueConverter.onOff],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration2],\n                [101, \"pi_heating_demand\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_pcdmj88b\"]),\n        model: \"TS0601_thermostat_4\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.child_lock(),\n            e.battery(),\n            e.battery_low(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 45, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withPreset([\"schedule\", \"holiday\", \"manual\", \"comfort\", \"eco\"])\n                .withSystemMode([\"off\", \"heat\"], ea.STATE)\n                .withLocalTemperatureCalibration(-12, 12, 1, ea.STATE_SET),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e.holiday_temperature().withValueMin(5).withValueMax(45),\n            e.comfort_temperature().withValueMin(5).withValueMax(45),\n            e.eco_temperature().withValueMin(5).withValueMax(45),\n            e\n                .binary(\"scale_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"If the heat sink is not fully opened within \" +\n                        \"two weeks or is not used for a long time, the valve will be blocked due to silting up and the heat sink will not be \" +\n                        \"able to be used. To ensure normal use of the heat sink, the controller will automatically open the valve fully every \" +\n                        'two weeks. It will run for 30 seconds per time with the screen displaying \"Ad\", then return to its normal working state ' +\n                        \"again.\",\n                ),\n            e\n                .binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"When the room temperature is lower than 5 °C, the valve opens; when the temperature rises to 8 °C, the valve closes.\",\n                ),\n            e.numeric(\"error\", ea.STATE).withDescription('If NTC is damaged, \"Er\" will be on the TRV display.'),\n            e.binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Boost Heating: the device will enter the boost heating mode.\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        schedule: tuya.enum(0),\n                        holiday: tuya.enum(1),\n                        manual: tuya.enum(2),\n                        comfort: tuya.enum(3),\n                        eco: tuya.enum(4),\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [7, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [21, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [24, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [25, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [28, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [29, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [30, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [31, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [32, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [33, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [34, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [35, \"fault_alarm\", tuya.valueConverter.errorOrBatteryLow],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                [37, \"boost_heating\", tuya.valueConverter.onOff],\n                [39, \"scale_protection\", tuya.valueConverter.onOff],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration2],\n                [\n                    49,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        heat: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: [...tuya.fingerprint(\"v90ladg\\u0000\", [\"_TYST11_wv90ladg\"]), ...tuya.fingerprint(\"TS0601\", [\"_TZE200_wv90ladg\"])],\n        model: \"HT-08\",\n        vendor: \"ETOP\",\n        description: \"Wall-mount thermostat\",\n        fromZigbee: [legacy.fromZigbee.tuya_thermostat_weekly_schedule_2, legacy.fromZigbee.etop_thermostat, fz.ignore_tuya_set_time],\n        toZigbee: [\n            legacy.toZigbee.etop_thermostat_system_mode,\n            legacy.toZigbee.etop_thermostat_away_mode,\n            legacy.toZigbee.tuya_thermostat_child_lock,\n            legacy.toZigbee.tuya_thermostat_current_heating_setpoint,\n            legacy.toZigbee.tuya_thermostat_weekly_schedule,\n        ],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n        meta: {\n            thermostat: {\n                weeklyScheduleMaxTransitions: 4,\n                weeklyScheduleSupportedModes: [1], // bits: 0-heat present, 1-cool present (dec: 1-heat,2-cool,3-heat+cool)\n                weeklyScheduleFirstDayDpId: 101,\n            },\n        },\n        exposes: [\n            e.child_lock(),\n            e.away_mode(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"off\", \"heat\", \"auto\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n        ],\n    },\n    {\n        fingerprint: [...tuya.fingerprint(\"dpplnsn\\u0000\", [\"_TYST11_2dpplnsn\"]), ...tuya.fingerprint(\"TS0601\", [\"_TZE200_2dpplnsn\"])],\n        model: \"HT-10\",\n        vendor: \"ETOP\",\n        description: \"Radiator valve\",\n        fromZigbee: [legacy.fromZigbee.tuya_thermostat_weekly_schedule_2, legacy.fromZigbee.etop_thermostat, fz.ignore_tuya_set_time],\n        toZigbee: [\n            legacy.toZigbee.etop_thermostat_system_mode,\n            legacy.toZigbee.etop_thermostat_away_mode,\n            legacy.toZigbee.tuya_thermostat_child_lock,\n            legacy.toZigbee.tuya_thermostat_current_heating_setpoint,\n            legacy.toZigbee.tuya_thermostat_weekly_schedule,\n        ],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n        meta: {\n            timeout: 20000, // TRV wakes up every 10sec\n            thermostat: {\n                weeklyScheduleMaxTransitions: 4,\n                weeklyScheduleSupportedModes: [1], // bits: 0-heat present, 1-cool present (dec: 1-heat,2-cool,3-heat+cool)\n                weeklyScheduleFirstDayDpId: 101,\n            },\n        },\n        exposes: [\n            e.battery_low(),\n            e.child_lock(),\n            e.away_mode(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"off\", \"heat\", \"auto\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_a4bpgplm\", \"_TZE200_dv8abrrz\", \"_TZE200_z1tyspqw\", \"_TZE200_bvrlmajk\"]),\n        model: \"TS0601_thermostat_1\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve\",\n        whiteLabel: [\n            tuya.whitelabel(\"id3\", \"GTZ06\", \"Thermostatic radiator valve\", [\"_TZE200_z1tyspqw\"]),\n            tuya.whitelabel(\"AVATTO\", \"TRV07\", \"Thermostatic radiator valve\", [\"_TZE200_bvrlmajk\"]),\n        ],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.max_temperature(),\n            e.min_temperature(),\n            e.position(),\n            e.window_detection(),\n            e.binary(\"window\", ea.STATE, \"CLOSE\", \"OPEN\").withDescription(\"Window status closed or open \"),\n            e.binary(\"alarm_switch\", ea.STATE, \"ON\", \"OFF\").withDescription(\"Thermostat in error state\"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-30, 30, 0.1, ea.STATE_SET)\n                .withPreset(\n                    [\"auto\", \"manual\", \"off\", \"on\"],\n                    \"MANUAL MODE ☝ - In this mode, the device executes manual temperature setting. \" +\n                        'When the set temperature is lower than the \"minimum temperature\", the valve is closed (forced closed). ' +\n                        \"AUTO MODE ⏱ - In this mode, the device executes a preset week programming temperature time and temperature. \" +\n                        \"ON - In this mode, the thermostat stays open \" +\n                        \"OFF - In this mode, the thermostat stays closed\",\n                )\n                .withSystemMode([\"auto\", \"heat\", \"off\"], ea.STATE)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"down\"]).withDescription(\"How do you look at the display (up and down supported only)\"),\n            e\n                .enum(\"display_brightness\", ea.STATE_SET, [\"high\", \"middle\", \"low\"])\n                .withDescription(\"How strong the LED diplay is light up (high is default)\"),\n\n            e\n                .enum(\"mode\", ea.STATE_SET, [\"comfort\", \"eco\"])\n                .withDescription(\n                    \"Hysteresis - comfort > switches off/on exactly at reached \" +\n                        \"temperature with valve smooth from 0 to 100%, eco > 0.5 degrees above or below, valve either 0 or 100%\",\n                ),\n            e\n                .numeric(\"switch_deviation_eco\", ea.STATE_SET)\n                .withValueMin(0.5)\n                .withValueMax(5.0)\n                .withValueStep(0.1)\n                .withUnit(\"°C\")\n                .withDescription(\"Switch deviation (energy-saving mode only)\"),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e\n                .binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"Boost Heating: press and hold \" +\n                        \" for 3 seconds, \" +\n                        \"the device will enter the boost heating mode, and the ▷╵◁ will flash. The countdown will be displayed in the APP\",\n                ),\n            e.numeric(\"boost_time\", ea.STATE_SET).withUnit(\"min\").withDescription(\"Countdown in minutes\").withValueMin(0).withValueMax(1000),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, null, tuya.valueConverter.thermostatSystemModeAndPreset(null)],\n                [1, \"system_mode\", tuya.valueConverter.thermostatSystemModeAndPreset(\"system_mode\")],\n                [1, \"preset\", tuya.valueConverter.thermostatSystemModeAndPreset(\"preset\")],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [4, \"boost_heating\", tuya.valueConverter.onOff],\n                [5, \"boost_time\", tuya.valueConverter.countdown],\n                [6, \"running_state\", tuya.valueConverterBasic.lookup({heat: 1, idle: 0})],\n                [7, \"window\", tuya.valueConverterBasic.lookup({OPEN: 1, CLOSE: 0})],\n                [8, \"window_detection\", tuya.valueConverter.onOff],\n                [12, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [14, \"alarm_switch\", tuya.valueConverter.onOff],\n                [15, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [16, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [17, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [18, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [19, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [20, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [21, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [22, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [23, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [101, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [102, \"position\", tuya.valueConverter.divideBy10],\n                [116, \"screen_orientation\", tuya.valueConverterBasic.lookup({up: tuya.enum(0), down: tuya.enum(2)})],\n                [152, \"display_brightness\", tuya.valueConverterBasic.lookup({high: tuya.enum(0), middle: tuya.enum(1), low: tuya.enum(2)})],\n                [153, \"mode\", tuya.valueConverterBasic.lookup({comfort: tuya.enum(0), eco: tuya.enum(1)})],\n                [154, \"switch_deviation_eco\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_rtrmfadk\", \"_TZE204_cvcu2p6e\"]),\n        model: \"TRV601\",\n        vendor: \"Tuya\",\n        whiteLabel: [\n            tuya.whitelabel(\"Sber\", \"SBDV-00185\", \"Thermostatic radiator valve\", [\"_TZE204_cvcu2p6e\"]),\n            tuya.whitelabel(\"Moes\", \"TRV801_1\", \"Thermostatic radiator valve\", [\"_TZE204_rtrmfadk\"]),\n        ],\n        description: \"Thermostatic radiator valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.max_temperature(),\n            e.min_temperature(),\n            e.position(),\n            e.window_detection(),\n            e.binary(\"window\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status closed or open \"),\n            e.binary(\"alarm_switch\", ea.STATE, \"ON\", \"OFF\").withDescription(\"Thermostat in error state\"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-30, 30, 0.1, ea.STATE_SET)\n                .withPreset(\n                    [\"auto\", \"manual\", \"off\", \"on\"],\n                    \"MANUAL MODE ☝ - In this mode, the device executes manual temperature setting. \" +\n                        'When the set temperature is lower than the \"minimum temperature\", the valve is closed (forced closed). ' +\n                        \"AUTO MODE ⏱ - In this mode, the device executes a preset week programming temperature time and temperature. \" +\n                        \"ON - In this mode, the thermostat stays open \" +\n                        \"OFF - In this mode, the thermostat stays closed\",\n                )\n                .withSystemMode([\"auto\", \"heat\", \"off\"], ea.STATE)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"down\"]).withDescription(\"How do you look at the display (up and down supported only)\"),\n            e\n                .enum(\"display_brightness\", ea.STATE_SET, [\"high\", \"middle\", \"low\"])\n                .withDescription(\"How strong the LED diplay is light up (high is default)\"),\n\n            e\n                .enum(\"mode\", ea.STATE_SET, [\"comfort\", \"eco\"])\n                .withDescription(\n                    \"Hysteresis - comfort > switches off/on exactly at reached \" +\n                        \"temperature with valve smooth from 0 to 100%, eco > 0.5 degrees above or below, valve either 0 or 100%\",\n                ),\n            e\n                .numeric(\"switch_deviation_eco\", ea.STATE_SET)\n                .withValueMin(0.5)\n                .withValueMax(5.0)\n                .withValueStep(0.1)\n                .withUnit(\"°C\")\n                .withDescription(\"Switch deviation (energy-saving mode only)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, null, tuya.valueConverter.thermostatSystemModeAndPreset(null)],\n                [1, \"system_mode\", tuya.valueConverter.thermostatSystemModeAndPreset(\"system_mode\")],\n                [1, \"preset\", tuya.valueConverter.thermostatSystemModeAndPreset(\"preset\")],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"running_state\", tuya.valueConverterBasic.lookup({heat: 1, idle: 0})],\n                [7, \"window\", tuya.valueConverterBasic.lookup({OPEN: 1, CLOSE: 0})],\n                [8, \"window_detection\", tuya.valueConverter.onOff],\n                [12, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [14, \"alarm_switch\", tuya.valueConverter.onOff],\n                [15, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [16, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [17, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [18, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [19, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [20, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [21, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [22, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [23, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [101, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [108, \"position\", tuya.valueConverter.divideBy10],\n                [111, \"display_brightness\", tuya.valueConverterBasic.lookup({high: tuya.enum(0), middle: tuya.enum(1), low: tuya.enum(2)})],\n                [113, \"screen_orientation\", tuya.valueConverterBasic.lookup({up: tuya.enum(0), down: tuya.enum(2)})],\n                [114, \"mode\", tuya.valueConverterBasic.lookup({comfort: tuya.enum(0), eco: tuya.enum(1)})],\n                [115, \"switch_deviation_eco\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_9mjy74mp\", \"_TZE200_rtrmfadk\", \"_TZE200_9mjy74mp\"]),\n        model: \"TRV602\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve.\",\n        whiteLabel: [tuya.whitelabel(\"Moes\", \"TRV801\", \"Thermostatic radiator valve\", [\"_TZE204_9mjy74mp\", \"_TZE200_9mjy74mp\"])],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.max_temperature(),\n            e.min_temperature(),\n            e.position(),\n            e.window_detection(),\n            e.binary(\"window\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status closed or open \"),\n            e.binary(\"alarm_switch\", ea.STATE, \"ON\", \"OFF\").withDescription(\"Thermostat in error state\"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-30, 30, 0.1, ea.STATE_SET)\n                .withPreset(\n                    [\"auto\", \"manual\", \"off\", \"on\"],\n                    \"MANUAL MODE ☝ - In this mode, the device executes manual temperature setting. \" +\n                        'When the set temperature is lower than the \"minimum temperature\", the valve is closed (forced closed). ' +\n                        \"AUTO MODE ⏱ - In this mode, the device executes a preset week programming temperature time and temperature. \" +\n                        \"ON - In this mode, the thermostat stays open \" +\n                        \"OFF - In this mode, the thermostat stays closed\",\n                )\n                .withSystemMode([\"auto\", \"heat\", \"off\"], ea.STATE)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e.enum(\"display_brightness\", ea.STATE_SET, [\"high\", \"medium\", \"low\"]).withDescription(\"Display brightness\"),\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"right\", \"down\", \"left\"]).withDescription(\"Screen orientation\"),\n            e\n                .enum(\"mode\", ea.STATE_SET, [\"comfort\", \"eco\"])\n                .withDescription(\n                    \"Hysteresis - comfort > switches off/on exactly at reached \" +\n                        \"temperature with valve smooth from 0 to 100%, eco > 0.5 degrees above or below, valve either 0 or 100%\",\n                ),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, null, tuya.valueConverter.thermostatSystemModeAndPreset(null)],\n                [1, \"system_mode\", tuya.valueConverter.thermostatSystemModeAndPreset(\"system_mode\")],\n                [1, \"preset\", tuya.valueConverter.thermostatSystemModeAndPreset(\"preset\")],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"running_state\", tuya.valueConverterBasic.lookup({heat: 1, idle: 0})],\n                [7, \"window\", tuya.valueConverterBasic.lookup({OPEN: 1, CLOSE: 0})],\n                [8, \"window_detection\", tuya.valueConverter.onOff],\n                [12, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [13, \"battery\", tuya.valueConverter.raw],\n                [14, \"alarm_switch\", tuya.valueConverter.onOff],\n                [15, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [16, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [17, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [18, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [19, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [20, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [21, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [22, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [23, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [101, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [108, \"position\", tuya.valueConverter.divideBy10],\n                [\n                    111,\n                    \"display_brightness\",\n                    tuya.valueConverterBasic.lookup({\n                        high: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        low: tuya.enum(2),\n                    }),\n                ],\n                [\n                    113,\n                    \"screen_orientation\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        right: tuya.enum(1),\n                        down: tuya.enum(2),\n                        left: tuya.enum(3),\n                    }),\n                ],\n                [\n                    114,\n                    \"mode\",\n                    tuya.valueConverterBasic.lookup({\n                        comfort: tuya.enum(0),\n                        eco: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_qyr2m29i\", \"_TZE204_ltwbm23f\"]),\n        model: \"TRV602Z\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve.\",\n        whiteLabel: [tuya.whitelabel(\"Moes\", \"TRV801Z\", \"Thermostatic radiator valve\", [\"_TZE204_qyr2m29i\", \"_TZE284_ltwbm23f\"])],\n        extend: [tuyaBase({dp: true})],\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.max_temperature(),\n            e.min_temperature(),\n            e.position(),\n            e.window_detection(),\n            e\n                .numeric(\"boost_timeset_countdown\", ea.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\n                    \"Setting \" +\n                        \"minimum 0 - maximum 120 minutes boost time. The boost function is activated. The remaining \" +\n                        \"time for the function will be counted down in minutes ( 120 to 0 ).\",\n                )\n                .withValueMin(0)\n                .withValueMax(120),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Antifreeze function\"),\n            e.binary(\"window\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status closed or open \"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-10, 10, 0.1, ea.STATE_SET)\n                .withPreset([\"off\", \"antifrost\", \"eco\", \"comfort\", \"auto\", \"on\"])\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withSystemMode([\"auto\", \"heat\", \"off\"], ea.STATE),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e.comfort_temperature().withValueMin(5).withValueMax(30).withDescription(\"Comfort mode temperature\"),\n            e.eco_temperature().withValueMin(5).withValueMax(30).withDescription(\"Eco mode temperature\"),\n            e.holiday_temperature().withValueMin(5).withValueMax(30).withDescription(\"Antifreeze mode temperature\"),\n            e.enum(\"display_brightness\", ea.STATE_SET, [\"high\", \"medium\", \"low\"]).withDescription(\"Display brightness\"),\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"down\"]).withDescription(\"Screen orientation\"),\n            e\n                .enum(\"hysteresis\", ea.STATE_SET, [\"comfort\", \"eco\"])\n                .withDescription(\n                    \"Hysteresis - comfort > switches off/on exactly at reached \" +\n                        \"temperature with valve smooth from 0 to 100%, eco > 0.5 degrees above or below, valve either 0 or 100%\",\n                ),\n            e.enum(\"motor_thrust\", ea.STATE_SET, [\"strong\", \"middle\", \"weak\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    null,\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        fromMap: {\n                            0: {deviceMode: \"off\", systemMode: \"off\", preset: \"off\"},\n                            1: {deviceMode: \"antifrost\", systemMode: \"auto\", preset: \"antifrost\"},\n                            2: {deviceMode: \"eco\", systemMode: \"auto\", preset: \"eco\"},\n                            3: {deviceMode: \"comfort\", systemMode: \"auto\", preset: \"comfort\"},\n                            4: {deviceMode: \"auto\", systemMode: \"auto\", preset: \"auto\"},\n                            5: {deviceMode: \"on\", systemMode: \"heat\", preset: \"on\"},\n                        },\n                    }),\n                ],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        toMap: {\n                            off: new tuya.Enum(0),\n                            antifrost: new tuya.Enum(1),\n                            eco: new tuya.Enum(2),\n                            comfort: new tuya.Enum(3),\n                            auto: new tuya.Enum(4),\n                            on: new tuya.Enum(5),\n                        },\n                    }),\n                ],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        toMap: {\n                            off: new tuya.Enum(0),\n                            auto: new tuya.Enum(4),\n                            heat: new tuya.Enum(5),\n                        },\n                    }),\n                ],\n                [3, \"running_state\", tuya.valueConverterBasic.lookup({heat: 1, idle: 0})],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [\n                    7,\n                    \"child_lock\",\n                    tuya.valueConverterBasic.lookup({\n                        LOCK: true,\n                        UNLOCK: false,\n                    }),\n                ],\n                [9, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [10, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [\n                    14,\n                    \"window_detection\",\n                    tuya.valueConverterBasic.lookup({\n                        ON: true,\n                        OFF: false,\n                    }),\n                ],\n                [\n                    15,\n                    \"window\",\n                    tuya.valueConverterBasic.lookup({\n                        CLOSE: tuya.enum(0),\n                        OPEN: tuya.enum(1),\n                    }),\n                ],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [102, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(1)],\n                [103, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(2)],\n                [104, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(3)],\n                [105, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(4)],\n                [106, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(5)],\n                [107, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(6)],\n                [108, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(7)],\n                [\n                    110,\n                    \"motor_thrust\",\n                    tuya.valueConverterBasic.lookup({\n                        strong: tuya.enum(0),\n                        middle: tuya.enum(1),\n                        weak: tuya.enum(2),\n                    }),\n                ],\n                [\n                    111,\n                    \"display_brightness\",\n                    tuya.valueConverterBasic.lookup({\n                        high: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        low: tuya.enum(2),\n                    }),\n                ],\n                [\n                    113,\n                    \"screen_orientation\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                    }),\n                ],\n                [114, \"position\", tuya.valueConverter.divideBy10],\n                [118, \"boost_timeset_countdown\", tuya.valueConverter.raw],\n                [119, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [120, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [121, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [122, \"frost_protection\", tuya.valueConverter.onOff],\n                [\n                    127,\n                    \"hysteresis\",\n                    tuya.valueConverterBasic.lookup({\n                        comfort: tuya.enum(0),\n                        eco: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_xalsoe3m\"]),\n        model: \"ZHT-002\",\n        vendor: \"Moes\",\n        description: \"ZHT series thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON/OFF\"),\n            e.child_lock(),\n            e.binary(\"system_mode\", ea.STATE_SET, \"Auto\", \"Manual\").withDescription(\"Manual = Manual or Schedule = Auto\"),\n            e.eco_mode(),\n            e.temperature_sensor_select([\"IN\", \"AL\", \"OU\"]).withLabel(\"Sensor\").withDescription(\"Choose which sensor to use. Default: AL\"),\n            e.enum(\"valve_state\", ea.STATE, [\"close\", \"open\"]).withDescription(\"State of the valve\"),\n            e\n                .text(\"workdays_schedule\", ea.STATE_SET)\n                .withDescription('Workdays schedule, 4 entries max, example: \"06:00/20°C 11:20/22°C 16:59/15°C 22:00/25°C\"'),\n            e.min_temperature().withValueMin(0).withValueMax(20),\n            e.max_temperature().withValueMin(20).withValueMax(50),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 0, 50, 1, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET),\n            e\n                .numeric(\"max_temperature_limit\", ea.STATE_SET)\n                .withDescription(\"Max temperature limit\")\n                .withValueMin(25)\n                .withValueMax(70)\n                .withValueStep(1),\n            e\n                .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                .withValueMax(5)\n                .withValueMin(1)\n                .withValueStep(1)\n                .withPreset(\"default\", 1, \"Default value\")\n                .withDescription(\"The difference between the local temperature that triggers heating and the set temperature\"),\n\n            e.enum(\"working_day\", ea.STATE_SET, [\"disabled\", \"5-2\", \"6-1\", \"7\"]).withDescription(\"Workday setting\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(1),\n                    }),\n                ],\n                [16, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [18, \"min_temperature\", tuya.valueConverter.raw],\n                [19, \"local_temperature_calibration\", tuya.valueConverter.localTemperatureCalibration],\n                [\n                    23,\n                    \"working_day\",\n                    tuya.valueConverterBasic.lookup((_, device) => {\n                        if (device.manufacturerName === \"_TZE204_xalsoe3m\") {\n                            return {\n                                disabled: tuya.enum(0),\n                                \"5-2\": tuya.enum(1),\n                                \"6-1\": tuya.enum(2),\n                                \"7\": tuya.enum(3),\n                            };\n                        }\n                        return {\n                            disabled: tuya.enum(0),\n                            \"5-2\": tuya.enum(2),\n                            \"6-1\": tuya.enum(1),\n                            \"7\": tuya.enum(3),\n                        };\n                    }),\n                ],\n                [\n                    32,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        IN: tuya.enum(0),\n                        AL: tuya.enum(2),\n                        OU: tuya.enum(1),\n                    }),\n                ],\n                [34, \"max_temperature\", tuya.valueConverter.raw],\n                [39, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [40, \"eco_mode\", tuya.valueConverter.onOff],\n                [\n                    47,\n                    \"valve_state\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        open: tuya.enum(1),\n                    }),\n                ],\n                [50, \"current_heating_setpoint\", tuya.valueConverter.raw],\n                [68, \"programming_mode\", tuya.valueConverter.raw],\n                [101, \"max_temperature_limit\", tuya.valueConverter.raw],\n                [102, \"deadzone_temperature\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_ymldrmzx\"]),\n        model: \"TRV603-WZ\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve.\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.window_detection(),\n            e.binary(\"window\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status closed or open \"),\n            e.enum(\"mode\", ea.STATE_SET, [\"auto\", \"manual\"]).withDescription(\"Mode\"),\n            e.binary(\"holiday_mode\", ea.STATE_SET, \"ON\", \"OFF\"),\n            e.binary(\"heating_stop\", ea.STATE_SET, \"ON\", \"OFF\"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-30, 30, 0.1, ea.STATE_SET),\n            e.comfort_temperature().withValueMin(5).withValueMax(30).withDescription(\"Comfort mode temperature\"),\n            e.eco_temperature().withValueMin(5).withValueMax(30).withDescription(\"Eco mode temperature\"),\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"right\", \"down\", \"left\"]).withDescription(\"Screen orientation\"),\n            tuya.exposes.frostProtection(),\n            e.binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\"),\n            e.numeric(\"boost_time\", ea.STATE_SET).withUnit(\"min\").withDescription(\"Countdown in minutes\").withValueMin(0).withValueMax(1000),\n            e.numeric(\"fault_code\", ea.STATE).withDescription(\"Raw fault code\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"mode\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(2),\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [\n                    7,\n                    \"child_lock\",\n                    tuya.valueConverterBasic.lookup({\n                        LOCK: true,\n                        UNLOCK: false,\n                    }),\n                ],\n                [14, \"window_detection\", tuya.valueConverter.onOff],\n                [\n                    15,\n                    \"window\",\n                    tuya.valueConverterBasic.lookup({\n                        CLOSE: tuya.enum(0),\n                        OPEN: tuya.enum(1),\n                    }),\n                ],\n                [21, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                [39, \"switch_scale\", tuya.valueConverter.raw],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [101, \"boost_heating\", tuya.valueConverter.onOff],\n                [102, \"boost_time\", tuya.valueConverter.countdown],\n                [103, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(1)],\n                [104, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(2)],\n                [105, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(3)],\n                [106, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(4)],\n                [107, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(5)],\n                [108, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(6)],\n                [109, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDP_TRV602Z_WithDayNumber(7)],\n                [110, \"holiday_mode\", tuya.valueConverter.onOff],\n                [\n                    111,\n                    \"screen_orientation\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        right: tuya.enum(1),\n                        down: tuya.enum(2),\n                        left: tuya.enum(3),\n                    }),\n                ],\n                [112, \"antifrost_temperature\", tuya.valueConverter.divideBy10],\n                [113, \"heating_stop\", tuya.valueConverter.onOff],\n                [114, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [115, \"programming_mode\", tuya.valueConverter.raw],\n                [116, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [117, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [118, \"fault_code\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0121\"],\n        model: \"TS0121_plug\",\n        description: \"10A UK or 16A EU smart plug\",\n        whiteLabel: [\n            {vendor: \"BlitzWolf\", model: \"BW-SHP13\"},\n            {vendor: \"Connecte\", model: \"4500990\"},\n            {vendor: \"Connecte\", model: \"4500991\"},\n            {vendor: \"Connecte\", model: \"4500992\"},\n            {vendor: \"Connecte\", model: \"4500993\"},\n        ],\n        vendor: \"Tuya\",\n        fromZigbee: [fz.on_off, fz.electrical_measurement, fz.metering, tuya.fz.power_outage_memory, tuya.fz.indicator_mode],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tuya.tz.backlight_indicator_mode_1],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acVoltageMultiplier: 1,\n                acVoltageDivisor: 1,\n                acCurrentMultiplier: 1,\n                acCurrentDivisor: 1000,\n                acPowerMultiplier: 1,\n                acPowerDivisor: 1,\n            });\n            try {\n                await reporting.currentSummDelivered(endpoint);\n                await reporting.rmsVoltage(endpoint, {change: 5});\n                await reporting.rmsCurrent(endpoint, {change: 50});\n                await reporting.activePower(endpoint, {change: 10});\n            } catch {\n                /* fails for some https://github.com/Koenkk/zigbee2mqtt/issues/11179\n                                and https://github.com/Koenkk/zigbee2mqtt/issues/16864 */\n            }\n            await endpoint.read(\"genOnOff\", [\"onOff\", \"moesStartUpOnOff\", \"tuyaBacklightMode\"]);\n        },\n        // This device doesn't support reporting correctly.\n        // https://github.com/Koenkk/zigbee-herdsman-converters/pull/1270\n        exposes: [\n            e.switch(),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            e.enum(\"power_outage_memory\", ea.ALL, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n            e.enum(\"indicator_mode\", ea.ALL, [\"off\", \"off/on\", \"on/off\"]).withDescription(\"LED indicator mode\"),\n        ],\n        extend: [tuya.modernExtend.electricityMeasurementPoll()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0111\", [\"_TYZB01_ymcdbl3u\"]),\n        model: \"TS0111_valve\",\n        vendor: \"Tuya\",\n        whiteLabel: [{vendor: \"Tuya\", model: \"SM-AW713Z\"}],\n        description: \"Smart water/gas valve\",\n        extend: [tuya.modernExtend.tuyaOnOff({indicatorMode: true})],\n    },\n    {\n        // Note: below you will find the TS011F_plug_2 and TS011F_plug_3. These are identified via a fingerprint and\n        // thus preferred above the TS011F_plug_1 if the fingerprint matches\n        zigbeeModel: [\"TS011F\"],\n        model: \"TS011F_plug_1\",\n        description: \"Smart plug (with power monitoring)\",\n        vendor: \"Tuya\",\n        whiteLabel: [\n            {vendor: \"LELLKI\", model: \"TS011F_plug\"},\n            {vendor: \"BlitzWolf\", model: \"BW-SHP15\"},\n            {vendor: \"BlitzWolf\", model: \"BW-SHP13\"},\n            {vendor: \"MatSee Plus\", model: \"PJ-ZSW01\"},\n            {vendor: \"MODEMIX\", model: \"MOD037\"},\n            {vendor: \"MODEMIX\", model: \"MOD048\"},\n            {vendor: \"Coswall\", model: \"CS-AJ-DE2U-ZG-11\"},\n            {vendor: \"Aubess\", model: \"TS011F_plug_1\"},\n            tuya.whitelabel(\"BSEED\", \"TS011F_plug_1_2\", \"Wall-mounted electrical EU/FR/UK socket with power monitoring\", [\n                \"_TZ3000_4ux0ondb\",\n                \"_TZ3000_b28wrpvx\",\n                \"_TZ3000_2uollq9d\",\n            ]),\n            tuya.whitelabel(\"BSEED\", \"_TZ3210_5ct6e7ye\", \"Wall-mounted electrical EU/FR/UK socket with power monitoring and USB\", [\n                \"_TZ3210_5ct6e7ye\",\n            ]),\n            tuya.whitelabel(\"Nous\", \"A1Z\", \"Smart plug (with power monitoring)\", [\"_TZ3000_2putqrmw\", \"_TZ3000_ksw8qtmt\"]),\n            tuya.whitelabel(\"Moes\", \"Moes_plug\", \"Smart plug (with power monitoring)\", [\"_TZ3000_yujkchbz\"]),\n            tuya.whitelabel(\"Moes\", \"ZK-EU\", \"Smart wallsocket (with power monitoring)\", [\"_TZ3000_ss98ec5d\"]),\n            tuya.whitelabel(\"Elivco\", \"LSPA9\", \"Smart plug (with power monitoring)\", [\"_TZ3000_okaz9tjs\"]),\n            tuya.whitelabel(\"PSMART\", \"T440\", \"Smart wallsocket (with power monitoring)\", [\"_TZ3000_y4ona9me\"]),\n            tuya.whitelabel(\"Nous\", \"A6Z\", \"Outdoor smart socket\", [\"_TZ3000_266azbg3\"]),\n            tuya.whitelabel(\"Nedis\", \"ZBPO130FWT\", \"Outdoor smart plug (with power monitoring)\", [\"_TZ3000_3ias4w4o\"]),\n            tuya.whitelabel(\"Nous\", \"A9Z\", \"Smart ZigBee Socket\", [\"_TZ3210_ddigca5n\"]),\n            tuya.whitelabel(\"Girier\", \"JR-ZPM01\", \"Smart Plug\", [\"_TZ3000_ww6drja5\"]),\n            tuya.whitelabel(\"Nous\", \"A7Z\", \"Smart ZigBee Socket\", [\"_TZ3210_rwmitwj4\"]),\n            tuya.whitelabel(\"Zbeacon\", \"TS011F_plug_1_1\", \"Smart plug (with power monitoring)\", [\"Zbeacon\"]),\n            tuya.whitelabel(\"NEO\", \"NAS-WR01B\", \"Smart plug (with electrical measurements)\", [\"_TZ3000_gjnozsaz\"]),\n        ],\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                electricalMeasurements: true,\n                electricalMeasurementsFzConverter: fzLocal.TS011F_electrical_measurement,\n                powerOutageMemory: true,\n                indicatorMode: true,\n                childLock: true,\n                onOffCountdown: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n\n            if (![\"_TZ3000_okaz9tjs\"].includes(device.manufacturerName)) {\n                await reporting.rmsVoltage(endpoint, {change: 5});\n            }\n\n            await reporting.rmsCurrent(endpoint, {change: 50});\n\n            if (![\"_TZ3000_0zfrhq4i\", \"_TZ3000_okaz9tjs\", \"_TZ3000_typdpbpg\", \"_TZ3000_ww6drja5\", \"Zbeacon\"].includes(device.manufacturerName)) {\n                // Gives INVALID_DATA_TYPE error for _TZ3000_0zfrhq4i (as well as a few others in issue 20028)\n                // https://github.com/Koenkk/zigbee2mqtt/discussions/19680#discussioncomment-7667035\n                // Don't do this for `_TZ3000_gjnozsaz` (was previously in the list, but removed after:\n                // https://github.com/Koenkk/zigbee2mqtt/issues/28729#issuecomment-3370261334\n                await reporting.activePower(endpoint, {change: 10});\n            }\n            await reporting.currentSummDelivered(endpoint);\n            const acCurrentDivisor = device.manufacturerName === \"_TZ3000_typdpbpg\" ? 2000 : 1000;\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            utils.attachOutputCluster(device, \"genOta\");\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\n            \"_TZ3000_hyfvrar3\",\n            \"_TZ3000_v1pdxuqq\",\n            \"_TZ3000_8a833yls\",\n            \"_TZ3000_bfn1w0mm\",\n            \"_TZ3000_nzkqcvvs\",\n            \"_TZ3000_rtcrrvia\",\n            \"_TZ3000_ysiog9xi\",\n            \"_TZ3000_o1jzcxou\",\n        ]),\n        model: \"TS011F_plug_2\",\n        description: \"Smart plug (without power monitoring)\",\n        vendor: \"Tuya\",\n        whiteLabel: [tuya.whitelabel(\"BSEED\", \"_TZ3000_o1jzcxou\", \"Wall-mounted electrical EU/FR/UK socket\", [\"_TZ3000_o1jzcxou\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOutageMemory: true,\n                indicatorMode: true,\n                childLock: true,\n                onOffCountdown: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: [\n            // https://github.com/Koenkk/zigbee2mqtt/issues/28729\n            {modelID: \"TS011F\", applicationVersion: 240, manufacturerName: \"_TZ3000_gjnozsaz\", priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 160, priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 100, priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 69, priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 68, priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 65, priority: -1},\n            {modelID: \"TS011F\", applicationVersion: 64, priority: -1},\n            {modelID: \"TS011F\", softwareBuildID: \"1.0.5\\u0000\", manufacturerName: \"_TZ3000_cehuw1lw\", priority: -1},\n        ],\n        model: \"TS011F_plug_3\",\n        description: \"Smart plug (with power monitoring by polling)\",\n        vendor: \"Tuya\",\n        whiteLabel: [\n            {vendor: \"VIKEFON\", model: \"TS011F\"},\n            {vendor: \"BlitzWolf\", model: \"BW-SHP15\"},\n            {vendor: \"AVATTO\", model: \"MIUCOT10Z\"},\n            {vendor: \"NEO\", model: \"PLUG-001SPB2\"},\n        ],\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                electricalMeasurements: true,\n                powerOutageMemory: true,\n                indicatorMode: true,\n                childLock: true,\n            }),\n            tuya.modernExtend.electricityMeasurementPoll({\n                metering: (device) => [100, 160].includes(device.applicationVersion) || [\"1.0.5\\u0000\"].includes(device.softwareBuildID), // polling for energy\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            utils.attachOutputCluster(device, \"genOta\");\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_in5s3wn1\", \"_TZ3000_wbloefbf\"]),\n        model: \"TS011F_switch_5_gang\",\n        description: \"2 gang 2 usb 1 wall ac outlet\",\n        whiteLabel: [{vendor: \"Milfra\", model: \"M11Z\"}],\n        vendor: \"Tuya\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOutageMemory: true,\n                childLock: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\", \"l5\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(5), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_dlug3kbc\"]),\n        model: \"TS011F_3_gang\",\n        description: \"3 gang wall ac outlet\",\n        vendor: \"Tuya\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOutageMemory: true,\n                childLock: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_0zaf1cr8\", \"_TZE204_ntcy3xu1\", \"_TZE284_0zaf1cr8\"]),\n        model: \"TS0601_smoke_1\",\n        vendor: \"Tuya\",\n        description: \"Smoke sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.smoke(), e.tamper(), e.battery_low()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [4, \"tamper\", tuya.valueConverter.raw],\n                [14, \"battery_low\", tuya.valueConverter.trueFalse0],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Nous\", \"E8\", \"Smoke sensor\", [\"_TZE200_0zaf1cr8\", \"_TZE284_0zaf1cr8\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ntcy3xu1\"]),\n        model: \"TS0601_smoke_6\",\n        vendor: \"Tuya\",\n        description: \"Smoke sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.smoke(), e.tamper(), tuya.exposes.batteryState()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [4, \"tamper\", tuya.valueConverter.raw],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_ai4rqhky\"]),\n        model: \"HS2SA-1\",\n        vendor: \"Heiman\",\n        description: \"Photoelectric Smoke Alarm\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.smoke(),\n            e.battery(),\n            tuya.exposes.batteryState(),\n            e.binary(\"silence\", ea.STATE_SET, \"ON\", \"OFF\"),\n            e.enum(\"self_test\", ea.STATE, [\"checking\", \"check_success\", \"check_failure\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [9, \"self_test\", tuya.valueConverterBasic.lookup({checking: 0, check_success: 1, check_failure: 2})],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [16, \"silence\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_m9skfctm\", \"_TZE200_rccxox8p\", \"_TZE284_rccxox8p\"]),\n        model: \"PA-44Z\",\n        vendor: \"Tuya\",\n        description: \"Photoelectric smoke detector\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.smoke(),\n            e.battery(),\n            tuya.exposes.silence(),\n            e.test(),\n            e.numeric(\"smoke_concentration\", ea.STATE).withUnit(\"ppm\").withDescription(\"Parts per million of smoke detected\"),\n            e.binary(\"device_fault\", ea.STATE, true, false).withDescription(\"Indicates a fault with the device\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [2, \"smoke_concentration\", tuya.valueConverter.divideBy10],\n                [11, \"device_fault\", tuya.valueConverter.raw],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [16, \"silence\", tuya.valueConverter.raw],\n                [101, \"test\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ux5v4dbd\"]),\n        vendor: \"Tuya\",\n        model: \"TS0601_smoke_3\",\n        description: \"Photoelectric smoke detector\",\n        whiteLabel: [{vendor: \"KnockautX\", model: \"SMOAL024\"}],\n        configure: tuya.configureMagicPacket,\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [e.smoke(), tuya.exposes.batteryState()],\n        meta: {\n            tuyaDatapoints: [\n                /**\n                 * According to the Vendor \"KnockautX / Brelag AG\" DP 16 \"muffling\"\n                 * is supported as well. But it was not possible to verify this using\n                 * SMOLA024 devices - therefore it is not included in the device definition.\n                 *\n                 * Data Transfer Type: Send and Report\n                 * Data Type: Bool\n                 * muffling: 16,\n                 */\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"5p1vj8r\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_t5p1vj8r\", \"_TZE200_uebojraa\", \"_TZE200_vzekyi4c\", \"_TZE200_yh7aoahi\", \"_TZE200_dq1mfjug\"]),\n        model: \"TS0601_smoke_4\",\n        vendor: \"Tuya\",\n        description: \"Smoke sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [e.smoke(), e.battery(), tuya.exposes.batteryState()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [15, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ytibqbra\"]),\n        model: \"TS0601_smoke_5\",\n        vendor: \"Tuya\",\n        description: \"Smoke sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.smoke(),\n            e.tamper(),\n            e.battery(),\n            tuya.exposes.faultAlarm(),\n            tuya.exposes.silence(),\n            e.binary(\"alarm\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enable the alarm\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [4, \"tamper\", tuya.valueConverter.raw],\n                [11, \"fault_alarm\", tuya.valueConverter.trueFalse1],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [16, \"silence\", tuya.valueConverter.raw],\n                [17, \"alarm\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_o9ofysmo\", \"_TZE284_xc3vwx5a\"]),\n        model: \"ZS-301Z\",\n        vendor: \"Arteco\",\n        description: \"Soil moisture sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.enum(\"battery_state\", ea.STATE, [\"low\", \"middle\", \"high\"]).withDescription(\"low: 1-25%, middle: 26-50%, high: 51-100%\"),\n            e.temperature(),\n            e.soil_moisture(),\n            e.humidity(),\n            e.illuminance(),\n            e\n                .numeric(\"humidity_calibration\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withDescription(\"Adjust humidity\")\n                .withValueMin(-30)\n                .withValueMax(30)\n                .withValueStep(1),\n            e\n                .numeric(\"report_interval\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Report interval\")\n                .withValueMin(30)\n                .withValueMax(1200)\n                .withValueStep(30),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.divideBy10],\n                [14, \"battery_state\", tuya.valueConverterBasic.lookup({low: tuya.enum(0), middle: tuya.enum(1), high: tuya.enum(2)})],\n                [101, \"humidity\", tuya.valueConverter.raw],\n                [102, \"illuminance\", tuya.valueConverter.raw],\n                [103, \"humidity_calibration\", tuya.valueConverter.raw],\n                [104, \"report_interval\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_e2bedvo9\", \"_TZE200_dnz6yvl2\", \"_TZE284_6ycgarab\", \"_TZE284_e2bedvo9\"]),\n        model: \"ZSS-QY-SSD-A-EN\",\n        vendor: \"Tuya\",\n        description: \"Smart smoke alarm\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.smoke(),\n            tuya.exposes.faultAlarm(),\n            tuya.exposes.batteryState(),\n            e.battery(),\n            tuya.exposes.silence(),\n            tuya.exposes.selfTest(),\n            e.numeric(\"smoke_concentration\", ea.STATE).withUnit(\"ppm\").withDescription(\"Parts per million of smoke detected\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"smoke\", tuya.valueConverter.trueFalse0],\n                [2, \"smoke_concentration\", tuya.valueConverter.divideBy10],\n                [11, \"fault_alarm\", tuya.valueConverter.trueFalse1],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [16, \"silence\", tuya.valueConverter.raw],\n                [17, \"self_test\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_5d3vhjro\"]),\n        model: \"SA12IZL\",\n        vendor: \"Tuya\",\n        description: \"Smart smoke alarm\",\n        meta: {timeout: 30000, disableDefaultResponse: true},\n        fromZigbee: [legacy.fromZigbee.SA12IZL],\n        toZigbee: [legacy.toZigbee.SA12IZL_silence_siren, legacy.toZigbee.SA12IZL_alarm],\n        exposes: [\n            e.battery(),\n            e.binary(\"smoke\", ea.STATE, true, false).withDescription(\"Smoke alarm status\"),\n            e.enum(\"battery_level\", ea.STATE, [\"low\", \"middle\", \"high\"]).withDescription(\"Battery level state\"),\n            e.binary(\"alarm\", ea.STATE_SET, true, false).withDescription(\"Enable the alarm\"),\n            e.binary(\"silence_siren\", ea.STATE_SET, true, false).withDescription(\"Silence the siren\"),\n        ],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_cjbofhxw\", \"_TZE284_cjbofhxw\"]),\n        model: \"PJ-MGW1203\",\n        vendor: \"Tuya\",\n        description: \"Clamp meter\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\"})],\n        exposes: [e.current(), e.power(), e.voltage(), e.energy()],\n        meta: {\n            tuyaDatapoints: [\n                [18, \"current\", tuya.valueConverter.divideBy1000],\n                [19, \"power\", tuya.valueConverter.divideBy10],\n                [20, \"voltage\", tuya.valueConverter.divideBy10],\n                [101, \"energy\", tuya.valueConverter.divideBy1000],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"PJ-1203-W\", \"Electricity energy monitor\", [\"_TZE284_cjbofhxw\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_bkkmqmyo\", \"_TZE200_eaac7dkw\", \"_TZE204_bkkmqmyo\"]),\n        model: \"TS0601_din_1\",\n        vendor: \"Tuya\",\n        description: \"Zigbee DIN energy meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            e.ac_frequency(),\n            e.energy(),\n            e.power(),\n            e.power_factor().withUnit(\"%\"),\n            e.voltage(),\n            e.current(),\n            e.produced_energy(),\n            e.power_reactive(),\n            e.numeric(\"energy_reactive\", ea.STATE).withUnit(\"kVArh\").withDescription(\"Sum of reactive energy\"),\n            e.numeric(\"total_energy\", ea.STATE).withUnit(\"kWh\").withDescription(\"Total consumed and produced energy\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant1], // voltage and current\n                [16, \"state\", tuya.valueConverter.onOff],\n                [101, \"total_energy\", tuya.valueConverter.divideBy100], // total energy produced + consumed\n                [102, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [103, \"power\", tuya.valueConverter.raw],\n                [105, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [109, \"energy_reactive\", tuya.valueConverter.divideBy100], // reactive energy in VArh\n                [110, \"power_reactive\", tuya.valueConverter.raw], // reactive power\n                [111, \"power_factor\", tuya.valueConverter.divideBy10],\n                // Ignored for now; we don't know what the values mean\n                [9, null, null], // Fault - we don't know the possible values here\n                [17, null, null], // Alarm set1 - value seems garbage \"AAAAAAAAAAAAAABkAAEOAACqAAAAAAAKAAAAAAAA\"\n                [18, null, null], // 18 - Alarm set2 - value seems garbage \"AAUAZAAFAB4APAAAAAAAAAA=\"\n            ],\n        },\n        whiteLabel: [\n            {vendor: \"Tuya\", model: \"RC-MCB\"},\n            tuya.whitelabel(\"Hiking\", \"DDS238-2\", \"Single phase DIN-rail energy meter with switch function\", [\n                \"_TZE200_bkkmqmyo\",\n                \"_TZE204_bkkmqmyo\",\n            ]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_m64smti7\"]),\n        model: \"RMDZB-1PNL63\",\n        vendor: \"TNCE\",\n        description: \"Zigbee DIN single phase energy meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            e.energy(),\n            e\n                .enum(\"fault\", ea.STATE, [\n                    \"clear\",\n                    \"short_circuit_alarm\",\n                    \"surge_alarm\",\n                    \"overload_alarm\",\n                    \"leakagecurr_alarm\",\n                    \"temp_dif_fault\",\n                    \"fire_alarm\",\n                    \"high_power_alarm\",\n                    \"self_test_alarm\",\n                    \"ov_cr\",\n                    \"unbalance_alarm\",\n                    \"ov_vol\",\n                    \"undervoltage_alarm\",\n                    \"miss_phase_alarm\",\n                    \"outage_alarm\",\n                    \"magnetism_alarm\",\n                    \"credit_alarm\",\n                    \"no_balance_alarm\",\n                ])\n                .withDescription(\"Fault status of the device (clear = nothing)\"),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            e.temperature(),\n            e\n                .binary(\"over_current_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"over_current_threshold\", ea.STATE_SET)\n                .withUnit(\"A\")\n                .withDescription(\"Setup the value on the device\")\n                .withValueMin(1)\n                .withValueMax(63),\n            e\n                .binary(\"over_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(250)\n                .withValueMax(300),\n            e\n                .binary(\"under_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(150)\n                .withValueMax(200),\n            e\n                .binary(\"high_temperature_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"high_temperature_threshold\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(40)\n                .withValueMax(100),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")],\n                [\n                    9,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        short_circuit_alarm: 1,\n                        surge_alarm: 2,\n                        overload_alarm: 4,\n                        leakagecurr_alarm: 8,\n                        temp_dif_fault: 16,\n                        fire_alarm: 32,\n                        high_power_alarm: 64,\n                        self_test_alarm: 128,\n                        ov_cr: 256,\n                        unbalance_alarm: 512,\n                        ov_vol: 1024,\n                        undervoltage_alarm: 2048,\n                        miss_phase_alarm: 4096,\n                        outage_alarm: 8192,\n                        magnetism_alarm: 16384,\n                        credit_alarm: 32768,\n                        no_balance_alarm: 65536,\n                    }),\n                ],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [17, null, tuya.valueConverter.threshold_2],\n                [17, \"high_temperature_threshold\", tuya.valueConverter.threshold_2],\n                [17, \"high_temperature_breaker\", tuya.valueConverter.threshold_2],\n                [18, null, tuya.valueConverter.threshold_3],\n                [18, \"over_current_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"over_current_breaker\", tuya.valueConverter.threshold_3],\n                [18, \"over_voltage_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"over_voltage_breaker\", tuya.valueConverter.threshold_3],\n                [18, \"under_voltage_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"under_voltage_breaker\", tuya.valueConverter.threshold_3],\n                [103, \"temperature\", tuya.valueConverter.raw],\n                // Ignored for now; we don't know what the values mean\n                [11, null, null], // Switch prepayment\n                [12, null, null], // Energy reset\n                [13, null, null], // Balance enertgy\n                [14, null, null], // Charge energy\n                [105, null, null], // Countdown\n                [106, null, null], // Cycle time\n            ],\n        },\n        whiteLabel: [{vendor: \"TNCE\", model: \"RMDZB-1PNL63\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_wbhaespm\", \"_TZE200_wbhaespm\", \"_TZE284_wbhaespm\"]),\n        model: \"STB3L-125-ZJ\",\n        vendor: \"SUTON\",\n        description: \"Zigbee DIN RCBO energy meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            e.energy(),\n            e\n                .enum(\"fault\", ea.STATE, [\n                    \"clear\",\n                    \"short_circuit_alarm\",\n                    \"surge_alarm\",\n                    \"overload_alarm\",\n                    \"leakagecurr_alarm\",\n                    \"temp_dif_fault\",\n                    \"fire_alarm\",\n                    \"high_power_alarm\",\n                    \"self_test_alarm\",\n                    \"ov_cr\",\n                    \"unbalance_alarm\",\n                    \"ov_vol\",\n                    \"undervoltage_alarm\",\n                    \"miss_phase_alarm\",\n                    \"outage_alarm\",\n                    \"magnetism_alarm\",\n                    \"credit_alarm\",\n                    \"no_balance_alarm\",\n                ])\n                .withDescription(\"Fault status of the device (clear = nothing)\"),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.temperature(),\n            e.binary(\"leakage_test\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn ON to perform a leagage test\"),\n            e\n                .binary(\"over_current_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"over_current_threshold\", ea.STATE_SET)\n                .withUnit(\"A\")\n                .withDescription(\"Setup the value on the device\")\n                .withValueMin(1)\n                .withValueMax(63),\n            e\n                .binary(\"over_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(250)\n                .withValueMax(300),\n            e\n                .binary(\"under_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(150)\n                .withValueMax(200),\n            e\n                .binary(\"insufficient_balance_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"insufficient_balance_threshold\", ea.STATE_SET)\n                .withUnit(\"kWh\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(1)\n                .withValueMax(65535),\n            e\n                .binary(\"overload_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"overload_threshold\", ea.STATE_SET)\n                .withUnit(\"kW\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(1)\n                .withValueMax(25),\n            e\n                .binary(\"leakage_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"leakage_threshold\", ea.STATE_SET)\n                .withUnit(\"mA\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(10)\n                .withValueMax(90),\n            e\n                .binary(\"high_temperature_breaker\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will turn off when threshold reached\"),\n            e\n                .numeric(\"high_temperature_threshold\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(40)\n                .withValueMax(100),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")],\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"b\")],\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"c\")],\n                [\n                    9,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        short_circuit_alarm: 1,\n                        surge_alarm: 2,\n                        overload_alarm: 4,\n                        leakagecurr_alarm: 8,\n                        temp_dif_fault: 16,\n                        fire_alarm: 32,\n                        high_power_alarm: 64,\n                        self_test_alarm: 128,\n                        ov_cr: 256,\n                        unbalance_alarm: 512,\n                        ov_vol: 1024,\n                        undervoltage_alarm: 2048,\n                        miss_phase_alarm: 4096,\n                        outage_alarm: 8192,\n                        magnetism_alarm: 16384,\n                        credit_alarm: 32768,\n                        no_balance_alarm: 65536,\n                    }),\n                ],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [17, null, tuya.valueConverter.threshold_2],\n                [17, \"overload_breaker\", tuya.valueConverter.threshold_2],\n                [17, \"overload_threshold\", tuya.valueConverter.threshold_2],\n                [17, \"leakage_threshold\", tuya.valueConverter.threshold_2],\n                [17, \"leakage_breaker\", tuya.valueConverter.threshold_2],\n                [17, \"high_temperature_threshold\", tuya.valueConverter.threshold_2],\n                [17, \"high_temperature_breaker\", tuya.valueConverter.threshold_2],\n                [18, null, tuya.valueConverter.threshold_3],\n                [18, \"over_current_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"over_current_breaker\", tuya.valueConverter.threshold_3],\n                [18, \"over_voltage_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"over_voltage_breaker\", tuya.valueConverter.threshold_3],\n                [18, \"under_voltage_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"under_voltage_breaker\", tuya.valueConverter.threshold_3],\n                [18, \"insufficient_balance_threshold\", tuya.valueConverter.threshold_3],\n                [18, \"insufficient_balance_breaker\", tuya.valueConverter.threshold_3],\n                [21, \"leakage_test\", tuya.valueConverter.onOff], // Leakage test\n                [102, \"temperature\", tuya.valueConverter.divideBy10],\n                // Ignored for now; we don't know what the values mean\n                [12, null, null], // Clear energy`\n                [13, null, null],\n                [14, null, null], // Leakage current\n                [15, null, null],\n            ],\n        },\n        whiteLabel: [{vendor: \"SUTON\", model: \"STB3L-125/ZJ\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_lsanae15\", \"_TZE204_lsanae15\"]),\n        model: \"TS0601_din_2\",\n        vendor: \"Tuya\",\n        description: \"Zigbee DIN energy meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            e.energy(),\n            e.power(),\n            e.voltage(),\n            e.current(),\n            e\n                .enum(\"fault\", ea.STATE, [\n                    \"clear\",\n                    \"over_current_threshold\",\n                    \"over_power_threshold\",\n                    \"over_voltage threshold\",\n                    \"wrong_frequency_threshold\",\n                ])\n                .withDescription(\"Fault status of the device (clear = nothing)\"),\n            e.enum(\"threshold_1\", ea.STATE, [\"not_set\", \"over_current_threshold\", \"over_voltage_threshold\"]).withDescription(\"State of threshold_1\"),\n            e\n                .binary(\"threshold_1_protection\", ea.STATE, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will be off when threshold reached\"),\n            e\n                .numeric(\"threshold_1_value\", ea.STATE)\n                .withDescription(\"Can be in Volt or Ampere depending on threshold setting. Setup the value on the device\"),\n            e.enum(\"threshold_2\", ea.STATE, [\"not_set\", \"over_current_threshold\", \"over_voltage_threshold\"]).withDescription(\"State of threshold_2\"),\n            e\n                .binary(\"threshold_2_protection\", ea.STATE, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will be off when threshold reached\"),\n            e.numeric(\"threshold_2_value\", ea.STATE).withDescription(\"Setup value on the device\"),\n            e.binary(\"clear_fault\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn ON to clear last the fault\"),\n            e.text(\"meter_id\", ea.STATE).withDescription(\"Meter ID (ID of device)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [3, null, null], // Monthly, but sends data only after request\n                [4, null, null], // Dayly, but sends data only after request\n                [6, null, tuya.valueConverter.phaseVariant2], // voltage and current\n                [\n                    10,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        over_current_threshold: 1,\n                        over_power_threshold: 2,\n                        over_voltage_threshold: 4,\n                        wrong_frequency_threshold: 8,\n                    }),\n                ],\n                [11, null, null], // Frozen - strange function, in native app - nothing is clear\n                [16, \"state\", tuya.valueConverter.onOff],\n                [17, null, tuya.valueConverter.threshold], // It's settable, but can't write converter\n                [18, \"meter_id\", tuya.valueConverter.raw],\n                [20, \"clear_fault\", tuya.valueConverter.onOff], // Clear fault\n                [21, null, null], // Forward Energy T1 - don't know what this\n                [22, null, null], // Forward Energy T2 - don't know what this\n                [23, null, null], // Forward Energy T3 - don't know what this\n                [24, null, null], // Forward Energy T4 - don't know what this\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"MatSee Plus\", \"DAC2161C\", \"Smart Zigbee energy meter 80A din rail\", [\"_TZE200_lsanae15\", \"_TZE204_lsanae15\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_rhblgy0z\", \"_TZE204_rhblgy0z\"]),\n        model: \"TS0601_din_3\",\n        vendor: \"Tuya\",\n        description: \"Zigbee DIN energy meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [{vendor: \"XOCA\", model: \"DAC2161C\"}],\n        exposes: [\n            tuya.exposes.switch(),\n            e.energy(),\n            e.produced_energy(),\n            e.power(),\n            e.voltage(),\n            e.current(),\n            e\n                .enum(\"fault\", ea.STATE, [\n                    \"clear\",\n                    \"over_current_threshold\",\n                    \"over_power_threshold\",\n                    \"over_voltage threshold\",\n                    \"wrong_frequency_threshold\",\n                ])\n                .withDescription(\"Fault status of the device (clear = nothing)\"),\n            e.enum(\"threshold_1\", ea.STATE, [\"not_set\", \"over_current_threshold\", \"over_voltage_threshold\"]).withDescription(\"State of threshold_1\"),\n            e\n                .binary(\"threshold_1_protection\", ea.STATE, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will be off when threshold reached\"),\n            e\n                .numeric(\"threshold_1_value\", ea.STATE)\n                .withDescription(\"Can be in Volt or Ampere depending on threshold setting. Setup the value on the device\"),\n            e.enum(\"threshold_2\", ea.STATE, [\"not_set\", \"over_current_threshold\", \"over_voltage_threshold\"]).withDescription(\"State of threshold_2\"),\n            e\n                .binary(\"threshold_2_protection\", ea.STATE, \"ON\", \"OFF\")\n                .withDescription(\"OFF - alarm only, ON - relay will be off when threshold reached\"),\n            e.numeric(\"threshold_2_value\", ea.STATE).withDescription(\"Setup value on the device\"),\n            e.binary(\"clear_fault\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn ON to clear last the fault\"),\n            e.text(\"meter_id\", ea.STATE).withDescription(\"Meter ID (ID of device)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [3, null, null], // Monthly, but sends data only after request\n                [4, null, null], // Dayly, but sends data only after request\n                [6, null, tuya.valueConverter.phaseVariant2], // voltage and current\n                [\n                    10,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        over_current_threshold: 1,\n                        over_power_threshold: 2,\n                        over_voltage_threshold: 4,\n                        wrong_frequency_threshold: 8,\n                    }),\n                ],\n                [11, null, null], // Frozen - strange function, in native app - nothing is clear\n                [16, \"state\", tuya.valueConverter.onOff],\n                [17, null, tuya.valueConverter.threshold], // It's settable, but can't write converter\n                [18, \"meter_id\", tuya.valueConverter.raw],\n                [20, \"clear_fault\", tuya.valueConverter.onOff], // Clear fault\n                [21, null, null], // Forward Energy T1 - don't know what this\n                [22, null, null], // Forward Energy T2 - don't know what this\n                [23, null, null], // Forward Energy T3 - don't know what this\n                [24, null, null], // Forward Energy T4 - don't know what this\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_byzdayie\", \"_TZE200_fsb6zw01\", \"_TZE200_ewxhg6o9\"]),\n        model: \"TS0601_din\",\n        vendor: \"Tuya\",\n        description: \"Zigbee smart energy meter DDS238-2 Zigbee\",\n        fromZigbee: [legacy.fromZigbee.tuya_dinrail_switch],\n        toZigbee: [legacy.toZigbee.tuya_switch_state],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        exposes: [e.switch().setAccess(\"state\", ea.STATE_SET), e.voltage(), e.power(), e.current(), e.energy()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS1101\", [\"_TZ3000_xfs39dbf\"]),\n        model: \"TS1101_dimmer_module_1ch\",\n        vendor: \"Tuya\",\n        description: \"Zigbee dimmer module 1 channel\",\n        extend: [tuyaLight({minBrightness: \"attribute\"})],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS1101\", [\"_TZ3000_7ysdnebc\"]),\n        model: \"TS1101_dimmer_module_2ch\",\n        vendor: \"Tuya\",\n        description: \"Zigbee dimmer module 2 channel\",\n        whiteLabel: [{vendor: \"OXT\", model: \"SWTZ25\"}],\n        extend: [\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2}}),\n            tuyaLight({\n                minBrightness: \"attribute\",\n                endpointNames: [\"l1\", \"l2\"],\n                configureReporting: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n        },\n    },\n    {\n        zigbeeModel: [\"RH3001\"],\n        fingerprint: [\n            {\n                type: \"EndDevice\",\n                manufacturerID: 4098,\n                applicationVersion: 66,\n                endpoints: [\n                    {\n                        ID: 1,\n                        profileID: 260,\n                        deviceID: 1026,\n                        inputClusters: [0, 10, 1, 1280],\n                        outputClusters: [25],\n                    },\n                ],\n            },\n        ],\n        model: \"SNTZ007\",\n        vendor: \"Tuya\",\n        description: \"Rechargeable Zigbee contact sensor\",\n        fromZigbee: [fz.ias_contact_alarm_1, fz.battery],\n        toZigbee: [],\n        exposes: [e.contact(), e.battery_low(), e.tamper(), e.battery()],\n        whiteLabel: [{vendor: \"BlitzWolf\", model: \"BW-IS2\"}],\n    },\n    {\n        zigbeeModel: [\"RH3040\"],\n        model: \"RH3040\",\n        vendor: \"Tuya\",\n        description: \"PIR sensor\",\n        fromZigbee: [fz.battery, fz.ias_occupancy_alarm_1],\n        toZigbee: [],\n        whiteLabel: [\n            {vendor: \"Samotech\", model: \"SM301Z\"},\n            {vendor: \"Nedis\", model: \"ZBSM10WT\"},\n        ],\n        exposes: [e.battery(), e.occupancy(), e.battery_low(), e.tamper()],\n    },\n    {\n        zigbeeModel: [\"TS0115\"],\n        model: \"TS0115\",\n        vendor: \"Tuya\",\n        description: \"Multiprise with 4 AC outlets and 2 USB super charging ports (10A or 16A)\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\", \"l5\"],\n            }),\n        ],\n        whiteLabel: [{vendor: \"UseeLink\", model: \"SM-SO306E/K/M\"}],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 7};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(7), coordinatorEndpoint, [\"genOnOff\"]);\n            await device.getEndpoint(1).read(\"genOnOff\", [\"onOff\", \"moesStartUpOnOff\"]);\n            await device.getEndpoint(2).read(\"genOnOff\", [\"onOff\"]);\n            await device.getEndpoint(3).read(\"genOnOff\", [\"onOff\"]);\n            await device.getEndpoint(4).read(\"genOnOff\", [\"onOff\"]);\n            await device.getEndpoint(7).read(\"genOnOff\", [\"onOff\"]);\n        },\n    },\n    {\n        zigbeeModel: [\"RH3052\"],\n        model: \"TT001ZAV20\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        fromZigbee: [fz.humidity, fz.temperature, fz.battery],\n        toZigbee: [],\n        exposes: [e.humidity(), e.temperature(), e.battery()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0011\", [\"_TZ3000_l8fsgo6p\"]),\n        zigbeeModel: [\"TS0011\"],\n        model: \"TS0011\",\n        vendor: \"Tuya\",\n        description: \"Smart light switch - 1 gang\",\n        extend: [tuya.modernExtend.tuyaOnOff({backlightModeOffNormalInverted: true})],\n        whiteLabel: [\n            {vendor: \"Vrey\", model: \"VR-X712U-0013\"},\n            {vendor: \"TUYATEC\", model: \"GDKES-01TZXD\"},\n            {\n                vendor: \"Lonsonho\",\n                model: \"QS-Zigbee-S05-L\",\n                description: \"1 gang smart switch module without neutral wire\",\n            },\n            {vendor: \"Mercator Ikuü\", model: \"SSW01\"},\n            tuya.whitelabel(\"Nous\", \"LZ3\", \"Smart water/gas valve\", [\"_TZ3000_abjodzas\"]),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            // Reports itself as battery which is not correct: https://github.com/Koenkk/zigbee2mqtt/issues/6190\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0011\", [\"_TZ3000_qmi1cfuq\", \"_TZ3000_txpirhfq\", \"_TZ3000_ji4araar\"]),\n        model: \"TS0011_switch_module\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch module - (without neutral)\",\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true})],\n        whiteLabel: [\n            {vendor: \"AVATTO\", model: \"1gang N-ZLWSM01\"},\n            {vendor: \"SMATRUL\", model: \"TMZ02L-16A-W\"},\n            {vendor: \"Aubess\", model: \"TMZ02L-16A-B\"},\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        zigbeeModel: [\"TS0012\"],\n        model: \"TS0012\",\n        vendor: \"Tuya\",\n        description: \"Smart light switch - 2 gang\",\n        whiteLabel: [\n            {vendor: \"Vrey\", model: \"VR-X712U-0013\"},\n            {vendor: \"TUYATEC\", model: \"GDKES-02TZXD\"},\n            {vendor: \"Earda\", model: \"ESW-2ZAA-EU\"},\n            {vendor: \"Moes\", model: \"ZS-US2-BK-MS\"},\n            tuya.whitelabel(\"Moes\", \"ZS-EUB_2gang\", \"Smart light switch - 2 gang\", [\"_TZ3000_18ejxno0\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                backlightModeOffNormalInverted: true,\n                endpoints: [\"left\", \"right\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {left: 1, right: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0012\", [\"_TZ3000_jl7qyupf\", \"_TZ3000_nPGIPl5D\", \"_TZ3000_kpatq5pq\", \"_TZ3000_ljhbw1c9\", \"_TZ3000_4zf0crgo\"]),\n        model: \"TS0012_switch_module\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch module - (without neutral)\",\n        whiteLabel: [\n            {vendor: \"AVATTO\", model: \"2gang N-ZLWSM01\"},\n            tuya.whitelabel(\"AVATTO\", \"LZWSM16-2\", \"2 gang switch module - (without neutral)\", [\"_TZ3000_kpatq5pq\", \"_TZ3000_ljhbw1c9\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                onOffCountdown: true,\n                endpoints: [\"left\", \"right\"],\n            }),\n            m.forcePowerSource({powerSource: \"Mains (single phase)\"}),\n        ],\n        endpoint: (device) => {\n            return {left: 1, right: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        zigbeeModel: [\"TS0013\"],\n        model: \"TS0013\",\n        vendor: \"Tuya\",\n        description: \"Smart light switch - 3 gang without neutral wire\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                backlightModeOffNormalInverted: true,\n                endpoints: [\"left\", \"center\", \"right\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {left: 1, center: 2, right: 3};\n        },\n        whiteLabel: [{vendor: \"TUYATEC\", model: \"GDKES-03TZXD\"}],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            try {\n                for (const ID of [1, 2, 3]) {\n                    const endpoint = device.getEndpoint(ID);\n                    await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n                }\n            } catch {\n                // Fails for some: https://github.com/Koenkk/zigbee2mqtt/issues/4872\n            }\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0013\", [\"_TZ3000_ypgri8yz\", \"_TZ3000_sznawwyw\"]),\n        model: \"TS0013_switch_module\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch module - (without neutral)\",\n        whiteLabel: [\n            {vendor: \"AVATTO\", model: \"3gang N-ZLWSM01\"},\n            tuya.whitelabel(\"AVATTO\", \"LZWSM16-3\", \"3 gang switch module - (without neutral)\", [\"_TZ3000_sznawwyw\"]),\n            tuya.whitelabel(\"Girier\", \"ZB08\", \"3 Channel Switch Module-L - (No Neutral Wire)\", [\"_TZ3000_ypgri8yz\"]),\n        ],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                onOffCountdown: true,\n                endpoints: [\"left\", \"center\", \"right\"],\n            }),\n            m.forcePowerSource({powerSource: \"Mains (single phase)\"}),\n        ],\n        endpoint: (device) => {\n            return {left: 1, center: 2, right: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            try {\n                for (const ID of [1, 2, 3]) {\n                    const endpoint = device.getEndpoint(ID);\n                    await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n                }\n            } catch {\n                // Fails for some: https://github.com/Koenkk/zigbee2mqtt/issues/4872\n            }\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        zigbeeModel: [\"TS0014\"],\n        model: \"TS0014\",\n        vendor: \"Tuya\",\n        description: \"Smart light switch - 4 gang without neutral wire\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                backlightModeLowMediumHigh: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        whiteLabel: [\n            {vendor: \"TUYATEC\", model: \"GDKES-04TZXD\"},\n            {vendor: \"Vizo\", model: \"VZ-222S\"},\n            {vendor: \"MakeGood\", model: \"MG-ZG04W/B/G\"},\n            {vendor: \"Mercator Ikuü\", model: \"SSW04\"},\n        ],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            try {\n                for (const ID of [1, 2, 3, 4]) {\n                    const endpoint = device.getEndpoint(ID);\n                    await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n                }\n            } catch {\n                // Fails for some: https://github.com/Koenkk/zigbee2mqtt/issues/4872\n            }\n            device.powerSource = \"Mains (single phase)\";\n            device.save();\n        },\n    },\n    {\n        zigbeeModel: [\"gq8b1uv\"],\n        model: \"gq8b1uv\",\n        vendor: \"Tuya\",\n        description: \"Zigbee smart dimmer\",\n        fromZigbee: [legacy.fromZigbee.tuya_dimmer],\n        toZigbee: [legacy.toZigbee.tuya_dimmer_state, legacy.toZigbee.tuya_dimmer_level],\n        exposes: [e.light_brightness().setAccess(\"state\", ea.STATE_SET).setAccess(\"brightness\", ea.STATE_SET)],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"genLevelCtrl\"]);\n        },\n    },\n    {\n        zigbeeModel: [\"HY0017\", \"005f0c3b\"],\n        model: \"U86KCJ-ZP\",\n        vendor: \"Tuya\",\n        description: \"Smart 6 key scene wall switch\",\n        fromZigbee: [fzLocal.scenes_recall_scene_65029],\n        exposes: [e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\"])],\n        toZigbee: [],\n    },\n    {\n        zigbeeModel: [\"TS0026\"],\n        model: \"TS0026\",\n        vendor: \"Tuya\",\n        description: \"6 button scene wall switch\",\n        fromZigbee: [fzLocal.scenes_recall_scene_65029, fzLocal.scene_recall],\n        exposes: [e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\"])],\n        toZigbee: [],\n    },\n    {\n        zigbeeModel: [\"q9mpfhw\"],\n        model: \"SNTZ009\",\n        vendor: \"Tuya\",\n        description: \"Water leak sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_water_leak],\n        exposes: [e.water_leak()],\n        toZigbee: [],\n    },\n    {\n        zigbeeModel: [\"TS0004\"],\n        model: \"TS0004\",\n        vendor: \"Tuya\",\n        description: \"Smart light switch - 4 gang with neutral wire\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"DS-111\", \"Smart light switch - 4 gang with neutral wire\", [\"_TZ3000_mdj7kra9\"]),\n            tuya.whitelabel(\"MHCOZY\", \"TYWB 4ch-RF\", \"4 channel relay\", [\"_TZ3000_u3oupgdy\", \"_TZ3000_imaccztn\"]),\n            tuya.whitelabel(\"AVATTO\", \"TS0004_1\", \"Smart light switch - 4 gang with neutral wire\", [\"_TZ3000_nivavasg\", \"_TZ3000_gexniqbq\"]),\n            tuya.whitelabel(\"Nova Digital\", \"SA-4\", \"Safira smart light switch - 4 gang\", [\"_TZ3000_iymfxdis\"]),\n        ],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3002_1s0vfmtv\", \"_TZ3002_gdwja9a7\"]),\n        model: \"TS0726_2_gang\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch with neutral wire\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode],\n        exposes: [\n            ...[1, 2].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            e.action([\"scene_1\", \"scene_2\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3002_9vcekkp1\", \"_TZ3000_m4ah6bcz\"]),\n        model: \"TS0726_multi_1_gang\",\n        vendor: \"Tuya\",\n        description: \"Multi 1 gang switch with backlight\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode, tuya.tz.backlight_indicator_mode_2],\n        exposes: [\n            e.switch(),\n            e.power_on_behavior(),\n            e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            e.action([\"scene_1\"]),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_m3pafcnk\", \"_TZ3002_m3pafcnk\"]),\n        model: \"TS0726_multi_3_gang\",\n        vendor: \"Tuya\",\n        description: \"multi 3 gang switch with backlight\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode, tuya.tz.backlight_indicator_mode_2],\n        exposes: [\n            ...[1, 2, 3].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3002_aewsvjcu\", \"_TZ3002_phu8ygaw\"]),\n        model: \"TS0726_multi_4_gang\",\n        vendor: \"Tuya\",\n        description: \"Multi 4 gang switch with backlight\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode, tuya.tz.backlight_indicator_mode_2],\n        exposes: [\n            ...[1, 2, 3, 4].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_qhyadm57\"]),\n        model: \"TS0726_4_gang_switch_and_2_scene\",\n        vendor: \"Tuya\",\n        description: \"Multi 4 gang switch and 2 scene with backlight\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode, tuya.tz.backlight_indicator_mode_2],\n        exposes: [\n            ...[1, 2, 3, 4].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5, l6: 6};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4, 5, 6]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3002_iedhxgyi\"]),\n        model: \"TS0726_3_gang\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch with neutral wire\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode],\n        exposes: [\n            ...[1, 2, 3].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_wsspgtcd\", \"_TZ3000_s678wazd\", \"_TZ3002_pzao9ls1\"]),\n        model: \"TS0726_4_gang\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch with neutral wire\",\n        fromZigbee: [fz.on_off, tuya.fz.power_on_behavior_2, fzLocal.TS0726_action],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_2, tzLocal.TS0726_switch_mode],\n        exposes: [\n            ...[1, 2, 3, 4].map((ep) => e.switch().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.power_on_behavior().withEndpoint(`l${ep}`)),\n            ...[1, 2, 3, 4].map((ep) => e.enum(\"switch_mode\", ea.STATE_SET, [\"switch\", \"scene\"]).withEndpoint(`l${ep}`)),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\"]),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3002_sal078g8\", \"_TZ3002_sfh0jtz0\"]),\n        model: \"TS0726_switch_4g_2s\",\n        vendor: \"Tuya\",\n        description: \"COSWALL smart switch (4 gang + 2 scene)\",\n        fromZigbee: [fzLocal.TS0726_action],\n        exposes: [e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchMode: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5, l6: 6};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4, 5, 6]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        zigbeeModel: [\"TS0006\"],\n        model: \"TS0006\",\n        vendor: \"Tuya\",\n        description: \"6 gang switch module with neutral wire\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        exposes: [\n            e.switch().withEndpoint(\"l1\"),\n            e.switch().withEndpoint(\"l2\"),\n            e.switch().withEndpoint(\"l3\"),\n            e.switch().withEndpoint(\"l4\"),\n            e.switch().withEndpoint(\"l5\"),\n            e.switch().withEndpoint(\"l6\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5, l6: 6};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(5), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(6), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"AVATTO\", \"TS0006_1\", \"4 gang switch module with neutral wire and socket\", [\"_TZ3000_cvis4qmw\"])],\n    },\n    {\n        zigbeeModel: [\"HY0080\"],\n        model: \"U86KWF-ZPSJ\",\n        vendor: \"Tuya\",\n        description: \"Environment controller\",\n        fromZigbee: [fz.thermostat, fz.fan],\n        toZigbee: [\n            tz.thermostat_local_temperature,\n            tz.thermostat_local_temperature_calibration,\n            tz.thermostat_occupancy,\n            tz.thermostat_occupied_heating_setpoint,\n            tz.thermostat_unoccupied_heating_setpoint,\n            tz.thermostat_occupied_cooling_setpoint,\n            tz.thermostat_unoccupied_cooling_setpoint,\n            tz.thermostat_setpoint_raise_lower,\n            tz.thermostat_remote_sensing,\n            tz.thermostat_control_sequence_of_operation,\n            tz.thermostat_system_mode,\n            tz.thermostat_weekly_schedule,\n            tz.thermostat_clear_weekly_schedule,\n            tz.thermostat_relay_status_log,\n            tz.thermostat_temperature_setpoint_hold,\n            tz.thermostat_temperature_setpoint_hold_duration,\n            tz.fan_mode,\n        ],\n        exposes: [\n            e\n                .climate()\n                .withSetpoint(\"occupied_heating_setpoint\", 5, 30, 0.5)\n                .withLocalTemperature()\n                .withSystemMode([\"off\", \"auto\", \"heat\"], ea.ALL)\n                .withRunningState([\"idle\", \"heat\", \"cool\"], ea.STATE)\n                .withLocalTemperatureCalibration(-30, 30, 0.1, ea.ALL)\n                .withPiHeatingDemand(),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(9);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"hvacThermostat\", \"hvacFanCtrl\"]);\n            await reporting.thermostatTemperature(endpoint);\n            await reporting.thermostatSystemMode(endpoint);\n            await reporting.thermostatOccupiedHeatingSetpoint(endpoint);\n            await reporting.thermostatUnoccupiedHeatingSetpoint(endpoint);\n            await reporting.thermostatOccupiedCoolingSetpoint(endpoint);\n            await reporting.thermostatUnoccupiedCoolingSetpoint(endpoint);\n            await reporting.fanMode(endpoint);\n        },\n    },\n    {\n        zigbeeModel: [\"6dfgetq\"],\n        model: \"D3-DPWK-TY\",\n        vendor: \"Tuya\",\n        description: \"HVAC controller\",\n        exposes: [\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 30, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"off\", \"auto\", \"heat\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\", \"cool\"], ea.STATE),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_thermostat, legacy.fromZigbee.tuya_dimmer],\n        meta: {\n            tuyaThermostatSystemMode: legacy.thermostatSystemModes2,\n            tuyaThermostatPreset: legacy.thermostatPresets,\n        },\n        toZigbee: [\n            legacy.toZigbee.tuya_thermostat_current_heating_setpoint,\n            legacy.toZigbee.tuya_thermostat_system_mode,\n            legacy.toZigbee.tuya_thermostat_fan_mode,\n            legacy.toZigbee.tuya_dimmer_state,\n        ],\n    },\n    {\n        zigbeeModel: [\"E220-KR4N0Z0-HA\", \"JZ-ZB-004\"],\n        model: \"E220-KR4N0Z0-HA\",\n        vendor: \"Tuya\",\n        description: \"Multiprise with 4 AC outlets and 2 USB super charging ports (16A)\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        fromZigbee: [fz.on_off_skip_duplicate_transaction],\n        exposes: [e.switch().withEndpoint(\"l1\"), e.switch().withEndpoint(\"l2\"), e.switch().withEndpoint(\"l3\"), e.switch().withEndpoint(\"l4\")],\n        whiteLabel: [{vendor: \"LELLKI\", model: \"WP33-EU\"}],\n        meta: {multiEndpoint: true},\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        zigbeeModel: [\"TS0216\"],\n        model: \"TS0216\",\n        vendor: \"Tuya\",\n        description: \"Sound and flash siren\",\n        fromZigbee: [fz.ts0216_siren, fz.battery],\n        exposes: [\n            e.battery(),\n            e.binary(\"alarm\", ea.STATE_SET, true, false),\n            e.numeric(\"volume\", ea.ALL).withValueMin(0).withValueMax(100).withDescription(\"Volume of siren\"),\n        ],\n        whiteLabel: [tuya.whitelabel(\"Hejhome\", \"GKZ-SA141\", \"Sound and flash siren\", [\"_TYZB01_sbpc1zrb\"])],\n        toZigbee: [tz.ts0216_alarm, tz.ts0216_duration, tz.ts0216_volume],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            // Device advertises itself as Router but is an EndDevice\n            device.type = \"EndDevice\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_znzs7yaw\"]),\n        model: \"HY08WE\",\n        vendor: \"Tuya\",\n        description: \"Wall-mount thermostat\",\n        fromZigbee: [legacy.fromZigbee.hy_thermostat],\n        toZigbee: [legacy.toZigbee.hy_thermostat],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n        exposes: [\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 30, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"off\", \"auto\", \"heat\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_g9a3awaj\"]),\n        model: \"ZWT07\",\n        vendor: \"Tuya\",\n        description: \"Wall-mount thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 60, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withPreset([\"manual\", \"program\"])\n                .withLocalTemperature(),\n            e.binary(\"frost\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Antifreeze function\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        manual: tuya.enum(1),\n                        program: tuya.enum(0),\n                    }),\n                ],\n                [36, \"running_state\", tuya.valueConverterBasic.lookup({heat: 1, idle: 0})],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [10, \"frost\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_6kijc7nd\", \"_TZE204_6kijc7nd\"]),\n        model: \"_TZE284_6kijc7nd\",\n        vendor: \"Tervix\",\n        description: \"Tervix Zigbee thermostat\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            // Weekly Schedule (Datapoint 48) - Placeholder\n            // The schedule is a raw 168-byte array (7 days x 24 bytes/day):\n            // - Each day has up to 6 slots (4 bytes each): [Hour (1B), Minute (1B), Temp x10 (2B)]\n            // - Empty slots: encoded as 00:00 time and 0°C temp (0x0000).\n            // To implement:\n            // - Converter 'from': Decode raw data into structured schedule (e.g., [{day, slots: [{time, temp}]}]).\n            // - Converter 'to': Encode user input back into raw 168-byte buffer format.\n\n            // Each timer can set the time in the 1st and 2nd bytes, and the temperature in the 3rd and 4th bytes.\n            // There are 6 timers. The default time is 06:00 20°C; 08:00 15°C; 11:30 15°C; 13:30 15°C; 17:00 22°C; 22:00 15°C.\n            // Each segment occupies 4 bytes. If the temperature contains decimals, the data must be expanded 10 times.\n            // If it does not contain decimals, it will be transmitted normally.\n            // For example, if it is 06:00 35.0, it will be transmitted as 06 00 01 5e. 6*4*3=72 bytes\n\n            // Climate Control\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n\n            // Expose local temperature as a sensor\n            e\n                .numeric(\"local_temperature\", ea.STATE)\n                .withUnit(\"°C\")\n                .withDescription(\"Current temperature measured by the thermostat.\"),\n\n            // Modes and Schedules\n            e.enum(\"mode\", ea.STATE_SET, [\"manual\", \"program\"]),\n            e.enum(\"run_mode\", ea.STATE_SET, [\"heat_mode\", \"cool_mode\"]).withDescription(\"Operation mode of the thermostat (heat or cool).\"),\n            e.enum(\"week_program_periods\", ea.STATE, [\"periods_4\"]).withDescription(\"Number of program periods per week (read-only).\"),\n\n            // Features\n            e\n                .binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"WARNING: Restores the device to factory settings. All configurations will be lost.\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enables or disables the child lock feature.\"),\n            e.enum(\"window_state\", ea.STATE, [\"open\", \"close\"]).withDescription(\"Indicates whether the window is open or closed.\"),\n            e.enum(\"working_status\", ea.STATE, [\"Keeping Warm\", \"Working\"]).withDescription(\"Current working status of the thermostat.\"),\n            e.binary(\"window_check\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Checks whether the window is open or closed.\"),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enables frost protection mode.\"),\n            e.enum(\"sensor_choose\", ea.STATE_SET, [\"in\", \"out\"]).withDescription(\"Selects between internal or external temperature sensors.\"),\n            e.binary(\"humidity_control\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Controls the humidity protection feature.\"),\n            e.numeric(\"humidity\", ea.STATE).withUnit(\"%\").withDescription(\"Displays the current relative humidity level in percentage.\"),\n\n            // Weekly Schedule\n            e\n                .text(\"week_schedule\", ea.STATE_SET)\n                .withDescription('Weekly schedule: structured format like - Monday: [{\"time\":\"06:30\",\"temp\":20.0},...].'),\n\n            e\n                .numeric(\"window_open_detection_time\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withValueMin(2)\n                .withValueMax(30)\n                .withValueStep(1)\n                .withDescription(\"Window open detection threshold in minutes.\"),\n            e\n                .numeric(\"window_open_detection_temp\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(2)\n                .withValueMax(4)\n                .withDescription(\"Temperature threshold for window open detection.\"),\n            e\n                .numeric(\"window_open_delay_time\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withValueMin(10)\n                .withValueMax(60)\n                .withValueStep(1)\n                .withDescription(\"Delay time for triggering window open detection (minutes).\"),\n\n            // Temperature and Control Adjustments\n            e\n                .numeric(\"upper_temp\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(35)\n                .withValueMax(95)\n                .withValueStep(0.5)\n                .withDescription(\"Set the upper temperature limit\"),\n            e\n                .numeric(\"temperature_correction\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(-9)\n                .withValueMax(9)\n                .withValueStep(1)\n                .withDescription(\"Temperature calibration adjustment.\"),\n            e\n                .numeric(\"switch_sensitivity\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0.5)\n                .withValueMax(5.0)\n                .withValueStep(0.5)\n                .withDescription(\"Temperature difference threshold to trigger switching.\"),\n            e\n                .numeric(\"floor_temp_protection\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(5.0)\n                .withValueMax(60.0)\n                .withValueStep(0.5)\n                .withDescription(\"Maximum allowed floor temperature for protection.\"),\n            e\n                .numeric(\"floor_low_protection\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(10.0)\n                .withValueMax(30.0)\n                .withValueStep(0.5)\n                .withDescription(\"Minimum allowed floor temperature for protection.\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({off: 0, heat: 1})],\n                [2, \"mode\", tuya.valueConverterBasic.lookup({manual: 0, program: 1})],\n                [3, \"working_status\", tuya.valueConverterBasic.lookup({\"Keeping Warm\": 0, Working: 1})],\n                [8, \"window_check\", tuya.valueConverter.onOff],\n                [10, \"frost_protection\", tuya.valueConverter.onOff],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [19, \"upper_temp\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [25, \"window_state\", tuya.valueConverterBasic.lookup({open: 1, close: 0})],\n                [27, \"temperature_correction\", tuya.valueConverter.raw],\n                [34, \"humidity\", tuya.valueConverter.raw],\n                [39, \"factory_reset\", tuya.valueConverter.onOff],\n                [40, \"child_lock\", tuya.valueConverter.onOff],\n                [43, \"sensor_choose\", tuya.valueConverterBasic.lookup({in: 0, out: 1})],\n                [48, \"week_schedule\", tuya.valueConverter.raw],\n                [58, \"run_mode\", tuya.valueConverterBasic.lookup({heat_mode: 1, cool_mode: 2})],\n                [61, \"week_program_periods\", tuya.valueConverterBasic.lookup({periods_4: \"periods_4\"})],\n                [101, \"switch_sensitivity\", tuya.valueConverter.divideBy10],\n                [102, \"floor_temp_protection\", tuya.valueConverter.divideBy10],\n                [103, \"floor_low_protection\", tuya.valueConverter.divideBy10],\n                [104, \"window_open_detection_time\", tuya.valueConverter.raw],\n                [105, \"window_open_detection_temp\", tuya.valueConverter.raw],\n                [106, \"window_open_delay_time\", tuya.valueConverter.raw],\n                [107, \"humidity_control\", tuya.valueConverter.onOff],\n                [108, \"upper_humidity_limit\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_2ekuz3dz\"]),\n        model: \"X5H-GB-B\",\n        vendor: \"Tuya\",\n        description: \"Wall-mount thermostat\",\n        fromZigbee: [fz.ignore_tuya_set_time, legacy.fromZigbee.x5h_thermostat],\n        toZigbee: [legacy.toZigbee.x5h_thermostat],\n        whiteLabel: [\n            {vendor: \"Beok\", model: \"TGR85-ZB\"},\n            {vendor: \"AVATTO\", model: \"ZWT-100-16A\"},\n        ],\n        exposes: [\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 60, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9.9, 9.9, 0.1, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withPreset([\"manual\", \"program\"]),\n            e.temperature_sensor_select([\"internal\", \"external\", \"both\"]),\n            e\n                .text(\"schedule\", ea.STATE_SET)\n                .withDescription(\n                    \"There are 8 periods in the schedule in total. \" +\n                        \"6 for workdays and 2 for holidays. It should be set in the following format for each of the periods: \" +\n                        \"`hours:minutes/temperature`. All periods should be set at once and delimited by the space symbol. \" +\n                        \"For example: `06:00/20.5 08:00/15 11:30/15 13:30/15 17:00/22 22:00/15 06:00/20 22:00/15`. \" +\n                        \"The thermostat doesn't report the schedule by itself even if you change it manually from device\",\n                ),\n            e.child_lock(),\n            e.week(),\n            e.enum(\"brightness_state\", ea.STATE_SET, [\"off\", \"low\", \"medium\", \"high\"]).withDescription(\"Screen brightness\"),\n            e.binary(\"sound\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switches beep sound when interacting with thermostat\"),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Antifreeze function\"),\n            e.binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Resets all settings to default. Doesn't unpair device.\"),\n            e\n                .numeric(\"heating_temp_limit\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMax(60)\n                .withValueMin(5)\n                .withValueStep(1)\n                .withPreset(\"default\", 35, \"Default value\")\n                .withDescription(\"Heating temperature limit\"),\n            e\n                .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMax(9.5)\n                .withValueMin(0.5)\n                .withValueStep(0.5)\n                .withPreset(\"default\", 1, \"Default value\")\n                .withDescription(\"The delta between local_temperature and current_heating_setpoint to trigger Heat\"),\n            e\n                .numeric(\"upper_temp\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMax(95)\n                .withValueMin(35)\n                .withValueStep(1)\n                .withPreset(\"default\", 60, \"Default value\"),\n        ],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_viy9ihs7\",\n            \"_TZE204_lzriup1j\",\n            \"_TZE204_xnbkhhdr\",\n            \"_TZE284_xnbkhhdr\",\n            \"_TZE204_oh8y8pv8\",\n            \"_TZE204_gops3slb\",\n            \"_TZE284_gops3slb\",\n            \"_TZE284_zjhoqbrd\",\n            \"_TZE204_zjhoqbrd\",\n        ]),\n        model: \"ZWT198/ZWT100-BH\",\n        vendor: \"Tuya\",\n        description: \"Wall thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        whiteLabel: [tuya.whitelabel(\"AVATTO\", \"WT-100-BH\", \"Wall thermostat\", [\"_TZE204_gops3slb\", \"_TZE284_gops3slb\"])],\n        exposes: [\n            e.binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Full factory reset, use with caution!\"),\n            e.child_lock(),\n            e.temperature_sensor_select([\"internal\", \"external\", \"both\"]),\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"auto\", \"temporary_manual\"])\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9.9, 9.9, 0.1, ea.STATE_SET),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Antifreeze function\"),\n            e\n                .max_temperature_limit()\n                .withUnit(\"°C\")\n                .withValueMin(15)\n                .withValueMax(90)\n                .withValueStep(0.5)\n                .withPreset(\"default\", 60, \"Default value\")\n                .withDescription(\"Maximum upper temperature\"),\n            e\n                .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMax(10)\n                .withValueMin(0.1)\n                .withValueStep(0.1)\n                .withPreset(\"default\", 1, \"Default value\")\n                .withDescription(\"The delta between local_temperature (5<t<35)and current_heating_setpoint to trigger Heat\"),\n            e.enum(\"backlight_mode\", ea.STATE_SET, [\"off\", \"low\", \"medium\", \"high\"]).withDescription(\"Intensity of the backlight\"),\n            e.enum(\"working_day\", ea.STATE_SET, [\"disabled\", \"6-1\", \"5-2\", \"7\"]).withDescription(\"Workday setting\"),\n            e.text(\"schedule_weekday\", ea.STATE_SET).withDescription(\"Workdays (6 times `hh:mm/cc.c°C`)\"),\n            e\n                .text(\"schedule_holiday\", ea.STATE_SET)\n                .withDescription(\"Holidays (2 times `hh:mm/cc.c°C)`\"),\n            // ============== exposes for found, but not functional datapoints:\n            /*\n            e.min_temperature_limit() // dp 16\n                .withValueMin(5)\n                .withValueMax(15)\n                .withValueStep(0.5)\n                .withPreset('default', 10, 'Default value')\n                .withDescription('dp16 is listed in Tuya, but no communication from device'),\n\n            e.binary('dp105', ea.STATE_SET, 'ON', 'OFF')\n                .withDescription('dp105 is not listed in Tuya, but device sends datapoint, binary: true/false'),\n\n            e.binary('dp111', ea.STATE_SET, 'ON', 'OFF')\n                .withDescription('dp111 is not listed in Tuya, but device sends datapoint, binary: true/false'),\n            */\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [\n                    4,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup((_, device) => {\n                        // https://github.com/Koenkk/zigbee2mqtt/issues/21353#issuecomment-1938328429\n                        // https://github.com/Koenkk/zigbee2mqtt/issues/28035\n                        if (device.manufacturerName === \"_TZE204_lzriup1j\" || device.manufacturerName === \"_TZE204_gops3slb\") {\n                            return {\n                                auto: tuya.enum(1),\n                                manual: tuya.enum(0),\n                                temporary_manual: tuya.enum(2),\n                            };\n                        }\n                        return {\n                            auto: tuya.enum(0),\n                            manual: tuya.enum(1),\n                            temporary_manual: tuya.enum(2),\n                        };\n                    }),\n                ],\n                [9, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [11, \"faultalarm\", tuya.valueConverter.raw],\n                [15, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [19, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [\n                    101,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(1),\n                        idle: tuya.enum(0),\n                    }),\n                ],\n                [102, \"frost_protection\", tuya.valueConverter.onOff],\n                [103, \"factory_reset\", tuya.valueConverter.onOff],\n                [\n                    104,\n                    \"working_day\",\n                    tuya.valueConverterBasic.lookup((_, device) => {\n                        // https://github.com/Koenkk/zigbee2mqtt/issues/23979\n                        if (device.manufacturerName === \"_TZE200_viy9ihs7\") {\n                            return {\n                                disabled: tuya.enum(0),\n                                \"6-1\": tuya.enum(1),\n                                \"5-2\": tuya.enum(2),\n                                \"7\": tuya.enum(3),\n                            };\n                        }\n                        return {\n                            disabled: tuya.enum(0),\n                            \"6-1\": tuya.enum(2),\n                            \"5-2\": tuya.enum(1),\n                            \"7\": tuya.enum(3),\n                        };\n                    }),\n                ],\n                [\n                    106,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        internal: tuya.enum(0),\n                        external: tuya.enum(1),\n                        both: tuya.enum(2),\n                    }),\n                ],\n                [107, \"deadzone_temperature\", tuya.valueConverter.divideBy10],\n                [109, null, tuya.valueConverter.ZWT198_schedule],\n                [109, \"schedule_weekday\", tuya.valueConverter.ZWT198_schedule],\n                [109, \"schedule_holiday\", tuya.valueConverter.ZWT198_schedule],\n                [110, \"backlight_mode\", tuya.valueConverter.backlightModeOffLowMediumHigh],\n                // ============== found but not functional datapoints:\n\n                // [16, 'min_temperature_limit', tuya.valueConverter.divideBy10],  // datapoint listed in Tuya, but no communication from device\n                // [105, 'dp105', tuya.valueConverter.onOff],                      // not listed in Tuya, but device sends datapoint\n                // [111, 'dp111', tuya.valueConverter.onOff],                      // not listed in Tuya, but device sends datapoint\n\n                // These are the schedule values in bytes, 8 periods in total (4 bytes per period).\n                // For each period:\n                // 1st byte: hour\n                // 2nd byte: minute\n                // 3rd, 4th bytes: temperature multiplied by 10\n                // On the device last 2 periods are ignored if schedule_mode is 7day. When schedule_mode is disabled,\n                // scheduling can't be configured at all on the device.\n                // For example, if schedule_mode is weekday/sat+sun and this byte array is received:\n                // [6,10,1,144,8,10,0,170,11,40,0,170,12,40,0,170,17,10,0,230,22,10,0,170,8,5,0,200,23,0,0,160]\n                // Then the schedule is:\n                // Mon-Fri: 6:10 --> 40C, 8:10 --> 17C, 11:40 --> 17C, 12:40 --> 17C, 17:10 --> 23C, 22:10 --> 17C\n                // Sat-Sun: 8:05 --> 20C, 23:00 --> 16C\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_mwomyz5n\", \"_TZE204_cvub6xbb\", \"_TZE284_cvub6xbb\"]),\n        model: \"TGM50-ZB\",\n        vendor: \"Tuya\",\n        description: \"Beok wall thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, respondToMcuVersionResponse: true})],\n        exposes: [\n            e.child_lock(),\n            e.temperature_sensor_select([\"internal\", \"external\", \"both\"]),\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"auto\"])\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9.9, 9.9, 0.1, ea.STATE_SET),\n            e.enum(\"backlight_mode\", ea.STATE_SET, [\"off\", \"always_low\", \"always_mid\", \"always_high\"]).withDescription(\"Intensity of the backlight\"),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Antifreeze function\"),\n            e\n                .max_temperature_limit()\n                .withUnit(\"°C\")\n                .withValueMin(15)\n                .withValueMax(90)\n                .withValueStep(0.5)\n                .withPreset(\"default\", 60, \"Default value\")\n                .withDescription(\"Maximum upper temperature\"),\n            e\n                .numeric(\"temperature_delta\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMax(10)\n                .withValueMin(0.5)\n                .withValueStep(0.5)\n                .withPreset(\"default\", 1, \"Default value\")\n                .withDescription(\"The delta between local_temperature and current_heating_setpoint to trigger Heat\"),\n            e.binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Full factory reset, use with caution!\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [\n                    4,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        manual: tuya.enum(0),\n                        auto: tuya.enum(1),\n                    }),\n                ],\n                [9, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [15, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [19, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [\n                    101,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(1),\n                        idle: tuya.enum(0),\n                    }),\n                ],\n                [102, \"frost_protection\", tuya.valueConverter.onOff],\n                [103, \"factory_reset\", tuya.valueConverter.onOff],\n                [\n                    106,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        internal: tuya.enum(0),\n                        external: tuya.enum(1),\n                        both: tuya.enum(2),\n                    }),\n                ],\n                [107, \"temperature_delta\", tuya.valueConverter.divideBy10],\n                [\n                    110,\n                    \"backlight_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        always_low: tuya.enum(1),\n                        always_mid: tuya.enum(2),\n                        always_high: tuya.enum(3),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0222\", [\"_TZ3000_kky16aay\", \"_TZE204_myd45weu\"]),\n        model: \"TS0222_temperature_humidity\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor\",\n        fromZigbee: [fzLocal.TS0222_humidity, fz.battery, fz.temperature],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.battery(), e.temperature(), e.humidity()],\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"QT-07S\", \"Soil sensor\", [\"_TZE204_myd45weu\"])],\n        extend: [m.illuminance()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0222\", [\"_TZ3000_8uxxzz4b\", \"_TZ3000_hy6ncvmw\", \"_TZ3000_9kbbfeho\", \"_TZ3000_l6rsaipj\"]),\n        model: \"TS0222_light\",\n        vendor: \"Tuya\",\n        description: \"Light sensor\",\n        fromZigbee: [fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [tuya.whitelabel(\"Moes\", \"ZSS-QT-LS-C\", \"Light sensor\", [\"_TZ3000_9kbbfeho\"])],\n        exposes: [e.battery()],\n        extend: [m.illuminance()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0222\", [\"_TZ3000_t9qqxn70\"]),\n        model: \"THE01860A\",\n        vendor: \"Tuya\",\n        description: \"Temp & humidity flower sensor with illuminance\",\n        fromZigbee: [fz.humidity, fz.battery, fz.temperature],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.battery(), e.temperature(), e.humidity()],\n        extend: [m.illuminance()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0222\", [\"_TYZB01_4mdqxxnn\", \"_TYZB01_m6ec2pgj\", \"_TZ3000_do6txrcw\", \"_TZ3000_7kscdesh\"]),\n        model: \"TS0222\",\n        vendor: \"Tuya\",\n        description: \"Light intensity sensor\",\n        fromZigbee: [fz.battery, legacy.fromZigbee.TS0222],\n        toZigbee: [],\n        exposes: [e.battery()],\n        configure: tuya.configureMagicPacket,\n        extend: [m.illuminance()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0222\", [\"_TZ3000_j6adk9id\"]),\n        model: \"TS0222_solar_light\",\n        vendor: \"Tuya\",\n        description: \"Solar light sensor\",\n        configure: tuya.configureMagicPacket,\n        extend: [m.illuminance(), m.battery()],\n    },\n    {\n        zigbeeModel: [\"TS0210\"],\n        model: \"TS0210\",\n        vendor: \"Tuya\",\n        description: \"Vibration sensor\",\n        whiteLabel: [\n            tuya.whitelabel(\"Niceboy\", \"ORBIS Vibration Sensor\", \"Vibration sensor\", [\"_TYZB01_821siati\"]),\n            tuya.whitelabel(\"iHseno\", \"_TZ3000_lzdjjfss\", \"Vibration sensor\", [\"_TZ3000_lzdjjfss\"]),\n        ],\n        fromZigbee: [fz.battery, fz.ias_vibration_alarm_1_with_timeout],\n        toZigbee: [tz.TS0210_sensitivity],\n        exposes: [\n            e.battery(),\n            e.battery_voltage(),\n            e.vibration(),\n            e\n                .numeric(\"sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(50)\n                .withDescription(\n                    \"Sensitivity of the sensor (0 = highest sensitivity, 50 = lowest sensitivity). \" +\n                        \"Press button on the device right before changing this\",\n                ),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_8ply8mjj\"]),\n        model: \"COZIGVS\",\n        vendor: \"Conecto\",\n        description: \"Vibration sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.vibration(),\n            e\n                .numeric(\"sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(2)\n                .withDescription(\n                    \"Sensitivity of the sensor (single press the button when muted to switch between\" +\n                        \" low (one beep), medium (two beeps) and max (three beeps))\",\n                ),\n            e.text(\"buzzer_mute\", ea.STATE).withDescription(\"ON when buzzer is muted (double press the button on device to toggle)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"vibration\", tuya.valueConverter.trueFalse1],\n                [101, \"sensitivity\", tuya.valueConverter.raw],\n                [103, \"buzzer_mute\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_8bxrzyxz\", \"_TZ3000_ky0fq4ho\"]),\n        model: \"TS011F_din_smart_relay\",\n        description: \"Din smart relay (with power monitoring)\",\n        vendor: \"Tuya\",\n        fromZigbee: [fz.on_off, fz.electrical_measurement, fz.metering, tuya.fz.power_outage_memory, fz.tuya_relay_din_led_indicator],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tz.tuya_relay_din_led_indicator],\n        whiteLabel: [{vendor: \"MatSee Plus\", model: \"ATMS1602Z\"}],\n        ota: true,\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            await reporting.rmsVoltage(endpoint, {change: 5});\n            await reporting.rmsCurrent(endpoint, {change: 50});\n            await reporting.activePower(endpoint, {change: 10});\n            await reporting.currentSummDelivered(endpoint);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        exposes: [\n            e.switch(),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            e.enum(\"power_outage_memory\", ea.ALL, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n            e.enum(\"indicator_mode\", ea.STATE_SET, [\"off\", \"on_off\", \"off_on\"]).withDescription(\"Relay LED indicator mode\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_qeuvnohg\", \"_TZ3000_6l1pjfqe\", \"_TZ3000_2iiimqs9\"]),\n        model: \"TS011F_din_smart_relay_polling\",\n        description: \"Din smart relay (with power monitoring via polling)\",\n        vendor: \"Tuya\",\n        fromZigbee: [fz.on_off, fz.electrical_measurement, fz.metering, tuya.fz.power_outage_memory, fz.tuya_relay_din_led_indicator],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tz.tuya_relay_din_led_indicator],\n        whiteLabel: [\n            tuya.whitelabel(\"Tongou\", \"TO-Q-SY1-JZT\", \"Din smart relay (with power monitoring via polling)\", [\"_TZ3000_qeuvnohg\"]),\n            tuya.whitelabel(\"TOMZN\", \"TOB9Z-63M\", \"Din smart relay (with power monitoring via polling)\", [\"_TZ3000_6l1pjfqe\"]),\n            tuya.whitelabel(\"Nous\", \"DZ\", \"DIN Switch (with power monitoring via polling)\", [\"_TZ3000_2iiimqs9\"]),\n        ],\n        ota: true,\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            await reporting.rmsVoltage(endpoint, {change: 5});\n            await reporting.rmsCurrent(endpoint, {change: 50});\n            await reporting.activePower(endpoint, {change: 10});\n            await reporting.currentSummDelivered(endpoint);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        exposes: [\n            e.switch(),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            e.enum(\"power_outage_memory\", ea.ALL, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n            e.enum(\"indicator_mode\", ea.STATE_SET, [\"off\", \"on_off\", \"off_on\"]).withDescription(\"Relay LED indicator mode\"),\n        ],\n        extend: [tuya.modernExtend.electricityMeasurementPoll()],\n    },\n    {\n        fingerprint: [...tuya.fingerprint(\"TS011F\", [\"_TZ3000_7issjl2q\"]), ...tuya.fingerprint(\"TS0011\", [\"_TZ3000_gzvniqjb\"])],\n        model: \"ATMS1601Z\",\n        description: \"Din smart relay (without power monitoring)\",\n        vendor: \"Tuya\",\n        fromZigbee: [fz.on_off, tuya.fz.power_outage_memory, fz.tuya_relay_din_led_indicator],\n        toZigbee: [tz.on_off, tuya.tz.power_on_behavior_1, tz.tuya_relay_din_led_indicator],\n        whiteLabel: [tuya.whitelabel(\"Tongou\", \"TO-Q-SY1-ZT\", \"Din smart relay (without power monitoring)\", [\"_TZ3000_gzvniqjb\"])],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            device.save();\n        },\n        exposes: [\n            e.switch(),\n            e.enum(\"power_outage_memory\", ea.ALL, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n            e.enum(\"indicator_mode\", ea.STATE_SET, [\"off\", \"on_off\", \"off_on\"]).withDescription(\"Relay LED indicator mode\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nklqjk62\", \"_TZE204_nklqjk62\", \"_TZE204_jktmrpoj\"]),\n        model: \"TS0601_garage_door_opener\",\n        vendor: \"Tuya\",\n        description: \"Garage door opener\",\n        whiteLabel: [\n            tuya.whitelabel(\"MatSee Plus\", \"PJ-ZGD01\", \"Garage door opener\", [\"_TZE204_nklqjk62\"]),\n            tuya.whitelabel(\"Moes\", \"ZM-102-M\", \"Garage door opener\", [\"_TZE204_jktmrpoj\"]),\n        ],\n        extend: [\n            tuyaMagicPacket(),\n            dpBinary({\n                name: \"trigger\",\n                dp: 1,\n                type: tuya.dataTypes.bool,\n                valueOn: [true, true],\n                valueOff: [false, false],\n                description:\n                    \"Request door to close (= false) or open (= true), will not pulse output if contact shows door is already in requested state\",\n            }),\n            dpNumeric({\n                name: \"countdown\",\n                dp: 2,\n                type: tuya.dataTypes.number,\n                description: \"Countdown to trigger door movement after a certain time, will pulse output in all cases\",\n                unit: \"s\",\n                valueMin: 0,\n                valueMax: 43200,\n            }),\n            dpBinary({\n                name: \"garage_door_contact\",\n                dp: 3,\n                type: tuya.dataTypes.bool,\n                valueOn: [true, false],\n                valueOff: [false, true],\n                description: \"Indicates if the garage door contact is closed (= true) or open (= false)\",\n                readOnly: true,\n            }),\n            dpNumeric({\n                name: \"run_time\",\n                dp: 4,\n                type: tuya.dataTypes.number,\n                description: \"Configure the time to wait for the door contact status to change before triggering a run time alarm\",\n                unit: \"s\",\n                valueMin: 0,\n                valueMax: 120,\n            }),\n            dpNumeric({\n                name: \"open_alarm_time\",\n                dp: 5,\n                type: tuya.dataTypes.number,\n                description: \"Configure the amount of time the door may be open before an open time alarm is triggered\",\n                unit: \"s\",\n                valueMin: 0,\n                valueMax: 86400,\n            }),\n            dpEnumLookup({\n                name: \"status\",\n                dp: 12,\n                type: tuya.dataTypes.enum,\n                description: \"Indicates run time alarm, door open alarm or normal status, will not return to normal until door is triggered again\",\n                lookup: {\"Open Time Alarm\": 0, \"Run Time Alarm\": 1, Normal: 2},\n                readOnly: true,\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_wfxuhoea\", \"_TZE204_wfxuhoea\"]),\n        model: \"GDC311ZBQ1\",\n        vendor: \"Tuya\",\n        description: \"LoraTap garage door opener with wireless sensor\",\n        fromZigbee: [legacy.fromZigbee.matsee_garage_door_opener],\n        toZigbee: [legacy.toZigbee.matsee_garage_door_opener, legacy.toZigbee.tuya_data_point_test],\n        whiteLabel: [{vendor: \"LoraTap\", model: \"GDC311ZBQ1\"}],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genBasic\"]);\n        },\n        exposes: [\n            e.binary(\"trigger\", ea.STATE_SET, true, false).withDescription(\"Trigger the door movement\"),\n            e\n                .binary(\"garage_door_contact\", ea.STATE, false, true)\n                .withDescription(\"Indicates if the garage door contact is closed (= true) or open (= false)\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0603\", [\"_TZE608_c75zqghm\", \"_TZE608_fmemczv1\", \"_TZE608_xkr8gep3\", \"_TZE608_lapuuoke\"]),\n        model: \"TS0603\",\n        vendor: \"Tuya\",\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.raw],\n                [3, \"garage_door_contact\", tuya.valueConverter.trueFalseInvert],\n                [12, null, null],\n            ],\n        },\n        description: \"Garage door opener\",\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genBasic\"]);\n        },\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, true, false).withDescription(\"Trigger the door movement\"),\n            e\n                .binary(\"garage_door_contact\", ea.STATE, true, false)\n                .withDescription(\"Indicates if the garage door contact is closed (= true) or open (= false)\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0201\", [\"_TZ3000_qaaysllp\"]),\n        model: \"LCZ030\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity & illuminance sensor with display\",\n        fromZigbee: [fz.battery, fz.temperature, fz.humidity, fz.ts0201_temperature_humidity_alarm],\n        toZigbee: [tz.ts0201_temperature_humidity_alarm],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            // Enables reporting of measurement state changes\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\n                \"genBasic\",\n                \"genPowerCfg\",\n                \"msTemperatureMeasurement\",\n                \"msRelativeHumidity\",\n                \"manuSpecificTuya2\",\n            ]);\n        },\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            e.battery(),\n            e\n                .numeric(\"alarm_temperature_max\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Alarm temperature max\")\n                .withValueMin(-20)\n                .withValueMax(80),\n            e\n                .numeric(\"alarm_temperature_min\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Alarm temperature min\")\n                .withValueMin(-20)\n                .withValueMax(80),\n            e.numeric(\"alarm_humidity_max\", ea.STATE_SET).withUnit(\"%\").withDescription(\"Alarm humidity max\").withValueMin(0).withValueMax(100),\n            e.numeric(\"alarm_humidity_min\", ea.STATE_SET).withUnit(\"%\").withDescription(\"Alarm humidity min\").withValueMin(0).withValueMax(100),\n            e.enum(\"alarm_humidity\", ea.STATE, [\"below_min_humdity\", \"over_humidity\", \"off\"]).withDescription(\"Alarm humidity status\"),\n            e.enum(\"alarm_temperature\", ea.STATE, [\"below_min_temperature\", \"over_temperature\", \"off\"]).withDescription(\"Alarm temperature status\"),\n        ],\n        extend: [m.illuminance()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_auin8mzr\"]),\n        model: \"TS0601_motion_sensor\",\n        vendor: \"Tuya\",\n        description: \"Human presence sensor AIR\",\n        fromZigbee: [legacy.fromZigbee.tuya_motion_sensor],\n        toZigbee: [legacy.toZigbee.tuya_motion_sensor],\n        exposes: [\n            e.occupancy(),\n            e.enum(\"o_sensitivity\", ea.STATE_SET, Object.values(legacy.msLookups.OSensitivity)).withDescription(\"O-Sensitivity mode\"),\n            e.enum(\"v_sensitivity\", ea.STATE_SET, Object.values(legacy.msLookups.VSensitivity)).withDescription(\"V-Sensitivity mode\"),\n            e.enum(\"led_status\", ea.STATE_SET, [\"ON\", \"OFF\"]).withDescription(\"Led status switch\"),\n            e.numeric(\"vacancy_delay\", ea.STATE_SET).withUnit(\"sec\").withDescription(\"Vacancy delay\").withValueMin(0).withValueMax(1000),\n            e.numeric(\"light_on_luminance_prefer\", ea.STATE_SET).withDescription(\"Light-On luminance prefer\").withValueMin(0).withValueMax(10000),\n            e.numeric(\"light_off_luminance_prefer\", ea.STATE_SET).withDescription(\"Light-Off luminance prefer\").withValueMin(0).withValueMax(10000),\n            e.enum(\"mode\", ea.STATE_SET, Object.values(legacy.msLookups.Mode)).withDescription(\"Working mode\"),\n            e.numeric(\"luminance_level\", ea.STATE).withDescription(\"Luminance level\"),\n            e.numeric(\"reference_luminance\", ea.STATE).withDescription(\"Reference luminance\"),\n            e.numeric(\"vacant_confirm_time\", ea.STATE).withDescription(\"Vacant confirm time\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_lu01t0zl\", \"_TZE200_vrfecyku\", \"_TZE200_ypprdwsl\", \"_TZE200_jkbljri7\"]),\n        model: \"MIR-HE200-TY\",\n        vendor: \"Tuya\",\n        description: \"Human presence sensor with fall function\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await tuya.sendDataPointEnum(endpoint, legacy.dataPoints.trsfTumbleSwitch, 0);\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n        },\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e.occupancy(),\n            e.numeric(\"motion_speed\", ea.STATE).withDescription(\"Speed of movement\"),\n            e\n                .enum(\"motion_direction\", ea.STATE, [\"standing_still\", \"moving_forward\", \"moving_backward\"])\n                .withDescription(\"direction of movement from the point of view of the radar\"),\n            e\n                .numeric(\"radar_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"Sensitivity of the radar\"),\n            e\n                .enum(\"radar_scene\", ea.STATE_SET, [\"default\", \"area\", \"toilet\", \"bedroom\", \"parlour\", \"office\", \"hotel\"])\n                .withDescription(\"Presets for sensitivity for presence and movement\"),\n            e.enum(\"tumble_switch\", ea.STATE_SET, [\"ON\", \"OFF\"]).withDescription(\"Tumble status switch\"),\n            e\n                .numeric(\"fall_sensitivity\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"Fall sensitivity of the radar\"),\n            e\n                .numeric(\"tumble_alarm_time\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(5)\n                .withValueStep(1)\n                .withUnit(\"min\")\n                .withDescription(\"Tumble alarm time\"),\n            e.enum(\"fall_down_status\", ea.STATE, [\"none\", \"maybe_fall\", \"fall\"]).withDescription(\"Fall down status\"),\n            e.text(\"static_dwell_alarm\", ea.STATE).withDescription(\"Static dwell alarm\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [102, \"occupancy\", tuya.valueConverter.trueFalse1],\n                [103, \"illuminance\", tuya.valueConverter.raw],\n                [105, \"tumble_switch\", tuya.valueConverter.plus1],\n                [106, \"tumble_alarm_time\", tuya.valueConverter.raw],\n                [\n                    112,\n                    \"radar_scene\",\n                    tuya.valueConverterBasic.lookup({\n                        default: 0,\n                        area: 1,\n                        toilet: 2,\n                        bedroom: 3,\n                        parlour: 4,\n                        office: 5,\n                        hotel: 6,\n                    }),\n                ],\n                [\n                    114,\n                    \"motion_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        standing_still: 0,\n                        moving_forward: 1,\n                        moving_backward: 2,\n                    }),\n                ],\n                [115, \"motion_speed\", tuya.valueConverter.raw],\n                [116, \"fall_down_status\", tuya.valueConverterBasic.lookup({none: 0, maybe_fall: 1, fall: 2})],\n                [117, \"static_dwell_alarm\", tuya.valueConverter.raw],\n                [118, \"fall_sensitivity\", tuya.valueConverter.raw],\n                // Below are ignored\n                [101, null, null], // reset_flag_code\n                [104, null, null], // detection_flag_code\n                [107, null, null], // radar_check_end_code\n                [108, null, null], // radar_check_start_code\n                [109, null, null], // hw_version_code\n                [110, null, null], // sw_version_code\n                [111, null, null], // radar_id_code\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0046\"],\n        model: \"TS0046\",\n        vendor: \"Tuya\",\n        description: \"Wireless switch with 6 buttons\",\n        whiteLabel: [{vendor: \"LoraTap\", model: \"SS9600ZB\"}],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        exposes: [\n            e.battery(),\n            e.action([\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n                \"5_single\",\n                \"5_double\",\n                \"5_hold\",\n                \"6_single\",\n                \"6_double\",\n                \"6_hold\",\n            ]),\n        ],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS004F\", [\"_TZ3000_g9g2xnch\", \"_TZ3000_pcqjmcud\"]),\n        model: \"YSR-MINI-Z\",\n        vendor: \"Tuya\",\n        description: \"2 in 1 dimming remote control and scene control\",\n        exposes: [\n            e.battery(),\n            e.action([\n                \"on\",\n                \"off\",\n                \"brightness_move_up\",\n                \"brightness_step_up\",\n                \"brightness_step_down\",\n                \"brightness_move_down\",\n                \"brightness_stop\",\n                \"color_temperature_step_down\",\n                \"color_temperature_step_up\",\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n            ]),\n            e\n                .enum(\"operation_mode\", ea.ALL, [\"command\", \"event\"])\n                .withDescription('Operation mode: \"command\" - for group control, \"event\" - for clicks'),\n        ],\n        fromZigbee: [\n            fz.battery,\n            fz.command_on,\n            fz.command_off,\n            fz.command_step,\n            fz.command_move,\n            fz.command_stop,\n            fz.command_step_color_temperature,\n            tuya.fz.on_off_action,\n            fz.tuya_operation_mode,\n        ],\n        toZigbee: [tz.tuya_operation_mode],\n        extend: [tuya.modernExtend.tuyaBase({forceTimeUpdates: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await endpoint.write(\"genOnOff\", {tuyaOperationMode: 1});\n            await endpoint.read(\"genOnOff\", [\"tuyaOperationMode\"]);\n            try {\n                await endpoint.read(0xe001, [0xd011]);\n            } catch {\n                /* do nothing */\n            }\n            await endpoint.read(\"genPowerCfg\", [\"batteryVoltage\", \"batteryPercentageRemaining\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_hkdl5fmv\"]),\n        model: \"TS0601_rcbo\",\n        vendor: \"Tuya\",\n        whiteLabel: [\n            {vendor: \"HOCH\", model: \"ZJSBL7-100Z\"},\n            {vendor: \"WDYK\", model: \"ZJSBL7-100Z\"},\n        ],\n        description: \"DIN mount RCBO with smart energy metering\",\n        fromZigbee: [legacy.fromZigbee.hoch_din],\n        toZigbee: [legacy.toZigbee.hoch_din],\n        exposes: [\n            e.text(\"meter_number\", ea.STATE).withDescription(\"Meter number\"),\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"State\"),\n            e.text(\"alarm\", ea.STATE).withDescription(\"Alarm text\"),\n            e.binary(\"trip\", ea.STATE_SET, \"trip\", \"clear\").withDescription(\"Trip\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child lock\"),\n            e.enum(\"power_on_behavior\", ea.STATE_SET, [\"off\", \"on\", \"previous\"]).withDescription(\"Power on behavior\"),\n            e.numeric(\"countdown_timer\", ea.STATE_SET).withValueMin(0).withValueMax(86400).withUnit(\"s\").withDescription(\"Countdown timer\"),\n            e.numeric(\"voltage_rms\", ea.STATE).withUnit(\"V\").withDescription(\"Voltage RMS\"),\n            e.numeric(\"current\", ea.STATE).withUnit(\"A\").withDescription(\"Current\"),\n            e.numeric(\"current_average\", ea.STATE).withUnit(\"A\").withDescription(\"Current average\"),\n            e.power(),\n            e.voltage(),\n            e.energy(),\n            e.temperature(),\n            e.numeric(\"power_l1\", ea.STATE).withUnit(\"W\").withDescription(\"Instantaneous measured power on phase 1\"),\n            e.numeric(\"power_l2\", ea.STATE).withUnit(\"W\").withDescription(\"Instantaneous measured power on phase 2\"),\n            e.numeric(\"power_l3\", ea.STATE).withUnit(\"W\").withDescription(\"Instantaneous measured power on phase 3\"),\n            e.numeric(\"energy_consumed\", ea.STATE).withUnit(\"kWh\").withDescription(\"Consumed energy\"),\n            e.enum(\"clear_device_data\", ea.SET, [\"\"]).withDescription(\"Clear device data\"),\n        ],\n    },\n    {\n        zigbeeModel: [\"ZG-101ZD\"],\n        fingerprint: tuya.fingerprint(\"TS004F\", [\n            \"_TZ3000_4fjiwweb\",\n            \"_TZ3000_uri7ongn\",\n            \"_TZ3000_ixla93vd\",\n            \"_TZ3000_qja6nq5z\",\n            \"_TZ3000_402vrq2i\",\n            \"_TZ3000_abrsvsou\",\n            \"_TZ3000_gwkzibhs\",\n        ]),\n        model: \"ERS-10TZBVK-AA\",\n        vendor: \"Tuya\",\n        description: \"Smart knob\",\n        fromZigbee: [\n            fz.command_step,\n            fz.command_toggle,\n            fz.command_move_hue,\n            fz.command_step_color_temperature,\n            fz.command_stop_move_raw,\n            fz.tuya_multi_action,\n            fz.tuya_operation_mode,\n            fz.battery,\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"ZG-101Z_D_1\", \"Smart knob\", [\"_TZ3000_402vrq2i\"]),\n            tuya.whitelabel(\"HOBEIAN\", \"ZG-101ZD\", \"Smart knob\", [\"_TZ3000_gwkzibhs\"]),\n        ],\n        toZigbee: [tz.tuya_operation_mode],\n        exposes: [\n            e.action([\n                \"toggle\",\n                \"brightness_step_up\",\n                \"brightness_step_down\",\n                \"color_temperature_step_up\",\n                \"color_temperature_step_down\",\n                \"saturation_move\",\n                \"hue_move\",\n                \"hue_stop\",\n                \"single\",\n                \"double\",\n                \"hold\",\n                \"rotate_left\",\n                \"rotate_right\",\n            ]),\n            e.numeric(\"action_step_size\", ea.STATE).withValueMin(0).withValueMax(255),\n            e.numeric(\"action_transition_time\", ea.STATE).withUnit(\"s\"),\n            e.numeric(\"action_rate\", ea.STATE).withValueMin(0).withValueMax(255),\n            e.battery(),\n            e\n                .enum(\"operation_mode\", ea.ALL, [\"command\", \"event\"])\n                .withDescription('Operation mode: \"command\" - for group control, \"event\" - for clicks'),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await endpoint.read(\"genBasic\", [0x0004, 0x000, 0x0001, 0x0005, 0x0007, 0xfffe]);\n            await endpoint.write(\"genOnOff\", {tuyaOperationMode: 1});\n            await endpoint.read(\"genOnOff\", [\"tuyaOperationMode\"]);\n            try {\n                await endpoint.read(0xe001, [0xd011]);\n            } catch {\n                /* do nothing */\n            }\n            await endpoint.read(\"genPowerCfg\", [\"batteryVoltage\", \"batteryPercentageRemaining\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        // Only the ones with applicationVersion 145 should be detected as this, e.g. applicationVersion 66 should be detected as ERS-10TZBVK-AA.\n        // https://github.com/Koenkk/zigbee2mqtt/issues/25053\n        fingerprint: [\n            {\n                modelID: \"TS004F\",\n                manufacturerName: \"_TZ3000_abrsvsou\",\n                applicationVersion: 145,\n                priority: 1,\n            },\n            // https://github.com/Koenkk/zigbee2mqtt/issues/28149\n            {\n                modelID: \"TS004F\",\n                manufacturerName: \"_TZ3000_gwkzibhs\",\n                applicationVersion: 147,\n                priority: 1,\n            },\n        ],\n        model: \"ZG-101Z/D\",\n        vendor: \"Tuya\",\n        description: \"Smart knob\",\n        fromZigbee: [fz.tuya_multi_action, fz.battery, fz.tuya_operation_mode],\n        exposes: [\n            e.action([\"rotate_left\", \"rotate_right\"]),\n            e\n                .enum(\"operation_mode\", ea.ALL, [\"command\", \"event\"])\n                .withDescription('Operation mode: \"command\" - for group control, \"event\" - for clicks'),\n        ],\n        extend: [m.battery(), tuya.modernExtend.tuyaMagicPacket()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_kzm5w4iz\"]),\n        model: \"TS0601_vibration_sensor\",\n        vendor: \"Tuya\",\n        description: \"Smart vibration sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_smart_vibration_sensor],\n        toZigbee: [],\n        exposes: [e.contact(), e.battery(), e.vibration()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_yi4jtqq1\", \"_TZE200_khx7nnka\", \"_TZE204_khx7nnka\"]),\n        model: \"XFY-CGQ-ZIGB\",\n        vendor: \"Tuya\",\n        description: \"Illuminance sensor\",\n        fromZigbee: [legacy.fromZigbee.tuya_illuminance_sensor],\n        toZigbee: [],\n        exposes: [e.illuminance(), e.brightness_state()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_kltffuzl\", \"_TZE200_fwoorn8y\"]),\n        model: \"TM001-ZA/TM081\",\n        vendor: \"Tuya\",\n        description: \"Door and window sensor\",\n        fromZigbee: [legacy.fromZigbee.tm081],\n        toZigbee: [],\n        exposes: [e.contact(), e.battery()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_2m38mh6k\"]),\n        model: \"SS9600ZB\",\n        vendor: \"Tuya\",\n        description: \"6 gang remote\",\n        exposes: [\n            e.battery(),\n            e.action([\n                \"1_single\",\n                \"1_double\",\n                \"1_hold\",\n                \"2_single\",\n                \"2_double\",\n                \"2_hold\",\n                \"3_single\",\n                \"3_double\",\n                \"3_hold\",\n                \"4_single\",\n                \"4_double\",\n                \"4_hold\",\n                \"5_single\",\n                \"5_double\",\n                \"5_hold\",\n                \"6_single\",\n                \"6_double\",\n                \"6_hold\",\n            ]),\n        ],\n        fromZigbee: [legacy.fromZigbee.tuya_remote],\n        toZigbee: [],\n    },\n    {\n        zigbeeModel: [\"TS0052\"],\n        model: \"TS0052\",\n        vendor: \"Tuya\",\n        description: \"Zigbee dimmer module 1 channel\",\n        extend: [\n            tuyaLight({\n                powerOnBehavior: true,\n                configureReporting: true,\n                switchType: true,\n                minBrightness: \"attribute\",\n            }),\n        ],\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"FS-05R\", \"Mini dimmable switch 1 channel\", [\"_TZ3000_mgusv51k\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0052\", [\"_TZ3000_zjtxnoft\", \"_TZ3000_kvwrdf47\"]),\n        model: \"TS0052_2\",\n        vendor: \"Tuya\",\n        description: \"Zigbee dimmer module 2 channel\",\n        extend: [\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2}}),\n            tuyaLight({\n                powerOnBehavior: true,\n                configureReporting: true,\n                switchType: true,\n                minBrightness: \"attribute\",\n                endpointNames: [\"l1\", \"l2\"],\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_ikvncluo\",\n            \"_TZE200_lyetpprm\",\n            \"_TZE200_jva8ink8\",\n            \"_TZE204_xpq2rzhq\",\n            \"_TZE200_holel4dk\",\n            \"_TZE200_xpq2rzhq\",\n            \"_TZE200_wukb7rhc\",\n            \"_TZE204_xsm7l9xa\",\n            \"_TZE204_ztc6ggyl\",\n            \"_TZE200_ztc6ggyl\",\n            \"_TZE200_sgpeacqp\",\n            \"_TZE204_fwondbzy\",\n        ]),\n        model: \"TS0601_smart_human_presence_sensor_1\",\n        vendor: \"Tuya\",\n        description: \"Smart Human presence sensor\",\n        fromZigbee: [legacy.fz.tuya_smart_human_presense_sensor],\n        toZigbee: [legacy.tz.tuya_smart_human_presense_sensor],\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"ZY-M100-L\", \"Ceiling human breathe sensor\", [\"_TZE204_ztc6ggyl\"]),\n            tuya.whitelabel(\"Moes\", \"ZSS-QY-HP\", \"Human presence sensor\", [\"_TZE204_fwondbzy\"]),\n        ],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e.numeric(\"radar_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(9).withValueStep(1).withDescription(\"sensitivity of the radar\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Minimum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Maximum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Detection delay\")\n                .withUnit(\"s\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(0).withValueMax(1500).withValueStep(1).withDescription(\"Fading time\").withUnit(\"s\"),\n            // e.text('cli', ea.STATE).withDescription('not recognize'),\n            e\n                .enum(\"self_test\", ea.STATE, Object.values(legacy.tuyaHPSCheckingResult))\n                .withDescription(\"Self_test, possible results: checking, check_success, check_failure, others, comm_fault, radar_fault.\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_atuj3i0w\"]),\n        model: \"M8Pro\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch with LCD\",\n        extend: [\n            tuyaWeatherForecast({includeCurrentWeather: true, numberOfForecastDays: 3, correctForNegativeValues: true}),\n            tuyaBase({dp: true}),\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 1, l3: 1, l4: 1}}),\n        ],\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            e.text(\"name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for Switch 1\"),\n            e.text(\"name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for Switch 2\"),\n            e.text(\"name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for Switch 3\"),\n            e.text(\"name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for Switch 4\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for Scene 1\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for Scene 2\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for Scene 3\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for Scene 4\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"switch_1\", \"scene_1\", \"smart_light_1\"]).withEndpoint(\"l1\").withDescription(\"Switch1 mode\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"switch_1\", \"scene_1\", \"smart_light_1\"]).withEndpoint(\"l2\").withDescription(\"Switch2 mode\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"switch_1\", \"scene_1\", \"smart_light_1\"]).withEndpoint(\"l3\").withDescription(\"Switch3 mode\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"switch_1\", \"scene_1\", \"smart_light_1\"]).withEndpoint(\"l4\").withDescription(\"Switch4 mode\"),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\"]),\n\n            e.binary(\"backlight\", ea.ALL, \"ON\", \"OFF\").withDescription(\"Backlight\"),\n            e.enum(\"indicator_switch\", ea.STATE_SET, [\"status\", \"switch_position\", \"off\"]).withDescription(\"Indicator switch\"),\n            e.binary(\"backlight_switch\", ea.ALL, \"ON\", \"OFF\").withDescription(\"Backlight switch\"),\n\n            e.numeric(\"temperature_1\", ea.STATE_SET).withValueMin(-65).withValueMax(99).withDescription(\"Temperature\"),\n            e.enum(\"condition_1\", ea.STATE_SET, Object.keys(tuya.M8ProTuyaWeatherCondition)).withDescription(\"Weather condition\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [24, \"state_l1\", tuya.valueConverter.onOff],\n                [25, \"state_l2\", tuya.valueConverter.onOff],\n                [26, \"state_l3\", tuya.valueConverter.onOff],\n                [27, \"state_l4\", tuya.valueConverter.onOff],\n                [103, \"name_l1\", convLocal.name],\n                [104, \"name_l2\", convLocal.name],\n                [105, \"name_l3\", convLocal.name],\n                [106, \"name_l4\", convLocal.name],\n                [107, \"scene_name_l1\", convLocal.name],\n                [108, \"scene_name_l2\", convLocal.name],\n                [109, \"scene_name_l3\", convLocal.name],\n                [110, \"scene_name_l4\", convLocal.name],\n                [18, \"mode_l1\", tuya.valueConverterBasic.lookup({switch_1: tuya.enum(0), scene_1: tuya.enum(1), smart_light_1: tuya.enum(2)})],\n                [19, \"mode_l2\", tuya.valueConverterBasic.lookup({switch_1: tuya.enum(0), scene_1: tuya.enum(1), smart_light_1: tuya.enum(2)})],\n                [20, \"mode_l3\", tuya.valueConverterBasic.lookup({switch_1: tuya.enum(0), scene_1: tuya.enum(1), smart_light_1: tuya.enum(2)})],\n                [21, \"mode_l4\", tuya.valueConverterBasic.lookup({switch_1: tuya.enum(0), scene_1: tuya.enum(1), smart_light_1: tuya.enum(2)})],\n                [1, \"action\", tuya.valueConverter.static(\"scene_1\")],\n                [2, \"action\", tuya.valueConverter.static(\"scene_2\")],\n                [3, \"action\", tuya.valueConverter.static(\"scene_3\")],\n                [4, \"action\", tuya.valueConverter.static(\"scene_4\")],\n                [101, \"backlight\", tuya.valueConverter.onOff],\n                [36, \"backlight_switch\", tuya.valueConverter.onOff],\n                [37, \"indicator_switch\", tuya.valueConverterBasic.lookup({status: tuya.enum(0), switch_position: tuya.enum(1), off: tuya.enum(2)})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_bmdsp6bs\"]),\n        model: \"Y1_IN\",\n        vendor: \"Tuya\",\n        description: \"Smart human presence sensor 24G\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e.numeric(\"keep_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Keep sensitivity\"),\n            e.numeric(\"trigger_sensitivity\", ea.STATE_SET).withValueMin(1).withValueMax(20).withValueStep(1).withDescription(\"Trigger sensitivity\"),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(60)\n                .withValueStep(1)\n                .withDescription(\"Presence timeout\")\n                .withUnit(\"s\"),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [103, \"illuminance\", tuya.valueConverter.raw],\n                [110, \"keep_sensitivity\", tuya.valueConverter.raw],\n                [114, \"trigger_sensitivity\", tuya.valueConverter.raw],\n                [182, \"target_distance\", tuya.valueConverter.divideBy10],\n                [183, null, null],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_sxm7l9xa\", \"_TZE204_e5m9c5hl\"]),\n        model: \"ZY-M100-S_1\",\n        vendor: \"Tuya\",\n        description: \"Mini human breathe sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        whiteLabel: [tuya.whitelabel(\"Wenzhi\", \"WZ-M100-W\", \"Human presence sensor\", [\"_TZE204_e5m9c5hl\"])],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e.numeric(\"radar_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(9).withValueStep(1).withDescription(\"sensitivity of the radar\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Minimum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Maximum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Detection delay\")\n                .withUnit(\"s\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(0.5).withValueMax(1500).withValueStep(1).withDescription(\"Fading time\").withUnit(\"s\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [104, \"illuminance\", tuya.valueConverter.raw],\n                [105, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [107, \"maximum_range\", tuya.valueConverter.divideBy100],\n                [108, \"minimum_range\", tuya.valueConverter.divideBy100],\n                [109, \"target_distance\", tuya.valueConverter.divideBy100],\n                [110, \"fading_time\", tuya.valueConverter.divideBy10],\n                [111, \"detection_delay\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_qasjif9e\", \"_TZE204_ztqnh5cg\", \"_TZE204_iadro9bf\", \"_TZE284_iadro9bf\"]),\n        model: \"ZY-M100-S_2\",\n        vendor: \"Tuya\",\n        description: \"Mini human breathe sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e.numeric(\"radar_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(9).withValueStep(1).withDescription(\"sensitivity of the radar\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Minimum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9.5)\n                .withValueStep(0.15)\n                .withDescription(\"Maximum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Detection delay\")\n                .withUnit(\"s\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(0.5).withValueMax(1500).withValueStep(1).withDescription(\"Fading time\").withUnit(\"s\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"presence\",\n                    {\n                        from: (v: number, meta: Fz.Meta, options?: KeyValue) => {\n                            if (meta.device.manufacturerName === \"_TZE284_iadro9bf\") {\n                                return tuya.valueConverter.trueFalse0.from(v);\n                            }\n                            return tuya.valueConverter.trueFalse1.from(v);\n                        },\n                    },\n                ],\n                [9, \"target_distance\", tuya.valueConverter.divideBy100],\n                [12, \"illuminance\", tuya.valueConverter.raw], // _TZE284_iadro9bf\n                [104, \"illuminance\", tuya.valueConverter.raw],\n                [2, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [4, \"maximum_range\", tuya.valueConverter.divideBy100],\n                [3, \"minimum_range\", tuya.valueConverter.divideBy100],\n                [102, \"fading_time\", tuya.valueConverter.divideBy10],\n                [101, \"detection_delay\", tuya.valueConverter.divideBy10],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"iHseno\", \"TY_24G_Sensor_V2\", \"Human presence sensor 24G\", [\"_TZE204_ztqnh5cg\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_laokfqwu\"]),\n        model: \"WZ-M100\",\n        vendor: \"Wenzhi\",\n        description: \"Human presence sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e\n                .numeric(\"target_distance\", ea.STATE)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withDescription(\"Distance to target\")\n                .withUnit(\"m\"),\n            e.numeric(\"sensitivity\", ea.STATE_SET).withValueMin(1).withValueMax(9).withValueStep(1).withDescription(\"sensitivity of the radar\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10.0)\n                .withValueStep(0.1)\n                .withDescription(\"minimum detection range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10.0)\n                .withValueStep(0.1)\n                .withDescription(\"maximum detection range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"interval_time\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(3600)\n                .withValueStep(1)\n                .withDescription(\"interval_time\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10.0)\n                .withValueStep(0.1)\n                .withDescription(\"detection delay\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMax(1500)\n                .withValueMin(5)\n                .withValueStep(5)\n                .withDescription(\"presence timeout\")\n                .withUnit(\"s\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"sensitivity\", tuya.valueConverter.raw],\n                [3, \"minimum_range\", tuya.valueConverter.divideBy100],\n                [4, \"maximum_range\", tuya.valueConverter.divideBy100],\n                [9, \"target_distance\", tuya.valueConverter.divideBy100],\n                [103, \"illuminance\", tuya.valueConverter.raw],\n                [104, \"interval_time\", tuya.valueConverter.raw],\n                [105, \"detection_delay\", tuya.valueConverter.divideBy10],\n                [106, \"fading_time\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-205ZL\"],\n        fingerprint: [\n            {modelID: \"TS0225\", manufacturerName: \"_TZE200_hl0ss9oa\"},\n            {modelID: \"CK-BL702-MWS-01(7016)\", manufacturerName: \"ZGAF-205L\"},\n            {modelID: \"TS0225\", manufacturerName: \"_TZE200_y4mdop0b\"},\n        ],\n        model: \"ZG-205ZL\",\n        vendor: \"Tuya\",\n        description: \"24Ghz/5.8GHz human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.enum(\"motion_state\", ea.STATE, [\"none\", \"large\", \"small\", \"static\"]).withDescription(\"Motion state\"),\n            e.illuminance(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(3600)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Presence keep time\"),\n            e\n                .numeric(\"large_motion_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Large motion detection distance\"),\n            e\n                .numeric(\"large_motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Large motion detection sensitivity\"),\n            e\n                .numeric(\"small_motion_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Small motion detection distance\"),\n            e\n                .numeric(\"small_motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Small motion detection sensitivity\"),\n            e\n                .numeric(\"static_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Static detection distance\"),\n            e\n                .numeric(\"static_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Static detection sensitivity\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"off\", \"arm\", \"alarm\", \"doorbell\"]).withDescription(\"Working mode\"),\n            e.enum(\"alarm_volume\", ea.STATE_SET, [\"mute\", \"low\", \"medium\", \"high\"]).withDescription(\"Alarm volume\"),\n            e.numeric(\"alarm_time\", ea.STATE_SET).withValueMin(1).withValueMax(60).withValueStep(1).withUnit(\"m\").withDescription(\"Alarm time\"),\n            e.binary(\"light_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [20, \"illuminance\", tuya.valueConverter.raw],\n                [\n                    11,\n                    \"motion_state\",\n                    tuya.valueConverterBasic.lookup({\n                        none: tuya.enum(0),\n                        large: tuya.enum(1),\n                        small: tuya.enum(2),\n                        static: tuya.enum(3),\n                        far: tuya.enum(4),\n                        near: tuya.enum(5),\n                    }),\n                ],\n                [12, \"fading_time\", tuya.valueConverter.raw],\n                [13, \"large_motion_detection_distance\", tuya.valueConverter.divideBy100],\n                [15, \"large_motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [14, \"small_motion_detection_distance\", tuya.valueConverter.divideBy100],\n                [16, \"small_motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [103, \"static_detection_distance\", tuya.valueConverter.divideBy100],\n                [104, \"static_detection_sensitivity\", tuya.valueConverter.raw],\n                [\n                    105,\n                    \"mode\",\n                    tuya.valueConverterBasic.lookup({\n                        arm: tuya.enum(0),\n                        off: tuya.enum(1),\n                        alarm: tuya.enum(2),\n                        doorbell: tuya.enum(3),\n                    }),\n                ],\n                [\n                    102,\n                    \"alarm_volume\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        mute: tuya.enum(3),\n                    }),\n                ],\n                [101, \"alarm_time\", tuya.valueConverter.raw],\n                [24, \"light_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_whkgqxse\"]),\n        model: \"JM-TRH-ZGB-V1\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor with clock\",\n        fromZigbee: [legacy.fromZigbee.nous_lcd_temperature_humidity_sensor, fz.ignore_tuya_set_time],\n        toZigbee: [legacy.toZigbee.nous_lcd_temperature_humidity_sensor],\n        extend: [tuya.modernExtend.tuyaBase({forceTimeUpdates: true, bindBasicOnConfigure: true})],\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            e.battery(),\n            e\n                .numeric(\"temperature_report_interval\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withValueMin(5)\n                .withValueMax(60)\n                .withValueStep(5)\n                .withDescription(\"Temperature Report interval\"),\n            e.enum(\"temperature_unit_convert\", ea.STATE_SET, [\"celsius\", \"fahrenheit\"]).withDescription(\"Current display unit\"),\n            e.enum(\"temperature_alarm\", ea.STATE, [\"canceled\", \"lower_alarm\", \"upper_alarm\"]).withDescription(\"Temperature alarm status\"),\n            e.numeric(\"max_temperature\", ea.STATE_SET).withUnit(\"°C\").withValueMin(-20).withValueMax(60).withDescription(\"Alarm temperature max\"),\n            e.numeric(\"min_temperature\", ea.STATE_SET).withUnit(\"°C\").withValueMin(-20).withValueMax(60).withDescription(\"Alarm temperature min\"),\n            e.enum(\"humidity_alarm\", ea.STATE, [\"canceled\", \"lower_alarm\", \"upper_alarm\"]).withDescription(\"Humidity alarm status\"),\n            e.numeric(\"max_humidity\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Alarm humidity max\"),\n            e.numeric(\"min_humidity\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Alarm humidity min\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_zyrdrmno\"]),\n        model: \"ZB-Sm\",\n        vendor: \"Tuya\",\n        description: \"Tubular motor\",\n        fromZigbee: [legacy.fromZigbee.zb_sm_cover],\n        toZigbee: [legacy.toZigbee.zb_sm_cover],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"2000\"})],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"goto_positon\", ea.SET, [\"25\", \"50\", \"75\", \"FAVORITE\"]),\n            e.enum(\"motor_state\", ea.STATE, [\"OPENING\", \"CLOSING\", \"STOPPED\"]),\n            e.numeric(\"active_power\", ea.STATE).withDescription(\"Active power\").withUnit(\"mWt\"),\n            e.numeric(\"cycle_count\", ea.STATE).withDescription(\"Cycle count\"),\n            e.numeric(\"cycle_time\", ea.STATE).withDescription(\"Cycle time\").withUnit(\"ms\"),\n            e.enum(\"top_limit\", ea.STATE_SET, [\"SET\", \"CLEAR\"]).withDescription(\"Setup or clear top limit\"),\n            e.enum(\"bottom_limit\", ea.STATE_SET, [\"SET\", \"CLEAR\"]).withDescription(\"Setup or clear bottom limit\"),\n            e.numeric(\"favorite_position\", ea.STATE_SET).withValueMin(0).withValueMax(100).withDescription(\"Favorite position of this cover\"),\n            e.binary(\"reverse_direction\", ea.STATE_SET, true, false).withDescription(\"Inverts the cover direction\"),\n            e.text(\"motor_type\", ea.STATE),\n            e.enum(\"report\", ea.SET, [\"\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS1201\", [\n            \"_TZ3290_7v1k4vufotpowp9z\",\n            \"_TZ3290_rlkmy85q4pzoxobl\",\n            \"_TZ3290_jxvzqatwgsaqzx1u\",\n            \"_TZ3290_lypnqvlem5eq1ree\",\n            \"_TZ3290_uc8lwbi2\",\n            \"_TZ3290_nba3knpsarkawgnt\",\n            \"_TZ3290_8xzb2ghn\",\n        ]),\n        model: \"ZS06\",\n        vendor: \"Tuya\",\n        description: \"Universal smart IR remote control\",\n        fromZigbee: [\n            fzZosung.zosung_send_ir_code_00,\n            fzZosung.zosung_send_ir_code_01,\n            fzZosung.zosung_send_ir_code_02,\n            fzZosung.zosung_send_ir_code_03,\n            fzZosung.zosung_send_ir_code_04,\n            fzZosung.zosung_send_ir_code_05,\n        ],\n        toZigbee: [tzZosung.zosung_ir_code_to_send, tzZosung.zosung_learn_ir_code],\n        exposes: [ez.learn_ir_code(), ez.learned_ir_code(), ez.ir_code_to_send()],\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"UFO-R4Z\", \"Universal smart IR remote control\", [\"_TZ3290_rlkmy85q4pzoxobl\"]),\n            tuya.whitelabel(\"QA\", \"QAIRZPRO\", \"Infrared hub pro\", [\"_TZ3290_jxvzqatwgsaqzx1u\", \"_TZ3290_lypnqvlem5eq1ree\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZM-18-USB\", \"Universal smart IR remote control\", [\"_TZ3290_uc8lwbi2\"]),\n            tuya.whitelabel(\"Zemismart\", \"ZXMIR-02\", \"Universal smart IR remote control\", [\"_TZ3290_8xzb2ghn\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0201\", [\"_TZ3000_itnrsufe\"]),\n        model: \"KCTW1Z\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity sensor with LCD\",\n        fromZigbee: [fz.temperature, fzLocal.humidity10, fzLocal.temperature_unit, fz.battery, fz.ignore_tuya_set_time],\n        toZigbee: [tzLocal.temperature_unit],\n        extend: [tuya.modernExtend.tuyaBase({forceTimeUpdates: true})],\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            e.battery(),\n            e.battery_voltage(),\n            e.enum(\"temperature_unit\", ea.STATE_SET, [\"celsius\", \"fahrenheit\"]).withDescription(\"Current display unit\"),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\", \"msTemperatureMeasurement\", \"msRelativeHumidity\"]);\n            await endpoint.read(\"genPowerCfg\", [\"batteryVoltage\", \"batteryPercentageRemaining\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_0u3bj3rc\", \"_TZE200_v6ossqfy\", \"_TZE200_mx6u6l4y\"]),\n        model: \"TS0601_human_presence_sensor\",\n        vendor: \"Tuya\",\n        description: \"Human presence sensor Zigbee\",\n        fromZigbee: [legacy.fromZigbee.hpsz],\n        toZigbee: [legacy.toZigbee.hpsz],\n        extend: [tuya.modernExtend.tuyaBase({forceTimeUpdates: true})],\n        exposes: [\n            e.presence(),\n            e.numeric(\"duration_of_attendance\", ea.STATE).withUnit(\"min\").withDescription(\"Shows the presence duration in minutes\"),\n            e.numeric(\"duration_of_absence\", ea.STATE).withUnit(\"min\").withDescription(\"Shows the duration of the absence in minutes\"),\n            e.binary(\"led_state\", ea.STATE_SET, true, false).withDescription(\"Turns the onboard LED on or off\"),\n        ],\n    },\n    {\n        zigbeeModel: [\"ZG-227Z\", \"ZG-227ZL\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_qoy0ekbd\",\n            \"_TZE200_znbl8dj5\",\n            \"_TZE200_a8sdabtg\",\n            \"_TZE200_dikkika5\",\n            \"_TZE200_vs0skpuc\",\n            \"_TZE200_3xfjp0ag\",\n            \"_TZE200_ehhrv2e3\",\n            \"_TZE200_lhqtjwax\",\n        ]),\n        model: \"ZG-227ZL\",\n        vendor: \"Tuya\",\n        description: \"Temperature & humidity LCD sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            e.battery(),\n        ],\n        whiteLabel: [\n            tuya.whitelabel(\"HOBEIAN\", \"ZG-227Z\", \"Temperature and humidity sensor\", [\"_TZE200_a8sdabtg\", \"_TZE200_vs0skpuc\", \"_TZE200_ehhrv2e3\"]),\n            tuya.whitelabel(\"KOJIMA\", \"KOJIMA-THS-ZG-LCD\", \"Temperature and humidity sensor\", [\"_TZE200_dikkika5\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [2, \"humidity\", tuya.valueConverter.raw],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [23, \"temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [24, \"humidity_calibration\", tuya.valueConverter.localTempCalibration2],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_j7sgd8po\"]),\n        model: \"S8\",\n        vendor: \"SODA\",\n        description: \"S8 premium window handle\",\n        extend: [],\n        toZigbee: [tuya.tz.datapoints],\n        fromZigbee: [tuya.fz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.battery(),\n            e.battery_low(),\n            e.binary(\"vacation\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Vacation mode\"),\n            e.enum(\"alarm\", ea.STATE, [\"ALARM\", \"IDLE\"]).withDescription(\"Alarm\"),\n            e.binary(\"alarm_switch\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Alarm enable\"),\n            e.binary(\"handlesound\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Handle closed sound\"),\n            e.enum(\"opening_mode\", ea.STATE, [\"closed\", \"tilted\"]).withDescription(\"Window tilt\"),\n            e.temperature(),\n            e.humidity(),\n            e.binary(\"keysound\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Key beep sound\"),\n            e.enum(\"sensitivity\", ea.STATE_SET, [\"off\", \"low\", \"medium\", \"high\", \"max\"]).withDescription(\"Sensitivity of the alarm sensor\"),\n            e.enum(\"position\", ea.STATE, [\"up\", \"right\", \"down\", \"left\"]),\n            e.enum(\"button_left\", ea.STATE, [\"released\", \"pressed\"]),\n            e.enum(\"button_right\", ea.STATE, [\"released\", \"pressed\"]),\n            e\n                .numeric(\"duration\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(300)\n                .withValueStep(1)\n                .withUnit(\"sec\")\n                .withDescription(\"Duration of the alarm\")\n                .withPreset(\"default\", 180, \"Default value\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(0)\n                .withValueMax(700)\n                .withPreset(\"default\", 20, \"Default value\"),\n            e.enum(\"calibrate\", ea.STATE_SET, [\"clear\", \"execute\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [3, \"battery\", tuya.valueConverter.raw],\n                [8, \"temperature\", tuya.valueConverter.divideBy10],\n                [101, \"humidity\", tuya.valueConverter.raw],\n                [\n                    102,\n                    \"alarm\",\n                    tuya.valueConverterBasic.lookup({\n                        IDLE: tuya.enum(0),\n                        ALARM: tuya.enum(1),\n                    }),\n                ],\n                [\n                    103,\n                    \"opening_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        tilted: tuya.enum(1),\n                    }),\n                ],\n                [\n                    104,\n                    \"position\",\n                    tuya.valueConverterBasic.lookup({\n                        left: tuya.enum(4),\n                        up: tuya.enum(1),\n                        down: tuya.enum(2),\n                        right: tuya.enum(3),\n                    }),\n                ],\n                [\n                    105,\n                    \"button_left\",\n                    tuya.valueConverterBasic.lookup({\n                        released: tuya.enum(0),\n                        pressed: tuya.enum(1),\n                    }),\n                ],\n                [\n                    106,\n                    \"button_right\",\n                    tuya.valueConverterBasic.lookup({\n                        released: tuya.enum(0),\n                        pressed: tuya.enum(1),\n                    }),\n                ],\n                [\n                    107,\n                    \"vacation\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [\n                    108,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        low: tuya.enum(1),\n                        medium: tuya.enum(2),\n                        high: tuya.enum(3),\n                        max: tuya.enum(4),\n                    }),\n                ],\n                [\n                    109,\n                    \"alarm_switch\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [110, \"update_frequency\", tuya.valueConverter.raw],\n                [\n                    111,\n                    \"keysound\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [\n                    112,\n                    \"battery_low\",\n                    tuya.valueConverterBasic.lookup({\n                        ON: tuya.enum(0),\n                        OFF: tuya.enum(1),\n                    }),\n                ],\n                [113, \"duration\", tuya.valueConverter.raw],\n                [\n                    114,\n                    \"handlesound\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [\n                    120,\n                    \"calibrate\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: tuya.enum(0),\n                        execute: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ysm4dsb1\"]),\n        model: \"RSH-HS06\",\n        vendor: \"Tuya\",\n        description: \"Temperature and humidity sensor\",\n        extend: [\n            tuya.modernExtend.tuyaBase({\n                dp: true,\n                queryOnDeviceAnnounce: true,\n                queryOnConfigure: true,\n                timeStart: \"off\",\n                respondToMcuVersionResponse: true,\n            }),\n        ],\n        exposes: [\n            e.temperature(),\n            e.humidity(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [2, \"humidity\", tuya.valueConverter.raw],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [23, \"temperature_calibration\", tuya.valueConverter.divideBy10],\n                [24, \"humidity_calibration\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_n8dljorx\"]),\n        model: \"ZG-102Z\",\n        vendor: \"Tuya\",\n        description: \"Door sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.contact(), e.battery()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"contact\", tuya.valueConverter.inverse],\n                [2, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-102ZL\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_pay2byax\", \"_TZE200_ijey4q29\", \"_TZE200_ykglasuj\", \"_TZE200_kf2hbko4\"]),\n        model: \"ZG-102ZL\",\n        vendor: \"Tuya\",\n        description: \"Luminance door sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.contact(),\n            e.illuminance().withUnit(\"lx\"),\n            e.battery(),\n            e\n                .numeric(\"illuminance_interval\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(720)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Brightness acquisition interval (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"contact\", tuya.valueConverter.inverse],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n                [2, \"battery\", tuya.valueConverter.raw],\n                [102, \"illuminance_interval\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0601\", [\"_TZE200_f1pvdgoh\", \"_TZE200_me6wtiqs\", \"_TZE200_ghynnvos\"]),\n            ...tuya.fingerprint(\"\\u0000B\", [\"_TZE200_f1pvdgoh\"]),\n        ],\n        model: \"TS0601_pir\",\n        vendor: \"Tuya\",\n        description: \"Haozee PIR sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\", respondToMcuVersionResponse: true})],\n        exposes: (device, options) => {\n            const exposes: Expose[] = [e.occupancy(), e.illuminance()];\n            // https://github.com/Koenkk/zigbee2mqtt.io/pull/4018\n            if (device.manufacturerName !== \"_TZE200_ghynnvos\") {\n                exposes.push(e.battery());\n            }\n            return exposes;\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Immax\", \"07527L\", \"NEO Smart PIR sensor 2v1 Zigbee 3.0\", [\"_TZE200_me6wtiqs\"]),\n            tuya.whitelabel(\"Conecto\", \"COZIGPMS\", \"PIR Motion Sensor\", [\"_TZE200_ghynnvos\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-225Z\"],\n        fingerprint: [...tuya.fingerprint(\"TS0601\", [\"_TZE200_8isdky6j\"]), ...tuya.fingerprint(\"TS0225\", [\"_TZE200_p6fuhvez\", \"_TZE200_aj0oxo1i\"])],\n        model: \"ZG-225Z\",\n        vendor: \"Tuya\",\n        description: \"Gas sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.gas(),\n            tuya.exposes.gasValue().withUnit(\"ppm\"),\n            e.enum(\"sensitivity\", ea.STATE_SET, [\"low\", \"medium\", \"high\"]).withDescription(\"Gas sensor sensitivity\"),\n            e.enum(\"ring\", ea.STATE_SET, [\"ring1\", \"ring2\"]).withDescription(\"Ring\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalse0],\n                [2, \"gas_value\", tuya.valueConverter.raw],\n                [\n                    101,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [\n                    6,\n                    \"ring\",\n                    tuya.valueConverterBasic.lookup({\n                        ring1: tuya.enum(0),\n                        ring2: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZL\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_3towulqd\",\n            \"_TZE200_1ibpyhdc\",\n            \"_TZE200_bh3n6gk8\",\n            \"_TZE200_ttcovulf\",\n            \"_TZE200_gjldowol\",\n            \"_TZE200_s6hzw8g2\",\n            \"_TZE200_jxyhl4eq\",\n            \"_TZE200_qxyh4r7g\",\n            \"_TZE200_na5qlzow\",\n        ]),\n        model: \"ZG-204ZL\",\n        vendor: \"Tuya\",\n        description: \"Luminance motion sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.occupancy(),\n            e.illuminance().withUnit(\"lx\"),\n            e.battery(),\n            e\n                .enum(\"sensitivity\", ea.STATE_SET, [\"low\", \"medium\", \"high\"])\n                .withDescription(\"PIR sensor sensitivity (refresh and update only while active)\"),\n            e\n                .enum(\"keep_time\", ea.STATE_SET, [\"10\", \"30\", \"60\", \"120\"])\n                .withDescription(\"PIR keep time in seconds (refresh and update only while active)\"),\n            e\n                .numeric(\"illuminance_interval\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(720)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Brightness acquisition interval (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [\n                    9,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [\n                    10,\n                    \"keep_time\",\n                    tuya.valueConverterBasic.lookup({\n                        \"10\": tuya.enum(0),\n                        \"30\": tuya.enum(1),\n                        \"60\": tuya.enum(2),\n                        \"120\": tuya.enum(3),\n                    }),\n                ],\n                [12, \"illuminance\", tuya.valueConverter.raw],\n                [101, \"illuminance\", tuya.valueConverter.raw], // For _TZE200_s6hzw8g2\n                [102, \"illuminance_interval\", tuya.valueConverter.raw],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Nedis\", \"ZBSM20WT\", \"Nedis motion sensor\", [\"_TZE200_s6hzw8g2\"])],\n    },\n    {\n        fingerprint: [\n            ...tuya.fingerprint(\"TS0225\", [\"_TZE200_2aaelwxk\", \"_TZE200_crq3r3la\"]),\n            ...tuya.fingerprint(\"CK-BL702-MWS-01(7016)\", [\"HOBEIAN\", \"_TZE200_crq3r3la\"]),\n        ],\n        model: \"ZG-205Z/A\",\n        vendor: \"Tuya\",\n        description: \"5.8Ghz/24Ghz Human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.enum(\"motion_state\", ea.STATE, [\"none\", \"small\", \"medium\", \"large\", \"far\", \"near\"]).withDescription(\"State of the motion\"),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e.illuminance().withUnit(\"lx\"),\n            e\n                .numeric(\"large_motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Motion detection sensitivity\"),\n            e\n                .numeric(\"large_motion_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Motion detection distance\"),\n\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"For how much time presence should stay true after detecting it\"),\n            e\n                .numeric(\"medium_motion_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Medium motion detection distance\"),\n            e\n                .numeric(\"medium_motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Medium motion detection sensitivity\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED Indicator\"),\n            e\n                .numeric(\"small_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Small detection distance\"),\n            e\n                .numeric(\"small_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Small detection sensitivity\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Minimum range\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"large_motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [4, \"large_motion_detection_distance\", tuya.valueConverter.divideBy100],\n                [\n                    101,\n                    \"motion_state\",\n                    tuya.valueConverterBasic.lookup({\n                        none: tuya.enum(0),\n                        large: tuya.enum(1),\n                        medium: tuya.enum(2),\n                        small: tuya.enum(3),\n                        far: tuya.enum(4),\n                        near: tuya.enum(5),\n                    }),\n                ],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [104, \"medium_motion_detection_distance\", tuya.valueConverter.divideBy100],\n                [105, \"medium_motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [106, \"illuminance\", tuya.valueConverter.raw],\n                [107, \"indicator\", tuya.valueConverter.onOff],\n                [108, \"small_detection_distance\", tuya.valueConverter.divideBy100],\n                [109, \"small_detection_sensitivity\", tuya.valueConverter.raw],\n                [122, \"target_distance\", tuya.valueConverter.divideBy100],\n                [123, \"minimum_range\", tuya.valueConverter.divideBy100],\n                // Not exposed DPs/untested\n                // [103, 'motion_false_detection', tuya.valueConverter.raw],\n                // [113, 'breathe_false_detection', tuya.valueConverter.raw],\n                // [3, 'mov_minimum_distance', tuya.valueConverter.raw],\n                // [110, 'micro_minimum_distance', tuya.valueConverter.raw],\n                // [111, 'motionless_minimum_distance', tuya.valueConverter.raw],\n                // [112, 'reset_setting', tuya.valueConverter.raw],\n                // [114, 'time', tuya.valueConverter.raw],\n                // [115, 'alarm_time', tuya.valueConverter.raw],\n                // [116, 'alarm_volume', tuya.valueConverterBasic.lookup(\n                //  {'low': tuya.enum(0), 'medium': tuya.enum(1), 'high': tuya.enum(2), 'mute': tuya.enum(3)})],\n                // [117, 'working_mode', tuya.valueConverterBasic.lookup(\n                // {'arm': tuya.enum(0), 'off': tuya.enum(1), 'alarm': tuya.enum(2),  'doorbell': tuya.enum(3)})],\n                // [118, 'auto1', tuya.valueConverter.raw],\n                // [119, 'auto2', tuya.valueConverter.raw],\n                // [120, 'auto3', tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZM\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_2aaelwxk\", \"_TZE200_kb5noeto\", \"_TZE200_tyffvoij\"]),\n        model: \"ZG-204ZM\",\n        vendor: \"Tuya\",\n        description: \"PIR 24Ghz human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.enum(\"motion_state\", ea.STATE, [\"none\", \"large\", \"small\", \"static\"]).withDescription(\"Motion state\"),\n            e.illuminance(),\n            e.battery(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Presence keep time\"),\n            e\n                .numeric(\"static_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Static detection distance\"),\n            e\n                .numeric(\"static_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Static detection sensitivity\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n            e\n                .enum(\"motion_detection_mode\", ea.STATE_SET, [\"only_pir\", \"pir_and_radar\", \"only_radar\"])\n                .withDescription(\"Motion detection mode (Firmware version>=0122052017)\"),\n            e\n                .numeric(\"motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Motion detection sensitivity (Firmware version>=0122052017)\"),\n        ],\n\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"illuminance\", tuya.valueConverter.raw],\n                [\n                    101,\n                    \"motion_state\",\n                    tuya.valueConverterBasic.lookup({\n                        none: tuya.enum(0),\n                        large: tuya.enum(1),\n                        small: tuya.enum(2),\n                        static: tuya.enum(3),\n                    }),\n                ],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [4, \"static_detection_distance\", tuya.valueConverter.divideBy100],\n                [2, \"static_detection_sensitivity\", tuya.valueConverter.raw],\n                [107, \"indicator\", tuya.valueConverter.onOff],\n                [121, \"battery\", tuya.valueConverter.raw],\n                [\n                    122,\n                    \"motion_detection_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        only_pir: tuya.enum(0),\n                        pir_and_radar: tuya.enum(1),\n                        only_radar: tuya.enum(2),\n                    }),\n                ],\n                [123, \"motion_detection_sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_zxbtub8r\"]),\n        model: \"TS110E_1gang_1\",\n        vendor: \"Tuya\",\n        description: \"1 channel dimmer\",\n        extend: [m.light({powerOnBehavior: false, configureReporting: true, effect: false}), tuya.modernExtend.tuyaMagicPacket()],\n        fromZigbee: [tuya.fz.power_on_behavior_1, fz.TS110E_switch_type, fz.TS110E, fz.on_off],\n        toZigbee: [tz.TS110E_light_onoff_brightness, tuya.tz.power_on_behavior_1, tz.TS110E_options],\n        exposes: [e.power_on_behavior(), tuya.exposes.switchType(), e.min_brightness(), e.max_brightness()],\n        configure: tuya.configureMagicPacket,\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_ngqk6jia\", \"_TZ3210_weaqkhab\", \"_TZ3210_k1msuvg6\"]),\n        model: \"TS110E_1gang_2\",\n        vendor: \"Tuya\",\n        description: \"1 channel dimmer\",\n        whiteLabel: [\n            tuya.whitelabel(\"Lonsonho\", \"QS-Zigbee-D02-TRIAC-L_1\", \"1 channel dimmer\", [\"_TZ3210_weaqkhab\"]),\n            tuya.whitelabel(\"Lonsonho\", \"QS-Zigbee-D02-TRIAC-LN_1\", \"1 channel dimmer\", [\"_TZ3210_ngqk6jia\"]),\n        ],\n        ota: true,\n        fromZigbee: [fz.TS110E, fz.TS110E_light_type, tuya.fz.power_on_behavior_1, fz.on_off],\n        toZigbee: [tz.TS110E_onoff_brightness, tz.TS110E_options, tuya.tz.power_on_behavior_1, tz.light_brightness_move, tzLocal.ts110eCountdown],\n        exposes: (device, options) => {\n            // https://github.com/Koenkk/zigbee2mqtt/issues/26791#issuecomment-2765734859\n            const countdownValueStep = device.manufacturerName === \"_TZ3210_ngqk6jia\" ? 30 : 1;\n            return [\n                e.light_brightness().withMinBrightness().withMaxBrightness(),\n                tuya.exposes.lightType().withAccess(ea.ALL),\n                e.power_on_behavior().withAccess(ea.ALL),\n                tuya.exposes.switchType(),\n                tuya.exposes.countdown().withValueStep(countdownValueStep),\n            ];\n        },\n        extend: [\n            m.deviceAddCustomCluster(\"genOnOff\", {\n                ID: Zcl.Clusters.genOnOff.ID,\n                attributes: {},\n                commands: {\n                    tuyaCountdown: {\n                        ID: 0xf0,\n                        parameters: [{name: \"data\", type: 1008 /* BUFFER */}],\n                    },\n                },\n                commandsResponse: {},\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"genLevelCtrl\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_ysfo0wla\"]),\n        model: \"EKAC-T3095Z\",\n        vendor: \"Ekaza\",\n        description: \"1 channel dimmer\",\n        fromZigbee: [fz.TS110E, tuya.fz.power_on_behavior_1, fz.on_off],\n        toZigbee: [tz.TS110E_onoff_brightness, tz.TS110E_options, tuya.tz.power_on_behavior_1, tz.light_brightness_move],\n        exposes: [e.light_brightness().withMinBrightness().withMaxBrightness(), e.power_on_behavior().withAccess(ea.ALL)],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"genLevelCtrl\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_wdexaypg\"]),\n        model: \"TS110E_2gang_1\",\n        vendor: \"Tuya\",\n        description: \"2 channel dimmer\",\n        extend: [\n            m.deviceEndpoints({endpoints: {l1: 1, l2: 2}}),\n            m.light({\n                powerOnBehavior: false,\n                endpointNames: [\"l1\", \"l2\"],\n                configureReporting: true,\n            }),\n        ],\n        fromZigbee: [tuya.fz.power_on_behavior_1, fz.TS110E_switch_type, fz.TS110E],\n        toZigbee: [tz.TS110E_light_onoff_brightness, tuya.tz.power_on_behavior_1, tz.TS110E_options],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.min_brightness().withEndpoint(\"l1\"),\n            e.max_brightness().withEndpoint(\"l1\"),\n            e.min_brightness().withEndpoint(\"l2\"),\n            e.max_brightness().withEndpoint(\"l2\"),\n            e.power_on_behavior(),\n            tuya.exposes.switchType().withEndpoint(\"l1\"),\n            tuya.exposes.switchType().withEndpoint(\"l2\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_pagajpog\", \"_TZ3210_4ubylghk\", \"_TZ3210_vfwhhldz\", \"_TZ3210_3mpwqzuu\", \"_TZ3210_mt5xjoy6\"]),\n        model: \"TS110E_2gang_2\",\n        vendor: \"Tuya\",\n        description: \"2 channel dimmer\",\n        whiteLabel: [tuya.whitelabel(\"Nedis\", \"ZBWD20RD\", \"SmartLife Triac Dimmer\", [\"_TZ3210_mt5xjoy6\"])],\n        fromZigbee: [fz.TS110E, fz.TS110E_light_type, tuya.fz.power_on_behavior_1, fz.on_off],\n        toZigbee: [tz.TS110E_onoff_brightness, tz.TS110E_options, tuya.tz.power_on_behavior_1, tz.light_brightness_move],\n        meta: {multiEndpoint: true},\n        exposes: [\n            e.power_on_behavior(),\n            e.light_brightness().withMinBrightness().withMaxBrightness().withEndpoint(\"l1\"),\n            e.light_brightness().withMinBrightness().withMaxBrightness().withEndpoint(\"l2\"),\n            tuya.exposes.switchType().withEndpoint(\"l1\"),\n            tuya.exposes.switchType().withEndpoint(\"l2\"),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"genLevelCtrl\"]);\n            await reporting.onOff(endpoint);\n        },\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nslr42tt\"]),\n        model: \"TS0601_3_phase_clamp_meter\",\n        vendor: \"Tuya\",\n        description: \"3-phase clamp power meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [\n            {vendor: \"MatSee Plus\", model: \"PC321-Z-TY\"},\n            {vendor: \"OWON\", model: \"PC321-Z-TY\"},\n        ],\n        exposes: [\n            e.ac_frequency(),\n            e.temperature(),\n            e.current(),\n            e.power(),\n            e.energy(),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"c\"),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"c\"),\n        ],\n        meta: {\n            multiEndpointSkip: [\"power_factor\", \"power_factor_phase_b\", \"power_factor_phase_c\", \"energy\"],\n            tuyaDatapoints: [\n                [132, \"ac_frequency\", tuya.valueConverter.raw],\n                [133, \"temperature\", tuya.valueConverter.divideBy10],\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [101, \"energy_a\", tuya.valueConverter.divideBy1000],\n                [111, \"energy_b\", tuya.valueConverter.divideBy1000],\n                [121, \"energy_c\", tuya.valueConverter.divideBy1000],\n                [131, \"current\", tuya.valueConverter.divideBy1000],\n                [9, \"power\", tuya.valueConverter.power],\n                [102, \"power_factor_a\", tuya.valueConverter.raw],\n                [112, \"power_factor_b\", tuya.valueConverter.raw],\n                [122, \"power_factor_c\", tuya.valueConverter.raw],\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")],\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"b\")],\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"c\")],\n                [134, \"device_status\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_x8fp01wi\", \"_TZE204_x8fp01wi\"]),\n        model: \"TS0601_3_phase_clamp_meter_relay\",\n        vendor: \"Tuya\",\n        description: \"3-phase clamp power meter with relay\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [{vendor: \"Wenzhou Taiye Electric\", model: \"TAC7361C BI\"}],\n        exposes: [\n            e.switch().setAccess(\"state\", ea.STATE_SET),\n            e.power(),\n            e.energy(),\n            e.produced_energy(),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [16, \"state\", tuya.valueConverter.onOff],\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [9, \"power\", tuya.valueConverter.power],\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")],\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"b\")],\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"c\")],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0049\"],\n        model: \"TS0049\",\n        vendor: \"Tuya\",\n        description: \"Water valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            tuya.exposes.errorStatus(),\n            tuya.exposes.switch(),\n            tuya.exposes.batteryState(),\n            tuya.exposes.countdown().withValueMin(0).withValueMax(255).withUnit(\"minutes\").withDescription(\"Max on time in minutes\"),\n        ],\n        meta: {\n            tuyaSendCommand: \"sendData\",\n            tuyaDatapoints: [\n                [26, \"error_status\", tuya.valueConverter.raw],\n                [101, \"state\", tuya.valueConverter.onOff],\n                [111, \"countdown\", tuya.valueConverter.raw],\n                [115, \"battery_state\", tuya.valueConverter.batteryState],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0049\", [\"_TZ3290_ixd9mvv4\"]),\n        model: \"LYAI-14\",\n        vendor: \"Tuya\",\n        description: \"Solar intelligent timed water valve controller\",\n        extend: [m.battery(), m.onOff({powerOnBehavior: false}), tuya.modernExtend.tuyaBase({dp: true})],\n        // Countdown is not working properly yet - device ignores it and uses the default (10 minutes)\n        // Countdown can be set using the Tuya app/hub and it will persist\n        fromZigbee: [fz.battery, fz.on_off /*tuya.fz.on_off_countdown,*/],\n        toZigbee: [tz.on_off /*tuya.tz.on_off_countdown,*/],\n        exposes: [\n            tuya.exposes.countdown().withAccess(ea.ALL),\n            e.numeric(\"error_status\", ea.STATE).withDescription(\"Device error code\"),\n            e.enum(\"rain_sensor_status\", ea.STATE, [\"rain\", \"no_rain\"]).withDescription(\"Rain sensor state\"),\n            e.binary(\"rain_sensor_switch\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enable/disable rain sensor\"),\n            e.enum(\"battery_state\", ea.STATE, [\"no_charge\", \"charging\", \"charged\"]).withDescription(\"Battery charging state\"),\n        ],\n        meta: {\n            tuyaSendCommand: \"sendData\",\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [4, \"error_status\", tuya.valueConverter.raw],\n                [11, \"countdown\", tuya.valueConverter.countdown],\n                [101, \"rain_sensor_status\", tuya.valueConverterBasic.lookup({rain: tuya.enum(0), no_rain: tuya.enum(1)})],\n                [102, \"rain_sensor_switch\", tuya.valueConverter.onOff],\n                [103, \"battery_state\", tuya.valueConverterBasic.lookup({no_charge: tuya.enum(0), charging: tuya.enum(1), charged: tuya.enum(2)})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_eaet5qt5\", \"_TZE284_fhvpaltk\"]),\n        model: \"TS0601_water_switch\",\n        vendor: \"Tuya\",\n        description: \"Dual water valve\",\n        fromZigbee: [fz.battery],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.enum(\"valve_status\", ea.STATE, [\"manual\", \"auto\", \"idle\"]).withDescription(\"Valve 1 status (manual, auto, idle)\").withEndpoint(\"l1\"),\n            e.enum(\"valve_status\", ea.STATE, [\"manual\", \"auto\", \"idle\"]).withDescription(\"Valve 2 status (manual, auto, idle)\").withEndpoint(\"l2\"),\n            e.switch().withEndpoint(\"l1\").withDescription(\"Valve 1 on/off\").withLabel(\"Valve 1\"),\n            e.switch().withEndpoint(\"l2\").withDescription(\"Valve 2 on/off\").withLabel(\"Valve 2\"),\n            e\n                .numeric(\"countdown\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withDescription(\"Valve 1 countdown in minutes\")\n                .withValueMin(0)\n                .withValueMax(1440)\n                .withEndpoint(\"l1\"),\n            e\n                .numeric(\"countdown\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withDescription(\"Valve 2 countdown in minutes\")\n                .withValueMin(0)\n                .withValueMax(1440)\n                .withEndpoint(\"l2\"),\n            e.numeric(\"valve_duration\", ea.STATE).withUnit(\"s\").withDescription(\"Valve 1 irrigation last duration in seconds\").withEndpoint(\"l1\"),\n            e.numeric(\"valve_duration\", ea.STATE).withUnit(\"s\").withDescription(\"Valve 2 irrigation last duration in seconds\").withEndpoint(\"l2\"),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff], // Valve 1 on/off\n                [2, \"state_l2\", tuya.valueConverter.onOff], // Valve 2 on/off\n                [13, \"countdown_l1\", tuya.valueConverter.raw], // Valve 1 countdown\n                [14, \"countdown_l2\", tuya.valueConverter.raw], // Valve 2 countdown\n                [25, \"valve_duration_l1\", tuya.valueConverter.raw], // Valve 1 duration\n                [26, \"valve_duration_l2\", tuya.valueConverter.raw], // Valve 2 duration\n                [104, \"valve_status_l1\", tuya.valueConverterBasic.lookup({manual: 0, auto: 1, idle: 2})], // Valve 1 status\n                [105, \"valve_status_l2\", tuya.valueConverterBasic.lookup({manual: 0, auto: 1, idle: 2})], // Valve 2 status\n                [59, \"battery\", tuya.valueConverter.raw],\n            ],\n            multiEndpoint: true, // Enable multi-endpoint support\n        },\n        endpoint: (device) => {\n            return {\n                l1: 1, // Valve 1 uses endpoint 1\n                l2: 1, // Valve 2 also uses endpoint 1\n            };\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_r32ctezx\", \"_TZE204_r32ctezx\"]),\n        model: \"TS0601_fan_switch\",\n        vendor: \"Tuya\",\n        description: \"Fan switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            e.power_on_behavior([\"off\", \"on\"]).withAccess(ea.STATE_SET),\n            tuya.exposes.countdown().withValueMin(0).withValueMax(43200).withUnit(\"s\").withDescription(\"Max ON time in seconds\"),\n            e.numeric(\"fan_speed\", ea.STATE_SET).withValueMin(1).withValueMax(5).withValueStep(1).withDescription(\"Speed off the fan\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [2, \"countdown\", tuya.valueConverter.countdown],\n                [\n                    3,\n                    \"fan_speed\",\n                    tuya.valueConverterBasic.lookup({\n                        \"1\": tuya.enum(0),\n                        \"2\": tuya.enum(1),\n                        \"3\": tuya.enum(2),\n                        \"4\": tuya.enum(3),\n                        \"5\": tuya.enum(4),\n                    }),\n                ],\n                [\n                    11,\n                    \"power_on_behavior\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        on: tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n        whiteLabel: [{vendor: \"Lerlink\", model: \"T2-Z67/T2-W67\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_hmqzfqml\", \"_TZE200_qanl25yu\"]),\n        model: \"TS0601_fan_and_light_switch\",\n        vendor: \"Tuya\",\n        description: \"Fan & light switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.binary(\"status_indication\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Light switch\"),\n            tuya.exposes.switch(),\n            e.power_on_behavior([\"OFF\", \"ON\"]).withAccess(ea.STATE_SET),\n            e.enum(\"fan_speed\", ea.STATE_SET, [\"minimum\", \"medium\", \"maximum\"]).withDescription(\"Speed of the fan\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    101,\n                    \"fan_speed\",\n                    tuya.valueConverterBasic.lookup({\n                        minimum: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        maximum: tuya.enum(2),\n                    }),\n                ],\n                [\n                    11,\n                    \"power_on_behavior\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [5, \"status_indication\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [{vendor: \"Liwokit\", model: \"Fan+Light-01\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_lawxy9e2\", \"_TZE204_lawxy9e2\"]),\n        model: \"TS0601_fan_5_levels_and_light_switch\",\n        vendor: \"Tuya\",\n        description: \"Fan with 5 levels & light switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.binary(\"status_indication\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Light switch\"),\n            tuya.exposes.switch(),\n            e.power_on_behavior([\"OFF\", \"ON\"]).withAccess(ea.STATE_SET).withDescription(\"Fan On Off\"),\n            e.numeric(\"fan_speed\", ea.STATE_SET).withValueMin(1).withValueMax(5).withValueStep(1).withDescription(\"Speed off the fan\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    3,\n                    \"fan_speed\",\n                    tuya.valueConverterBasic.lookup(\n                        {\n                            \"1\": tuya.enum(0),\n                            \"2\": tuya.enum(1),\n                            \"3\": tuya.enum(2),\n                            \"4\": tuya.enum(3),\n                            \"5\": tuya.enum(4),\n                        },\n                        \"5\",\n                    ),\n                ],\n                [\n                    11,\n                    \"power_on_behavior\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [5, \"status_indication\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [{vendor: \"Liwokit\", model: \"Fan+Light-01\"}],\n    },\n    {\n        zigbeeModel: [\"TS0224\"],\n        model: \"TS0224\",\n        vendor: \"Tuya\",\n        description: \"Smart light & sound siren\",\n        fromZigbee: [],\n        toZigbee: [tz.warning, tzLocal.TS0224],\n        exposes: [\n            e.warning(),\n            e.binary(\"light\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the light of the alarm ON/OFF\"),\n            e\n                .numeric(\"duration\", ea.STATE_SET)\n                .withValueMin(60)\n                .withValueMax(3600)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Duration of the alarm\"),\n            e.enum(\"volume\", ea.STATE_SET, [\"mute\", \"low\", \"medium\", \"high\"]).withDescription(\"Volume of the alarm\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0041\", [\"_TZ3000_fa9mlvja\"]),\n        model: \"IH-K663\",\n        vendor: \"Tuya\",\n        description: \"Smart button\",\n        exposes: [e.battery(), e.battery_voltage(), e.action([\"single\", \"double\"])],\n        fromZigbee: [tuya.fz.on_off_action, fz.battery],\n        toZigbee: [],\n        configure: tuya.configureMagicPacket,\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\n            \"_TZ3000_cayepv1a\",\n            \"_TZ3000_lepzuhto\",\n            \"_TZ3000_qystbcjg\",\n            \"_TZ3000_zrm3oxsh\",\n            \"_TZ3000_303avxxt\",\n            \"_TZ3000_ibefeicf\",\n            \"_TZ3000_zjchz7pd\",\n            \"_TZ3000_zv6x8bt2\",\n        ]),\n        model: \"TS011F_with_threshold\",\n        description: \"Din rail switch with power monitoring and threshold settings\",\n        vendor: \"Tuya\",\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                electricalMeasurements: true,\n                electricalMeasurementsFzConverter: fzLocal.TS011F_electrical_measurement,\n                powerOutageMemory: true,\n                indicatorMode: true,\n                onOffCountdown: true,\n            }),\n        ],\n        fromZigbee: [fz.temperature, fzLocal.TS011F_threshold],\n        toZigbee: [tzLocal.TS011F_threshold],\n        exposes: (device, options) => {\n            const exposes: Expose[] = [];\n            if (![\"_TZ3000_303avxxt\", \"_TZ3000_ibefeicf\", \"_TZ3000_zjchz7pd\"].includes(device.manufacturerName)) {\n                exposes.push(\n                    e.temperature(),\n                    e\n                        .numeric(\"temperature_threshold\", ea.STATE_SET)\n                        .withValueMin(40)\n                        .withValueMax(100)\n                        .withValueStep(1)\n                        .withUnit(\"°C\")\n                        .withDescription(\"High temperature threshold\"),\n                    e.binary(\"temperature_breaker\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"High temperature breaker\"),\n                );\n            }\n            exposes.push(\n                e\n                    .numeric(\"power_threshold\", ea.STATE_SET)\n                    .withValueMin(1)\n                    .withValueMax(26)\n                    .withValueStep(1)\n                    .withUnit(\"kW\")\n                    .withDescription(\"High power threshold\"),\n                e.binary(\"power_breaker\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"High power breaker\"),\n                e\n                    .numeric(\"over_current_threshold\", ea.STATE_SET)\n                    .withValueMin(1)\n                    .withValueMax(64)\n                    .withValueStep(1)\n                    .withUnit(\"A\")\n                    .withDescription(\"Over-current threshold\"),\n                e.binary(\"over_current_breaker\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Over-current breaker\"),\n                e\n                    .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                    .withValueMin(220)\n                    .withValueMax(265)\n                    .withValueStep(1)\n                    .withUnit(\"V\")\n                    .withDescription(\"Over-voltage threshold\"),\n                e.binary(\"over_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Over-voltage breaker\"),\n                e\n                    .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                    .withValueMin(76)\n                    .withValueMax(240)\n                    .withValueStep(1)\n                    .withUnit(\"V\")\n                    .withDescription(\"Under-voltage threshold\"),\n                e.binary(\"under_voltage_breaker\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Under-voltage breaker\"),\n            );\n            return exposes;\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await endpoint.command(\"genBasic\", \"tuyaSetup\", {});\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"msTemperatureMeasurement\"]);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"haElectricalMeasurement\", \"seMetering\"]);\n            await reporting.rmsVoltage(endpoint, {change: 5});\n            await reporting.rmsCurrent(endpoint, {change: 50});\n            await reporting.activePower(endpoint, {change: 10});\n            await reporting.currentSummDelivered(endpoint);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Tongou\", \"TO-Q-SY2-163JZT\", \"Smart circuit breaker\", [\"_TZ3000_cayepv1a\"]),\n            tuya.whitelabel(\"EARU\", \"EAKCB-T-M-Z\", \"Smart circuit breaker\", [\"_TZ3000_lepzuhto\"]),\n            tuya.whitelabel(\"EARU\", \"EAYCB-Z-2P\", \"Smart circuit breaker with leakage protection\", [\"_TZ3000_zrm3oxsh\"]),\n            tuya.whitelabel(\"UNSH\", \"SMKG-1KNL-EU-Z\", \"Smart circuit Breaker\", [\"_TZ3000_qystbcjg\"]),\n            tuya.whitelabel(\"Tomzn\", \"TOB9Z-VAP\", \"Smart circuit breaker\", [\"_TZ3000_303avxxt\", \"_TZ3000_ibefeicf\"]),\n            tuya.whitelabel(\"Immax\", \"07573L\", \"Smart circuit breaker\", [\"_TZ3000_zjchz7pd\"]),\n            tuya.whitelabel(\"Moes\", \"A5\", \"Smart circuit breaker\", [\"_TZ3000_zv6x8bt2\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3000_hdc8bbha\"]),\n        model: \"QS-Zigbee-SEC01-U\",\n        vendor: \"Tuya\",\n        description: \"Zigbee 3.0 smart light switch module 1 gang\",\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            // Device advertises itself as Router but is an EndDevice\n            device.type = \"EndDevice\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3218_hdc8bbha\"]),\n        model: \"QS-Zigbee-SEC01-DC\",\n        vendor: \"Tuya\",\n        description: \"Mini 1 Gang Zigbee Switch Module\",\n        extend: [tuya.modernExtend.tuyaOnOff({switchType: true})],\n        configure: async (device, coordinatorEndpoint) => {\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            device.powerSource = \"Mains (single phase)\";\n            // Device advertises itself as Router but is an EndDevice\n            device.type = \"EndDevice\";\n            device.save();\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3000_m8f3z8ju\"]),\n        model: \"QS-Zigbee-SEC02-U\",\n        vendor: \"Tuya\",\n        description: \"Zigbee 3.0 smart light switch module 2 gang\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_bmqxalil\", \"_TZ3000_w1tcofu8\"]),\n        model: \"TS0001_switch_1_gang\",\n        vendor: \"Tuya\",\n        description: \"1-Gang switch with backlight\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Homeetec\", \"Homeetec_37022454\", \"1 Gang switch with backlight\", [\"_TZ3000_bmqxalil\"]),\n            tuya.whitelabel(\"RoomsAI\", \"RoomsAI_37022454\", \"1 Gang switch with backlight\", [\"_TZ3000_w1tcofu8\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_65ajyxua\", \"_TZ3000_qq9ahj6z\"]),\n        model: \"FZB-1\",\n        vendor: \"Nova Digital\",\n        description: \"1-Gang switch with power-on behavior and indicator mode\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorMode: true,\n                inchingSwitch: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"iHseno\", \"_TZ3000_qq9ahj6z\", \"1-gang touch switch\", [\"_TZ3000_qq9ahj6z\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_pv4puuxi\", \"_TZ3000_avky2mvc\", \"_TZ3000_785olaiq\", \"_TZ3000_qxcnwv26\"]),\n        model: \"TS0003_switch_3_gang\",\n        vendor: \"Tuya\",\n        description: \"3-Gang switch with backlight\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                endpoints: [\"left\", \"center\", \"right\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {left: 1, center: 2, right: 3};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Homeetec\", \"37022474_1\", \"3 Gang switch with backlight\", [\"_TZ3000_pv4puuxi\"]),\n            tuya.whitelabel(\"RoomsAI\", \"37022474_2\", \"3 Gang switch with backlight\", [\"_TZ3000_avky2mvc\"]),\n            tuya.whitelabel(\"Nova Digital\", \"WS-US-ZB\", \"3 Gang switch with backlight\", [\"_TZ3000_785olaiq\"]),\n            tuya.whitelabel(\"Nova Digital\", \"FZB-3\", \"3 Gang physical switch with backlight\", [\"_TZ3000_qxcnwv26\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_hewlydpz\"]),\n        model: \"TS0601_switch_4_gang_2\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch with backlight\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.backlightModeOffOn(),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [7, \"backlight_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Homeetec\", \"37022714\", \"4 Gang switch with backlight\", [\"_TZE200_hewlydpz\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_p6vz3wzt\", \"_TZE284_uqfph8ah\"]),\n        model: \"TS0601_cover_5\",\n        vendor: \"Tuya\",\n        description: \"Curtain/blind switch\",\n        options: [exposes.options.invert_cover()],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"calibration\", ea.STATE_SET, [\"START\", \"END\"]).withDescription(\"Calibration\"),\n            e.binary(\"backlight_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Backlight\"),\n            e.enum(\"motor_steering\", ea.STATE_SET, [\"FORWARD\", \"BACKWARD\"]).withDescription(\"Motor Steering\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child Lock\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [\n                    3,\n                    \"calibration\",\n                    tuya.valueConverterBasic.lookup({\n                        START: tuya.enum(0),\n                        END: tuya.enum(1),\n                    }),\n                ],\n                [7, \"backlight_mode\", tuya.valueConverter.onOff],\n                [\n                    8,\n                    \"motor_steering\",\n                    tuya.valueConverterBasic.lookup({\n                        FORWARD: tuya.enum(0),\n                        BACKWARD: tuya.enum(1),\n                    }),\n                ],\n                [103, \"child_lock\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Homeetec\", \"37022483\", \"Curtain/blind switch\", [\"_TZE200_p6vz3wzt\"]),\n            tuya.whitelabel(\"BSEED\", \"_TZE284_uqfph8ah\", \"Curtain/blind switch\", [\"_TZE284_uqfph8ah\"]),\n        ],\n    },\n    {\n        zigbeeModel: [\"TS030F\"],\n        model: \"TS030F\",\n        vendor: \"Tuya\",\n        description: \"Smart blind controller\",\n        fromZigbee: [fz.cover_position_tilt, fz.tuya_cover_options_2],\n        toZigbee: [tz.cover_position_tilt, tz.cover_state, tzLocal.TS030F_border, tz.moes_cover_calibration, tz.tuya_cover_reversal],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\", \"closuresWindowCovering\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n            await reporting.currentPositionLiftPercentage(endpoint);\n        },\n        whiteLabel: [tuya.whitelabel(\"Lidl\", \"HG09648\", \"Livarno roller blinds\", [\"_TZB000_42ha4rsc\"])],\n        exposes: [\n            e.cover_position(),\n            e.enum(\"border\", ea.SET, [\"up\", \"down\", \"up_delete\", \"down_delete\"]),\n            e.numeric(\"calibration_time\", ea.ALL).withValueMin(0).withValueMax(100),\n            e\n                .binary(\"motor_reversal\", ea.ALL, \"ON\", \"OFF\")\n                .withDescription(\n                    \"Reverse the motor, resets all endpoints! Also the upper border after hardware initialisation. Be careful!\" +\n                        \"After this you have to turn off and turn on the roller so that it can drive into the uppest position.\",\n                ),\n        ],\n    },\n\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"TLSR82xx\"]),\n        model: \"TS0601_cover_with_1_switch\",\n        vendor: \"Tuya\",\n        description: \"Curtain/blind switch with 1 Gang switch\",\n        options: [exposes.options.invert_cover()],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            e.enum(\"calibration\", ea.STATE_SET, [\"START\", \"END\"]).withDescription(\"Calibration\"),\n            e.binary(\"backlight_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Backlight\"),\n            e.enum(\"motor_steering\", ea.STATE_SET, [\"FORWARD\", \"BACKWARD\"]).withDescription(\"Motor Steering\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child Lock\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [\n                    3,\n                    \"calibration\",\n                    tuya.valueConverterBasic.lookup({\n                        START: tuya.enum(0),\n                        END: tuya.enum(1),\n                    }),\n                ],\n                [7, \"backlight_mode\", tuya.valueConverter.onOff],\n                [\n                    8,\n                    \"motor_steering\",\n                    tuya.valueConverterBasic.lookup({\n                        FORWARD: tuya.enum(0),\n                        BACKWARD: tuya.enum(1),\n                    }),\n                ],\n                [101, \"state_l1\", tuya.valueConverter.onOff],\n                [103, \"child_lock\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Homeetec\", \"37022493\", \"Curtain/blind switch with 1 Gang switch\", [\"_TZE200_jhkttplm\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_5nldle7w\"]),\n        model: \"TS0601_cover_with_2_switch\",\n        vendor: \"Tuya\",\n        description: \"Curtain/blind switch with 2 Gang switch\",\n        options: [exposes.options.invert_cover()],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            e.enum(\"calibration\", ea.STATE_SET, [\"START\", \"END\"]).withDescription(\"Calibration\"),\n            e.binary(\"backlight_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Backlight\"),\n            e.enum(\"motor_steering\", ea.STATE_SET, [\"FORWARD\", \"BACKWARD\"]).withDescription(\"Motor Steering\"),\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Child Lock\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPosition],\n                [\n                    3,\n                    \"calibration\",\n                    tuya.valueConverterBasic.lookup({\n                        START: tuya.enum(0),\n                        END: tuya.enum(1),\n                    }),\n                ],\n                [7, \"backlight_mode\", tuya.valueConverter.onOff],\n                [\n                    8,\n                    \"motor_steering\",\n                    tuya.valueConverterBasic.lookup({\n                        FORWARD: tuya.enum(0),\n                        BACKWARD: tuya.enum(1),\n                    }),\n                ],\n                [101, \"state_l2\", tuya.valueConverter.onOff],\n                [102, \"state_l1\", tuya.valueConverter.onOff],\n                [103, \"child_lock\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Homeetec\", \"37022173\", \"Curtain/blind switch with 2 Gang switch\", [\"_TZE200_5nldle7w\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_bcusnqt8\"]),\n        model: \"SPM01\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 1P+N system\",\n        ota: true,\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.voltage(),\n            e.power(),\n            e.current(),\n            // Change the description according to the specifications of the device\n            e\n                .energy()\n                .withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [\n                    6,\n                    null,\n                    {\n                        from: (v: Buffer) => {\n                            return {\n                                voltage: v.readUint16BE(0) / 10,\n                                current: ((v.readUint8(2) << 16) + (v.readUint8(3) << 8) + v.readUint8(4)) / 1000,\n                                power: (v.readUint8(5) << 16) + (v.readUint8(6) << 8) + v.readUint8(7),\n                            };\n                        },\n                    },\n                ],\n                [6, \"voltage\", tuya.valueConverter.raw],\n                [6, \"current\", tuya.valueConverter.raw],\n                [6, \"power\", tuya.valueConverter.raw],\n                // [9,'',tuya.valueConverter.raw] // Unknown / datatype=5 (bitmap)\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ves1ycwx\", \"_TZE284_ves1ycwx\", \"_TZE200_ves1ycwx\"]),\n        model: \"SPM02\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"X\"),\n            tuya.exposes.voltageWithPhase(\"Y\"),\n            tuya.exposes.voltageWithPhase(\"Z\"),\n            tuya.exposes.powerWithPhase(\"X\"),\n            tuya.exposes.powerWithPhase(\"Y\"),\n            tuya.exposes.powerWithPhase(\"Z\"),\n            tuya.exposes.currentWithPhase(\"X\"),\n            tuya.exposes.currentWithPhase(\"Y\"),\n            tuya.exposes.currentWithPhase(\"Z\"),\n            // Change the description according to the specifications of the device\n            e\n                .energy()\n                .withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"X\")],\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"Y\")],\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"Z\")],\n                // [9,'',tuya.valueConverter.raw] // Unknown / datatype=5 (bitmap)\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_qhlxve78\", \"_TZE284_qhlxve78\", \"_TZE204_qhlxve78\"]),\n        model: \"SPM01V2\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 1P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.voltage(),\n            e.power(),\n            e.current(),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\"),\n            e.ac_frequency(),\n            e\n                .numeric(\"data_report_duration\", ea.SET)\n                .withValueMin(30)\n                .withValueMax(3600)\n                .withDescription(\n                    \"WARNING: You must update device firmware to V3.1.3 before changing this setting! Use Tuya gateway/app to update firmware. Data report duration set (Threshold value range 30~3600 seconds)\",\n                ),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                // [6, null, tuya.valueConverter.phaseVariant3],\n                [15, \"power_factor\", tuya.valueConverter.raw],\n                // [16, 'clear_energy', tuya.valueConverter.onOff],\n                [\n                    18,\n                    \"data_report_duration\",\n                    {\n                        to: (v: number) => {\n                            const value = Math.max(30, Math.min(3600, Math.round(v)));\n                            const byte1 = (value >> 8) & 0xff;\n                            const byte2 = value & 0xff;\n                            return [\n                                // Unknown what these bytes mean, possibly configures other settings of the device\n                                0x01,\n                                0x01,\n                                0x00,\n                                0x3c,\n                                0x03,\n                                0x01,\n                                0x00,\n                                0xfd,\n                                0x04,\n                                0x00,\n                                0x00,\n                                0xb4,\n                                0x07,\n                                0x01,\n                                0x00,\n                                0x00,\n                                0x08,\n                                0x01,\n                                // Report duration\n                                byte1,\n                                byte2,\n                                // Unknown what these bytes mean, possibly configures other settings of the device\n                                0x09,\n                                0x00,\n                                0x00,\n                                0x00,\n                            ];\n                        },\n                    },\n                ],\n                [101, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [102, \"voltage\", tuya.valueConverter.divideBy10],\n                [103, \"current\", tuya.valueConverter.divideBy1000],\n                [104, \"power\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_v9hkz2yn\", \"_TZE284_v9hkz2yn\", \"_TZE200_v9hkz2yn\"]),\n        model: \"SPM02V2\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\"),\n            e.power(),\n            e.ac_frequency(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                // [6, null, tuya.valueConverter.phaseVariant2WithPhase('X')],\n                // [7, null, tuya.valueConverter.phaseVariant2WithPhase('Y')],\n                // [8, null, tuya.valueConverter.phaseVariant2WithPhase('Z')],\n                [15, \"power_factor\", tuya.valueConverter.raw],\n                [101, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [102, \"voltage_a\", tuya.valueConverter.divideBy10],\n                [103, \"current_a\", tuya.valueConverter.divideBy1000],\n                [104, \"power_a\", tuya.valueConverter.raw],\n                [105, \"voltage_b\", tuya.valueConverter.divideBy10],\n                [106, \"current_b\", tuya.valueConverter.divideBy1000],\n                [107, \"power_b\", tuya.valueConverter.raw],\n                [108, \"voltage_c\", tuya.valueConverter.divideBy10],\n                [109, \"current_c\", tuya.valueConverter.divideBy1000],\n                [110, \"power_c\", tuya.valueConverter.raw],\n                [111, \"power\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_dhotiauw\"]),\n        model: \"2CT\",\n        vendor: \"Tuya\",\n        description: \"Bidirectional energy meter with 80A current clamp\",\n        extend: [tuyaBase({dp: true})],\n        exposes: [\n            e.ac_frequency(),\n            e.voltage(),\n            e.power(),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(3)\n                .withValueMax(60)\n                .withPreset(\"default\", 10, \"Default value\"),\n            e.numeric(\"timestamp_a\", ea.STATE).withDescription(\"Timestamp at power measure (phase a)\"),\n            e.numeric(\"timestamp_b\", ea.STATE).withDescription(\"Timestamp at power measure (phase b)\"),\n            e\n                .numeric(\"calibration_ac_frequency\", ea.STATE_SET)\n                .withDescription(\"Calibration AC frequency\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n            e\n                .numeric(\"calibration_voltage\", ea.STATE_SET)\n                .withDescription(\"Calibration voltage\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n            e\n                .numeric(\"calibration_power_a\", ea.STATE_SET)\n                .withDescription(\"Calibration power A\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n            e\n                .numeric(\"calibration_current_a\", ea.STATE_SET)\n                .withDescription(\"Calibration current A\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n            e\n                .numeric(\"calibration_power_b\", ea.STATE_SET)\n                .withDescription(\"Calibration power B\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n            e\n                .numeric(\"calibration_current_b\", ea.STATE_SET)\n                .withDescription(\"Calibration current B\")\n                .withValueMin(0.5)\n                .withValueMax(1.5)\n                .withValueStep(0.01)\n                .withPreset(\"default\", 1.0, \"Default value\"),\n        ],\n        meta: {\n            multiEndpointSkip: [\"power_factor\", \"power_factor_phase_a\", \"power_factor_phase_b\", \"energy\"],\n            tuyaDatapoints: [\n                [105, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [103, \"power_a\", tuya.valueConverter.divideBy10],\n                [104, \"power_b\", tuya.valueConverter.divideBy10],\n                [19, \"power\", tuya.valueConverter.divideBy10],\n                [20, \"voltage\", tuya.valueConverter.divideBy10],\n                [101, \"current_a\", tuya.valueConverter.divideBy1000],\n                [102, \"current_b\", tuya.valueConverter.divideBy1000],\n                [120, \"power_factor_a\", tuya.valueConverter.raw],\n                [121, \"power_factor_b\", tuya.valueConverter.raw],\n                [115, \"energy_a\", tuya.valueConverter.divideBy100],\n                [117, \"energy_b\", tuya.valueConverter.divideBy100],\n                [122, \"update_frequency\", tuya.valueConverter.raw],\n                [123, \"calibration_voltage\", tuya.valueConverter.divideBy1000],\n                [125, \"calibration_current_a\", tuya.valueConverter.divideBy1000],\n                [126, \"calibration_power_a\", tuya.valueConverter.divideBy1000],\n                [130, \"calibration_current_b\", tuya.valueConverter.divideBy1000],\n                [131, \"calibration_power_b\", tuya.valueConverter.divideBy1000],\n                [124, \"calibration_ac_frequency\", tuya.valueConverter.divideBy1000],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_iwn0gpzz\", \"_TZE204_iwn0gpzz\", \"_TZE284_iwn0gpzz\"]),\n        model: \"SPM01V2.5\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 1P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.voltage(),\n            e.power(),\n            e.current(),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\"),\n            e.ac_frequency(),\n            e\n                .numeric(\"data_report_duration\", ea.SET)\n                .withValueMin(30)\n                .withValueMax(3600)\n                .withDescription(\n                    \"WARNING: You must update device firmware to V3.2.2 before changing this setting! Use Tuya gateway/app to update firmware. Data report duration set (Threshold value range 30~3600 seconds)\",\n                ),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [\n                    18,\n                    \"data_report_duration\",\n                    {\n                        to: (v: number) => {\n                            const value = Math.max(30, Math.min(3600, Math.round(v)));\n                            const byte1 = (value >> 8) & 0xff;\n                            const byte2 = value & 0xff;\n                            return [\n                                // Other settings of the device\n                                0x01,\n                                0x01,\n                                0x00,\n                                0x3c,\n                                0x03,\n                                0x01,\n                                0x00,\n                                0xfd,\n                                0x04,\n                                0x00,\n                                0x00,\n                                0xb4,\n                                0x07,\n                                0x01,\n                                0x00,\n                                0x00,\n                                0x08,\n                                0x01,\n                                // Report duration\n                                byte1,\n                                byte2,\n                                // Only modify the report duration\n                                0x09,\n                                0x00,\n                                0x00,\n                                0x00,\n                            ];\n                        },\n                    },\n                ],\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [102, \"voltage\", tuya.valueConverter.divideBy10],\n                [103, \"current\", tuya.valueConverter.divideBy1000],\n                [104, \"power\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ny94onlb\", \"_TZE200_ny94onlb\", \"_TZE284_ny94onlb\"]),\n        model: \"SPM02V2.5\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\").withDescription(\"Total power factor\"),\n            e.power(),\n            e.ac_frequency(),\n            e.numeric(\"data_report_duration\", ea.SET).withValueMin(30).withValueMax(3600),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [\n                    18,\n                    \"data_report_duration\",\n                    {\n                        to: (v: number) => {\n                            const value = Math.max(30, Math.min(3600, Math.round(v)));\n                            const byte1 = (value >> 8) & 0xff;\n                            const byte2 = value & 0xff;\n                            return [\n                                // Other settings of the device\n                                0x01,\n                                0x01,\n                                0x00,\n                                0x3c,\n                                0x02,\n                                0x00,\n                                0x00,\n                                0x0a,\n                                0x03,\n                                0x01,\n                                0x00,\n                                0xfd,\n                                0x04,\n                                0x00,\n                                0x00,\n                                0xb4,\n                                0x05,\n                                0x01,\n                                0x00,\n                                0x00,\n                                0x07,\n                                0x01,\n                                0x00,\n                                0x00,\n                                0x08,\n                                0x01,\n                                // Report duration\n                                byte1,\n                                byte2,\n                                // Only modify the report duration\n                                0x09,\n                                0x00,\n                                0x00,\n                                0x00,\n                            ];\n                        },\n                    },\n                ],\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [29, \"power\", tuya.valueConverter.raw],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [102, \"voltage_a\", tuya.valueConverter.divideBy10],\n                [103, \"current_a\", tuya.valueConverter.divideBy1000],\n                [104, \"power_a\", tuya.valueConverter.raw],\n                [105, \"voltage_b\", tuya.valueConverter.divideBy10],\n                [106, \"current_b\", tuya.valueConverter.divideBy1000],\n                [107, \"power_b\", tuya.valueConverter.raw],\n                [108, \"voltage_c\", tuya.valueConverter.divideBy10],\n                [109, \"current_c\", tuya.valueConverter.divideBy1000],\n                [110, \"power_c\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_dikb3dp6\", \"_TZE204_dikb3dp6\", \"_TZE284_dikb3dp6\"]),\n        model: \"SPM02V3\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\").withDescription(\"Total power factor\"),\n            e.power().withDescription(\"Total active power\"),\n            e.ac_frequency(),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"c\"),\n            tuya.exposes.energyProducedWithPhase(\"a\"),\n            tuya.exposes.energyProducedWithPhase(\"b\"),\n            tuya.exposes.energyProducedWithPhase(\"c\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"c\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(30)\n                .withValueMax(3600)\n                .withPreset(\"default\", 10, \"Default value\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [29, \"power\", tuya.valueConverter.raw],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [102, \"update_frequency\", tuya.valueConverterBasic.divideBy(1)],\n                [103, \"voltage_a\", tuya.valueConverter.divideBy10],\n                [104, \"current_a\", tuya.valueConverter.divideBy1000],\n                [105, \"power_a\", tuya.valueConverter.raw],\n                [108, \"power_factor_a\", tuya.valueConverter.raw],\n                [109, \"energy_a\", tuya.valueConverter.divideBy100],\n                [110, \"energy_produced_a\", tuya.valueConverter.divideBy100],\n                [112, \"voltage_b\", tuya.valueConverter.divideBy10],\n                [113, \"current_b\", tuya.valueConverter.divideBy1000],\n                [114, \"power_b\", tuya.valueConverter.raw],\n                [117, \"power_factor_b\", tuya.valueConverter.raw],\n                [118, \"energy_b\", tuya.valueConverter.divideBy100],\n                [119, \"energy_produced_b\", tuya.valueConverter.divideBy100],\n                [121, \"voltage_c\", tuya.valueConverter.divideBy10],\n                [122, \"current_c\", tuya.valueConverter.divideBy1000],\n                [123, \"power_c\", tuya.valueConverter.raw],\n                [126, \"power_factor_c\", tuya.valueConverter.raw],\n                [127, \"energy_c\", tuya.valueConverter.divideBy100],\n                [128, \"energy_produced_c\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ugekduaj\", \"_TZE200_ugekduaj\", \"_TZE204_loejka0i\"]),\n        model: \"SDM01\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [tuya.whitelabel(\"Nous\", \"D4Z\", \"Smart energy monitor for 3P+N system\", [\"_TZE204_loejka0i\"])],\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\").withDescription(\"Total power factor\"),\n            e.power().withDescription(\"Total active power\"),\n            e.ac_frequency(),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"c\"),\n            tuya.exposes.energyProducedWithPhase(\"a\"),\n            tuya.exposes.energyProducedWithPhase(\"b\"),\n            tuya.exposes.energyProducedWithPhase(\"c\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"c\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [15, \"power_factor\", tuya.valueConverter.raw],\n                [101, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [102, \"voltage_a\", tuya.valueConverter.divideBy10],\n                [103, \"current_a\", tuya.valueConverter.divideBy1000],\n                [104, \"power_a\", tuya.valueConverter.raw],\n                [105, \"voltage_b\", tuya.valueConverter.divideBy10],\n                [106, \"current_b\", tuya.valueConverter.divideBy1000],\n                [107, \"power_b\", tuya.valueConverter.raw],\n                [108, \"voltage_c\", tuya.valueConverter.divideBy10],\n                [109, \"current_c\", tuya.valueConverter.divideBy1000],\n                [110, \"power_c\", tuya.valueConverter.raw],\n                [111, \"power\", tuya.valueConverter.raw],\n                [112, \"energy_a\", tuya.valueConverter.divideBy100],\n                [114, \"energy_b\", tuya.valueConverter.divideBy100],\n                [116, \"energy_c\", tuya.valueConverter.divideBy100],\n                [113, \"energy_produced_a\", tuya.valueConverter.divideBy100],\n                [115, \"energy_produced_b\", tuya.valueConverter.divideBy100],\n                [117, \"energy_produced_c\", tuya.valueConverter.divideBy100],\n                [118, \"power_factor_a\", tuya.valueConverter.raw],\n                [119, \"power_factor_b\", tuya.valueConverter.raw],\n                [120, \"power_factor_c\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_gomuk3dc\", \"_TZE284_gomuk3dc\", \"_TZE200_gomuk3dc\"]),\n        model: \"SDM01V1.5\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 3P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\").withDescription(\"Total power factor\"),\n            e.power().withDescription(\"Total active power\"),\n            e.ac_frequency(),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"c\"),\n            tuya.exposes.energyProducedWithPhase(\"a\"),\n            tuya.exposes.energyProducedWithPhase(\"b\"),\n            tuya.exposes.energyProducedWithPhase(\"c\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"c\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(30)\n                .withValueMax(3600)\n                .withPreset(\"default\", 10, \"Default value\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [29, \"power\", tuya.valueConverter.raw],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [102, \"update_frequency\", tuya.valueConverterBasic.divideBy(1)],\n                [103, \"voltage_a\", tuya.valueConverter.divideBy10],\n                [104, \"current_a\", tuya.valueConverter.divideBy1000],\n                [105, \"power_a\", tuya.valueConverter.raw],\n                [108, \"power_factor_a\", tuya.valueConverter.raw],\n                [109, \"energy_a\", tuya.valueConverter.divideBy100],\n                [110, \"energy_produced_a\", tuya.valueConverter.divideBy100],\n                [112, \"voltage_b\", tuya.valueConverter.divideBy10],\n                [113, \"current_b\", tuya.valueConverter.divideBy1000],\n                [114, \"power_b\", tuya.valueConverter.raw],\n                [117, \"power_factor_b\", tuya.valueConverter.raw],\n                [118, \"energy_b\", tuya.valueConverter.divideBy100],\n                [119, \"energy_produced_b\", tuya.valueConverter.divideBy100],\n                [121, \"voltage_c\", tuya.valueConverter.divideBy10],\n                [122, \"current_c\", tuya.valueConverter.divideBy1000],\n                [123, \"power_c\", tuya.valueConverter.raw],\n                [126, \"power_factor_c\", tuya.valueConverter.raw],\n                [127, \"energy_c\", tuya.valueConverter.divideBy100],\n                [128, \"energy_produced_c\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_78ioiaml\", \"_TZE284_78ioiaml\", \"_TZE200_78ioiaml\"]),\n        model: \"SDM02V1\",\n        vendor: \"Tuya\",\n        description: \"Smart energy monitor for 2P+N system\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.voltageWithPhase(\"l1\"),\n            tuya.exposes.voltageWithPhase(\"l2\"),\n            tuya.exposes.powerWithPhase(\"l1\"),\n            tuya.exposes.powerWithPhase(\"l2\"),\n            tuya.exposes.currentWithPhase(\"l1\"),\n            tuya.exposes.currentWithPhase(\"l2\"),\n            e.energy().withDescription(\"Total forward active energy\"),\n            e.produced_energy().withDescription(\"Total reverse active energy\"),\n            e.power_factor().withUnit(\"%\").withDescription(\"Total power factor\"),\n            e.power().withDescription(\"Total active power\"),\n            e.ac_frequency(),\n            tuya.exposes.energyWithPhase(\"l1\"),\n            tuya.exposes.energyWithPhase(\"l2\"),\n            tuya.exposes.energyProducedWithPhase(\"l1\"),\n            tuya.exposes.energyProducedWithPhase(\"l2\"),\n            tuya.exposes.powerFactorWithPhase(\"l1\"),\n            tuya.exposes.powerFactorWithPhase(\"l2\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(30)\n                .withValueMax(3600)\n                .withPreset(\"default\", 10, \"Default value\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [29, \"power\", tuya.valueConverter.raw],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [102, \"update_frequency\", tuya.valueConverterBasic.divideBy(1)],\n                [103, \"voltage_l1\", tuya.valueConverter.divideBy10],\n                [104, \"current_l1\", tuya.valueConverter.divideBy1000],\n                [105, \"power_l1\", tuya.valueConverter.raw],\n                [108, \"power_factor_l1\", tuya.valueConverter.raw],\n                [109, \"energy_l1\", tuya.valueConverter.divideBy100],\n                [110, \"energy_produced_l1\", tuya.valueConverter.divideBy100],\n                [112, \"voltage_l2\", tuya.valueConverter.divideBy10],\n                [113, \"current_l2\", tuya.valueConverter.divideBy1000],\n                [114, \"power_l2\", tuya.valueConverter.raw],\n                [117, \"power_factor_l2\", tuya.valueConverter.raw],\n                [118, \"energy_l2\", tuya.valueConverter.divideBy100],\n                [119, \"energy_produced_l2\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ac0fhfiq\", \"_TZE284_ac0fhfiq\"]),\n        model: \"TS0601_bidirectional_energy meter\",\n        vendor: \"Tuya\",\n        description: \"Bidirectional energy meter with 150A Current Clamp\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.energy(),\n            e.produced_energy(),\n            e.power(),\n            e.voltage(),\n            e.current(),\n            e.enum(\"energy_flow\", ea.STATE, [\"consuming\", \"producing\"]).withDescription(\"Direction of energy\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [2, \"produced_energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant3],\n                [102, \"energy_flow\", tuya.valueConverterBasic.lookup({consuming: 0, producing: 1})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_vmcgja59\",\n            \"_TZE204_dvosyycn\",\n            \"_TZE284_dvosyycn\",\n            \"_TZE200_wktrysab\",\n            \"_TZE204_wktrysab\",\n            \"_TZE204_nvxorhcj\",\n            \"_TZE204_tdhnhhiy\",\n        ]),\n        model: \"TS0601_switch_8\",\n        vendor: \"Tuya\",\n        description: \"ZYXH 8 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n            tuya.exposes.switch().withEndpoint(\"l7\"),\n            tuya.exposes.switch().withEndpoint(\"l8\"),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1, l7: 1, l8: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [0x65, \"state_l7\", tuya.valueConverter.onOff],\n                [0x66, \"state_l8\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Nova Digital\", \"ZTS-8W-B\", \"8 Gang Switch\", [\"_TZE204_nvxorhcj\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_adlblwab\"]),\n        model: \"TS0601_switch_8_2\",\n        vendor: \"Tuya\",\n        description: \"8 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n            tuya.exposes.switch().withEndpoint(\"l7\"),\n            tuya.exposes.switch().withEndpoint(\"l8\"),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l3\"),\n            tuya.exposes.countdown().withEndpoint(\"l4\"),\n            tuya.exposes.countdown().withEndpoint(\"l5\"),\n            tuya.exposes.countdown().withEndpoint(\"l6\"),\n            tuya.exposes.countdown().withEndpoint(\"l7\"),\n            tuya.exposes.countdown().withEndpoint(\"l8\"),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1, l7: 1, l8: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [7, \"state_l7\", tuya.valueConverter.onOff],\n                [8, \"state_l8\", tuya.valueConverter.onOff],\n                [9, \"countdown_l1\", tuya.valueConverter.countdown],\n                [10, \"countdown_l2\", tuya.valueConverter.countdown],\n                [11, \"countdown_l3\", tuya.valueConverter.countdown],\n                [12, \"countdown_l4\", tuya.valueConverter.countdown],\n                [13, \"countdown_l5\", tuya.valueConverter.countdown],\n                [14, \"countdown_l6\", tuya.valueConverter.countdown],\n                [15, \"countdown_l7\", tuya.valueConverter.countdown],\n                [16, \"countdown_l8\", tuya.valueConverter.countdown],\n                [27, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_7sjncirf\"]),\n        model: \"TS0601_switch_10\",\n        vendor: \"Tuya\",\n        description: \"10 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [...Array.from({length: 10}, (_, i) => tuya.exposes.switch().withEndpoint(`l${i + 1}`))],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                l7: 1,\n                l8: 1,\n                l9: 1,\n                l10: 1,\n                l11: 1,\n                l12: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [0x65, \"state_l7\", tuya.valueConverter.onOff],\n                [0x66, \"state_l8\", tuya.valueConverter.onOff],\n                [0x67, \"state_l9\", tuya.valueConverter.onOff],\n                [0x68, \"state_l10\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_dqolcpcp\", \"_TZE284_dqolcpcp\"]),\n        model: \"TS0601_switch_12\",\n        vendor: \"Tuya\",\n        description: \"ZXYH 12 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [...Array.from({length: 12}, (_, i) => tuya.exposes.switch().withEndpoint(`l${i + 1}`))],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                l7: 1,\n                l8: 1,\n                l9: 1,\n                l10: 1,\n                l11: 1,\n                l12: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [0x65, \"state_l7\", tuya.valueConverter.onOff],\n                [0x66, \"state_l8\", tuya.valueConverter.onOff],\n                [0x67, \"state_l9\", tuya.valueConverter.onOff],\n                [0x68, \"state_l10\", tuya.valueConverter.onOff],\n                [0x69, \"state_l11\", tuya.valueConverter.onOff],\n                [0x6a, \"state_l12\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    // TS011F\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_8fdayfch\", \"_TZ3000_1hwjutgo\", \"_TZ3000_lnggrqqi\", \"_TZ3000_tvuarksa\"]),\n        model: \"TS011F_1\",\n        vendor: \"Tuya\",\n        description: \"Switch\",\n        extend: [tuya.modernExtend.tuyaOnOff()],\n        whiteLabel: [\n            {vendor: \"Mumubiz\", model: \"ZJSB9-80Z\"},\n            tuya.whitelabel(\"KTNNKG\", \"ZB1248-10A\", \"Relay switch\", [\"_TZ3000_8fdayfch\"]),\n            tuya.whitelabel(\"UseeLink\", \"SM-AZ713\", \"Smart water/gas valve\", [\"_TZ3000_tvuarksa\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_rqbjepe8\", \"_TZ3000_uwkja6z1\"]),\n        model: \"TS011F_4\",\n        description: \"2 gang plug\",\n        vendor: \"Tuya\",\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                electricalMeasurements: true,\n                powerOutageMemory: true,\n                indicatorMode: true,\n                childLock: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n            tuya.modernExtend.electricityMeasurementPoll(),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {\n            multiEndpoint: true,\n            multiEndpointSkip: [\"energy\", \"current\", \"voltage\", \"power\"],\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            endpoint.saveClusterAttributeKeyValue(\"haElectricalMeasurement\", {\n                acCurrentDivisor: 1000,\n                acCurrentMultiplier: 1,\n            });\n            endpoint.saveClusterAttributeKeyValue(\"seMetering\", {\n                divisor: 100,\n                multiplier: 1,\n            });\n            device.save();\n        },\n        whiteLabel: [tuya.whitelabel(\"Nous\", \"A4Z\", \"2 gang outdoor plug\", [\"_TZ3000_rqbjepe8\", \"_TZ3000_uwkja6z1\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_cfnprab5\", \"_TZ3000_o005nuxx\", \"_TZ3000_gdyjfvgm\"]),\n        model: \"TS011F_5\",\n        description: \"Power strip 5 gang\",\n        vendor: \"Tuya\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOutageMemory: true,\n                childLock: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\", \"l5\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4, l5: 5};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ID of [1, 2, 3, 4, 5]) {\n                await reporting.bind(device.getEndpoint(ID), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"UseeLink\", \"SM-0306E-2W\", \"4 gang switch, with USB\", [\"_TZ3000_cfnprab5\"]),\n            tuya.whitelabel(\"UseeLink\", \"SM-O301-AZ\", \"AU 4 plug 10A power board + USB\", [\"_TZ3000_o005nuxx\"]),\n        ],\n    },\n    {\n        zigbeeModel: [\"SM0202\"],\n        model: \"SM0202\",\n        vendor: \"Tuya\",\n        description: \"Motion sensor\",\n        fromZigbee: [fz.ias_occupancy_alarm_1_with_timeout, fz.battery],\n        toZigbee: [],\n        exposes: [e.occupancy(), e.battery_low(), e.battery(), e.battery_voltage()],\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genPowerCfg\"]);\n            await reporting.batteryPercentageRemaining(endpoint);\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Cleverio\", \"SS200\", \"Motion sensor\", [\"_TYZB01_z2umiwvq\"]),\n            tuya.whitelabel(\"Marmitek\", \"SM0202_1\", \"Motion sensor\", [\"_TYZB01_yr95mpib\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3210_dse8ogfy\", \"_TZ3210_j4pdtz9v\"]),\n        model: \"TS0001_fingerbot\",\n        vendor: \"Tuya\",\n        description: \"Zigbee fingerbot plus\",\n        whiteLabel: [tuya.whitelabel(\"Adaprox\", \"TS0001_fingerbot_1\", \"Zigbee fingerbot plus\", [\"_TZ3210_dse8ogfy\"])],\n        fromZigbee: [fz.on_off, tuya.fz.datapoints],\n        toZigbee: [tz.on_off, tuya.tz.datapoints],\n        exposes: [\n            e.switch(),\n            e.battery(),\n            e.enum(\"mode\", ea.STATE_SET, [\"click\", \"switch\", \"program\"]).withDescription(\"Working mode\"),\n            e.numeric(\"lower\", ea.STATE_SET).withValueMin(50).withValueMax(100).withValueStep(1).withUnit(\"%\").withDescription(\"Down movement limit\"),\n            e.numeric(\"upper\", ea.STATE_SET).withValueMin(0).withValueMax(50).withValueStep(1).withUnit(\"%\").withDescription(\"Up movement limit\"),\n            e.numeric(\"delay\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withUnit(\"s\").withDescription(\"Sustain time\"),\n            e.binary(\"reverse\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Reverse\"),\n            e.binary(\"touch\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Touch control\"),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        meta: {\n            tuyaSendCommand: \"sendData\",\n            tuyaDatapoints: [\n                [\n                    0x65,\n                    \"mode\",\n                    tuya.valueConverterBasic.lookup({\n                        click: tuya.enum(0),\n                        switch: tuya.enum(1),\n                        program: tuya.enum(2),\n                    }),\n                ],\n                [0x66, \"lower\", tuya.valueConverter.raw],\n                [0x67, \"delay\", tuya.valueConverter.raw],\n                [\n                    0x68,\n                    \"reverse\",\n                    tuya.valueConverterBasic.lookup({\n                        ON: tuya.enum(1),\n                        OFF: tuya.enum(0),\n                    }),\n                ],\n                [0x69, \"battery\", tuya.valueConverter.raw],\n                [0x6a, \"upper\", tuya.valueConverter.raw],\n                [0x6b, \"touch\", tuya.valueConverterBasic.lookup({ON: true, OFF: false})],\n                // ? [0x6c, '', tuya.valueConverter.onOff],\n                [0x6d, \"program\", tuya.valueConverter.raw],\n                // ? [0x70, '', tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_8eazvzo6\"]),\n        model: \"SWS6TZ-WHITE\",\n        vendor: \"Tuya\",\n        description: \"6 gang wall switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.switch().withEndpoint(\"l1\"),\n            e.switch().withEndpoint(\"l2\"),\n            e.switch().withEndpoint(\"l3\"),\n            e.switch().withEndpoint(\"l4\"),\n            e.switch().withEndpoint(\"l5\"),\n            e.switch().withEndpoint(\"l6\"),\n            e.current(),\n            e.power(),\n            e.voltage(),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [21, \"current\", tuya.valueConverter.divideBy1000],\n                [22, \"power\", tuya.valueConverter.divideBy10],\n                [23, \"voltage\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_0j5jma9b\", \"_TZE200_h2rctifa\"]),\n        model: \"ZS-TYG3-SM-61Z\",\n        vendor: \"Tuya\",\n        description: \"Smart switch (4 gang + 2 scene) with backlight and neutral wire\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\"})],\n        exposes: [\n            tuya.exposes.switch().withDescription(\"All Switches\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l3\"),\n            tuya.exposes.countdown().withEndpoint(\"l4\"),\n            tuya.exposes.countdown().withEndpoint(\"l5\"),\n            tuya.exposes.countdown().withEndpoint(\"l6\"),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n        ],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                state: 1,\n                backlight: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [7, \"countdown_l1\", tuya.valueConverter.countdown],\n                [8, \"countdown_l2\", tuya.valueConverter.countdown],\n                [9, \"countdown_l3\", tuya.valueConverter.countdown],\n                [10, \"countdown_l4\", tuya.valueConverter.countdown],\n                [11, \"countdown_l5\", tuya.valueConverter.countdown],\n                [12, \"countdown_l6\", tuya.valueConverter.countdown],\n                [13, \"state\", tuya.valueConverter.onOff],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_wunufsil\"]),\n        model: \"ZS-TYG3-SM-21Z\",\n        vendor: \"Tuya\",\n        description: \"2 gang smart switch with backlight and neutral wire\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            tuya.exposes.switch().withDescription(\"All Switches\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            e.power_on_behavior().withAccess(ea.STATE_SET),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, state: 1, backlight: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [7, \"countdown_l1\", tuya.valueConverter.countdown],\n                [8, \"countdown_l2\", tuya.valueConverter.countdown],\n                [13, \"state\", tuya.valueConverter.onOff],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_vhy3iakz\"]),\n        model: \"ZS-TYG3-SM-31Z\",\n        vendor: \"Tuya\",\n        description: \"3 gang smart switch with backlight and neutral wire\",\n        exposes: [\n            tuya.exposes.switch().withDescription(\"All Switches\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l3\"),\n            e.power_on_behavior([\"off\", \"on\", \"previous\"]).withAccess(ea.STATE_SET),\n        ],\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, state: 1, backlight: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [7, \"countdown_l1\", tuya.valueConverter.countdown],\n                [8, \"countdown_l2\", tuya.valueConverter.countdown],\n                [9, \"countdown_l3\", tuya.valueConverter.countdown],\n                [13, \"state\", tuya.valueConverter.onOff],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_k6jhsr0q\", \"_TZE204_unsxl4ir\"]),\n        model: \"ZS-TYG3-SM-41Z\",\n        vendor: \"Tuya\",\n        description: \"4 gang smart switch with backlight and neutral wire\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            tuya.exposes.switch().withDescription(\"All Switches\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            tuya.exposes.countdown().withEndpoint(\"l1\"),\n            tuya.exposes.countdown().withEndpoint(\"l2\"),\n            tuya.exposes.countdown().withEndpoint(\"l3\"),\n            tuya.exposes.countdown().withEndpoint(\"l4\"),\n            e.power_on_behavior([\"off\", \"on\", \"previous\"]).withAccess(ea.STATE_SET),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, state: 1, backlight: 1};\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [7, \"countdown_l1\", tuya.valueConverter.countdown],\n                [8, \"countdown_l2\", tuya.valueConverter.countdown],\n                [9, \"countdown_l3\", tuya.valueConverter.countdown],\n                [10, \"countdown_l4\", tuya.valueConverter.countdown],\n                [13, \"state\", tuya.valueConverter.onOff],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Nova Digital\", \"FZB-4\", \"Interruptor de 4 canais com backlight e neutro\", [\"TZE204_unsxl4ir\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nvodulvi\"]),\n        model: \"M9-zigbee-SL\",\n        vendor: \"Tuya\",\n        description: \"Smart Switch (4 gang + 4 scene) with neutral wire and motion sensing\",\n        fromZigbee: [tuya.fz.datapoints, fz.ias_occupancy_only_alarm_2, tuya.fz.indicator_mode],\n        toZigbee: [tuya.tz.datapoints, tuya.tz.power_on_behavior_1, tuya.tz.backlight_indicator_mode_1],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            ...[1, 2, 3, 4, 5, 6, 7, 8].map((i) => tuya.exposes.switch().withEndpoint(`l${i}`)),\n            ...[1, 2, 3, 4, 5, 6, 7, 8].map((i) => e.power_on_behavior().withAccess(ea.STATE_SET).withEndpoint(`l${i}`)),\n            ...[1, 2, 3, 4, 5, 6, 7, 8].map((i) => tuya.exposes.switchMode().withEndpoint(`l${i}`)),\n            ...[1, 2, 3, 4, 5, 6, 7, 8].map((i) => tuya.exposes.lightMode().withEndpoint(`l${i}`)),\n            tuya.exposes.backlightModeOffOn().withAccess(ea.STATE_SET),\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\", \"scene_7\", \"scene_8\"]),\n            e.presence(),\n            new exposes.Numeric(\"delay\", ea.STATE_SET).withUnit(\"sec\").withDescription(\"light off delay\").withValueMin(0).withValueMax(1000),\n        ],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                state: 1,\n                backlight: 1,\n                l7: 1,\n                l8: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [16, \"backlight_mode\", tuya.valueConverter.onOff],\n                [29, \"power_on_behavior_l1\", tuya.valueConverter.powerOnBehaviorEnum],\n                [30, \"power_on_behavior_l2\", tuya.valueConverter.powerOnBehaviorEnum],\n                [31, \"power_on_behavior_l3\", tuya.valueConverter.powerOnBehaviorEnum],\n                [32, \"power_on_behavior_l4\", tuya.valueConverter.powerOnBehaviorEnum],\n                [33, \"power_on_behavior_l5\", tuya.valueConverter.powerOnBehaviorEnum],\n                [34, \"power_on_behavior_l6\", tuya.valueConverter.powerOnBehaviorEnum],\n                [101, \"action\", tuya.valueConverter.static(\"scene_1\")],\n                [102, \"action\", tuya.valueConverter.static(\"scene_2\")],\n                [103, \"action\", tuya.valueConverter.static(\"scene_3\")],\n                [104, \"action\", tuya.valueConverter.static(\"scene_4\")],\n                [105, \"presence\", tuya.valueConverter.raw],\n                [106, \"delay\", tuya.valueConverter.raw],\n                [108, \"action\", tuya.valueConverter.static(\"scene_5\")],\n                [109, \"action\", tuya.valueConverter.static(\"scene_6\")],\n                [110, \"action\", tuya.valueConverter.static(\"scene_7\")],\n                [111, \"action\", tuya.valueConverter.static(\"scene_8\")],\n                [112, \"state_l7\", tuya.valueConverter.onOff],\n                [113, \"state_l8\", tuya.valueConverter.onOff],\n                [114, \"switch_mode_l1\", tuya.valueConverter.switchMode],\n                [115, \"switch_mode_l2\", tuya.valueConverter.switchMode],\n                [116, \"switch_mode_l3\", tuya.valueConverter.switchMode],\n                [117, \"switch_mode_l4\", tuya.valueConverter.switchMode],\n                [118, \"switch_mode_l5\", tuya.valueConverter.switchMode],\n                [119, \"switch_mode_l6\", tuya.valueConverter.switchMode],\n                [120, \"switch_mode_l7\", tuya.valueConverter.switchMode],\n                [121, \"switch_mode_l8\", tuya.valueConverter.switchMode],\n                [122, \"light_mode_l1\", tuya.valueConverter.lightMode],\n                [123, \"light_mode_l2\", tuya.valueConverter.lightMode],\n                [124, \"light_mode_l3\", tuya.valueConverter.lightMode],\n                [125, \"light_mode_l4\", tuya.valueConverter.lightMode],\n                [126, \"light_mode_l5\", tuya.valueConverter.lightMode],\n                [127, \"light_mode_l6\", tuya.valueConverter.lightMode],\n                [128, \"light_mode_l7\", tuya.valueConverter.lightMode],\n                [129, \"light_mode_l8\", tuya.valueConverter.lightMode],\n                [130, \"power_on_behavior_l7\", tuya.valueConverter.powerOnBehaviorEnum],\n                [131, \"power_on_behavior_l8\", tuya.valueConverter.powerOnBehaviorEnum],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_sooucan5\", \"_TZE204_oqtpvx51\"]),\n        model: \"YXZBRB58\",\n        vendor: \"Tuya\",\n        description: \"Smart human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e.numeric(\"radar_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(9).withValueStep(1).withDescription(\"Sensitivity of the radar\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Minimum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Maximum range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Detection delay\")\n                .withUnit(\"s\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(0).withValueMax(1500).withValueStep(1).withDescription(\"Fading time\").withUnit(\"s\"),\n            e\n                .enum(\"radar_scene\", ea.STATE_SET, [\"default\", \"bathroom\", \"bedroom\", \"sleeping\", \"unknown\"])\n                .withDescription(\"Presets for sensitivity for presence and movement\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [0x01, \"presence\", tuya.valueConverter.trueFalse1],\n                [0x02, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [0x03, \"minimum_range\", tuya.valueConverter.divideBy100],\n                [0x04, \"maximum_range\", tuya.valueConverter.divideBy100],\n                [0x65, \"illuminance\", tuya.valueConverter.raw],\n                [0x66, \"detection_delay\", tuya.valueConverter.divideBy10],\n                [0x67, \"fading_time\", tuya.valueConverter.divideBy10],\n                [\n                    0x68,\n                    \"radar_scene\",\n                    tuya.valueConverterBasic.lookup({\n                        default: tuya.enum(0),\n                        bathroom: tuya.enum(1),\n                        bedroom: tuya.enum(2),\n                        sleeping: tuya.enum(3),\n                        unknown: tuya.enum(4),\n                    }),\n                ],\n                [0x69, \"target_distance\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_86nbew0j\", \"_TZE200_io0zdqh1\", \"_TZE200_drs6j6m5\", \"_TZE200_ywe90lt0\", \"_TZE200_qyss8gjy\"]),\n        model: \"TS0601_light\",\n        vendor: \"Tuya\",\n        description: \"Light\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [tuya.exposes.lightBrightness(), e.power_on_behavior().withAccess(ea.STATE_SET)],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff, {skip: tuya.skip.stateOnAndBrightnessPresent}],\n                [2, \"power_on_behavior\", tuya.valueConverter.powerOnBehavior],\n                [3, \"brightness\", tuya.valueConverter.scale0_254to0_1000],\n            ],\n        },\n        whiteLabel: [\n            tuya.whitelabel(\"Ltech\", \"TY-12-100-400-W1Z\", \"12W 100-400mA Zigbee CC Dimmable LED driver\", [\"_TZE200_86nbew0j\"]),\n            tuya.whitelabel(\"Ltech\", \"TY-75-24-G2Z2\", \"150W 24V Zigbee CV tunable white LED driver\", [\"_TZE200_io0zdqh1\"]),\n            tuya.whitelabel(\"Lifud\", \"LF-AAZ012-0400-42\", \"Zigbee dimmable LED driver 4-40W 220-240Vac\", [\"_TZE200_drs6j6m5\"]),\n            tuya.whitelabel(\"Lifud\", \"LF-GAZ150A6250-24\", \"Lifud Zigbee LED Driver CCT 150W 24V\", [\"_TZE200_ywe90lt0\"]),\n            tuya.whitelabel(\"Lifud\", \"LF-GAZ150B6250-24\", \"Lifud Zigbee LED Driver 150W 24V\", [\"_TZE204_drs6j6m5\"]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_k7mfgaen\", \"_TZE204_fncxk3ob\", \"_TZE284_fncxk3ob\"]),\n        model: \"YXZBSL\",\n        vendor: \"Tuya\",\n        description: \"Smart siren\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.binary(\"alarm\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the light of the alarm ON/OFF\"),\n            e.enum(\"type\", ea.STATE_SET, [\"sound\", \"light\", \"sound+light\", \"normal\"]).withDescription(\"Alarm type\"),\n            e.enum(\"volume\", ea.STATE_SET, [\"mute\", \"low\", \"middle\", \"high\"]).withDescription(\"Volume of the alarm\"),\n            e\n                .enum(\"ringtone\", ea.STATE_SET, [\n                    \"melody1\",\n                    \"melody2\",\n                    \"melody3\",\n                    \"melody4\",\n                    \"melody5\",\n                    \"melody6\",\n                    \"melody7\",\n                    \"melody8\",\n                    \"door\",\n                    \"water\",\n                    \"temperature\",\n                    \"entered\",\n                    \"left\",\n                ])\n                .withDescription(\"Ringtone of the alarm\"),\n            e.enum(\"power_type\", ea.STATE, [\"battery\", \"cable\"]).withDescription(\"Power type\"),\n            e\n                .numeric(\"duration\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(60)\n                .withValueStep(1)\n                .withUnit(\"min\")\n                .withDescription(\"Duration of the alarm\"),\n            e.enum(\"battery_level\", ea.STATE, [\"low\", \"middle\", \"high\"]).withDescription(\"Battery level state\"),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"type\",\n                    tuya.valueConverterBasic.lookup({\n                        sound: tuya.enum(0),\n                        light: tuya.enum(1),\n                        \"sound+light\": tuya.enum(2),\n                        normal: tuya.enum(3),\n                    }),\n                ],\n                [\n                    5,\n                    \"volume\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        middle: tuya.enum(1),\n                        high: tuya.enum(2),\n                        mute: tuya.enum(3),\n                    }),\n                ],\n                [6, \"power_type\", tuya.valueConverterBasic.lookup({cable: false, battery: true})],\n                [7, \"duration\", tuya.valueConverter.raw],\n                [13, \"alarm\", tuya.valueConverter.onOff],\n                [\n                    14,\n                    \"battery_level\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        middle: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [\n                    21,\n                    \"ringtone\",\n                    tuya.valueConverterBasic.lookup({\n                        melody1: tuya.enum(0),\n                        melody2: tuya.enum(1),\n                        melody3: tuya.enum(2),\n                        melody4: tuya.enum(3),\n                        melody5: tuya.enum(4),\n                        melody6: tuya.enum(5),\n                        melody7: tuya.enum(6),\n                        melody8: tuya.enum(7),\n                        door: tuya.enum(8),\n                        water: tuya.enum(9),\n                        temperature: tuya.enum(10),\n                        entered: tuya.enum(11),\n                        left: tuya.enum(12),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_vmcgja59\"]),\n        model: \"ZYXH\",\n        vendor: \"Tuya\",\n        description: \"24 gang switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [...Array.from(Array(24).keys()).map((ep) => tuya.exposes.switch().withEndpoint(`l${ep + 1}`))],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                l7: 1,\n                l8: 1,\n                l9: 1,\n                l10: 1,\n                l11: 1,\n                l12: 1,\n                l13: 1,\n                l14: 1,\n                l15: 1,\n                l16: 1,\n                l17: 1,\n                l18: 1,\n                l19: 1,\n                l20: 1,\n                l21: 1,\n                l22: 1,\n                l23: 1,\n                l24: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [0x65, \"state_l7\", tuya.valueConverter.onOff],\n                [0x66, \"state_l8\", tuya.valueConverter.onOff],\n                [0x67, \"state_l9\", tuya.valueConverter.onOff],\n                [0x68, \"state_l10\", tuya.valueConverter.onOff],\n                [0x69, \"state_l11\", tuya.valueConverter.onOff],\n                [0x6a, \"state_l12\", tuya.valueConverter.onOff],\n                [0x6b, \"state_l13\", tuya.valueConverter.onOff],\n                [0x6c, \"state_l14\", tuya.valueConverter.onOff],\n                [0x6d, \"state_l15\", tuya.valueConverter.onOff],\n                [0x6e, \"state_l16\", tuya.valueConverter.onOff],\n                [0x6f, \"state_l17\", tuya.valueConverter.onOff],\n                [0x70, \"state_l18\", tuya.valueConverter.onOff],\n                [0x71, \"state_l19\", tuya.valueConverter.onOff],\n                [0x72, \"state_l20\", tuya.valueConverter.onOff],\n                [0x73, \"state_l21\", tuya.valueConverter.onOff],\n                [0x74, \"state_l22\", tuya.valueConverter.onOff],\n                [0x75, \"state_l23\", tuya.valueConverter.onOff],\n                [0x76, \"state_l24\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ijxvkhd0\"]),\n        model: \"ZY-M100-24G\",\n        vendor: \"Tuya\",\n        description: \"24G MmWave radar human presence motion sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.enum(\"state\", ea.STATE, [\"none\", \"presence\", \"move\"]).withDescription(\"Presence state\"),\n            e.presence(),\n            e.numeric(\"distance\", ea.STATE).withUnit(\"m\").withDescription(\"Target distance\"),\n            e.illuminance(),\n            e\n                .numeric(\"motion_sensitivity\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withCategory(\"config\")\n                .withDescription(\"Motion sensitivity\"),\n            e\n                .numeric(\"presence_sensitivity\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withCategory(\"config\")\n                .withDescription(\"Presence sensitivity\"),\n            e\n                .numeric(\"max_range\", ea.STATE_SET)\n                .withValueMin(1.5)\n                .withValueMax(5.5)\n                .withValueStep(1)\n                .withUnit(\"m\")\n                .withCategory(\"config\")\n                .withDescription(\"Maximum range\"),\n            e\n                .numeric(\"presence_timeout\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(1500)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Presence timeout\"),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [112, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"motion_sensitivity\", tuya.valueConverter.divideBy10FromOnly],\n                [111, \"presence_sensitivity\", tuya.valueConverter.divideBy10FromOnly],\n                [107, \"max_range\", tuya.valueConverter.divideBy100],\n                [109, \"distance\", tuya.valueConverter.divideBy100],\n                [110, \"presence_timeout\", tuya.valueConverter.raw],\n                [104, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"illuminance_treshold_max\", tuya.valueConverter.raw],\n                [103, \"illuminance_treshold_min\", tuya.valueConverter.raw],\n                [105, \"state\", tuya.valueConverterBasic.lookup({none: 0, presence: 1, move: 2})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_7gclukjs\"]),\n        model: \"ZY-M100-24GV2\",\n        vendor: \"Tuya\",\n        description: \"24G MmWave radar human presence motion sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.enum(\"state\", ea.STATE, [\"none\", \"presence\", \"move\"]).withDescription(\"Presence state sensor\"),\n            e.presence().withDescription(\"Occupancy\"),\n            e.numeric(\"distance\", ea.STATE).withUnit(\"m\").withDescription(\"Target distance\"),\n            e.illuminance().withDescription(\"Illuminance sensor\"),\n            e.numeric(\"move_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Motion Sensitivity\"),\n            e.numeric(\"presence_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Presence Sensitivity\"),\n            e\n                .numeric(\"detection_distance_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8.25)\n                .withValueStep(0.75)\n                .withUnit(\"m\")\n                .withDescription(\"Minimum range\"),\n            e\n                .numeric(\"detection_distance_max\", ea.STATE_SET)\n                .withValueMin(0.75)\n                .withValueMax(9.0)\n                .withValueStep(0.75)\n                .withUnit(\"m\")\n                .withDescription(\"Maximum range\"),\n            e\n                .numeric(\"presence_timeout\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(1500)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Fade time\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [104, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"move_sensitivity\", tuya.valueConverter.raw],\n                [102, \"presence_sensitivity\", tuya.valueConverter.raw],\n                [3, \"detection_distance_min\", tuya.valueConverter.divideBy100],\n                [4, \"detection_distance_max\", tuya.valueConverter.divideBy100],\n                [9, \"distance\", tuya.valueConverter.divideBy10],\n                [105, \"presence_timeout\", tuya.valueConverter.raw],\n                [103, \"illuminance\", tuya.valueConverter.raw],\n                [1, \"state\", tuya.valueConverterBasic.lookup({none: 0, presence: 1, move: 2})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ya4ft0w4\", \"_TZE200_ya4ft0w4\", \"_TZE204_gkfbdvyx\", \"_TZE200_gkfbdvyx\"]),\n        model: \"ZY-M100-24GV3\",\n        vendor: \"Tuya\",\n        description: \"24G MmWave radar human presence motion sensor (added distance switch)\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: (device, options) => {\n            const exps = [\n                e.enum(\"state\", ea.STATE, [\"none\", \"presence\", \"move\"]).withDescription(\"Presence state sensor\"),\n                e.presence().withDescription(\"Occupancy\"),\n                e.numeric(\"distance\", ea.STATE).withUnit(\"m\").withDescription(\"Target distance\"),\n                e.binary(\"find_switch\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"distance switch\"),\n                e.illuminance().withDescription(\"Illuminance sensor\"),\n                e.numeric(\"move_sensitivity\", ea.STATE_SET).withValueMin(1).withValueMax(10).withValueStep(1).withDescription(\"Motion Sensitivity\"),\n                e\n                    .numeric(\"presence_sensitivity\", ea.STATE_SET)\n                    .withValueMin(1)\n                    .withValueMax(10)\n                    .withValueStep(1)\n                    .withDescription(\"Presence Sensitivity\"),\n                e\n                    .numeric(\"presence_timeout\", ea.STATE_SET)\n                    .withValueMin(1)\n                    .withValueMax(15000)\n                    .withValueStep(1)\n                    .withUnit(\"s\")\n                    .withDescription(\"Fade time\"),\n            ];\n            if (!device || device.manufacturerName === \"_TZE204_gkfbdvyx\" || device.manufacturerName === \"_TZE200_gkfbdvyx\") {\n                exps.push(\n                    e\n                        .numeric(\"detection_distance_min\", ea.STATE_SET)\n                        .withValueMin(0)\n                        .withValueMax(6)\n                        .withValueStep(0.5)\n                        .withUnit(\"m\")\n                        .withDescription(\"Minimum range\"),\n                );\n                exps.push(\n                    e\n                        .numeric(\"detection_distance_max\", ea.STATE_SET)\n                        .withValueMin(0.5)\n                        .withValueMax(9.0)\n                        .withValueStep(0.5)\n                        .withUnit(\"m\")\n                        .withDescription(\"Maximum range\"),\n                );\n            } else {\n                exps.push(\n                    e\n                        .numeric(\"detection_distance_min\", ea.STATE_SET)\n                        .withValueMin(0)\n                        .withValueMax(8.25)\n                        .withValueStep(0.75)\n                        .withUnit(\"m\")\n                        .withDescription(\"Minimum range\"),\n                );\n                exps.push(\n                    e\n                        .numeric(\"detection_distance_max\", ea.STATE_SET)\n                        .withValueMin(0.75)\n                        .withValueMax(9.0)\n                        .withValueStep(0.75)\n                        .withUnit(\"m\")\n                        .withDescription(\"Maximum range\"),\n                );\n            }\n            return exps;\n        },\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    null,\n                    {\n                        from: (v: number, meta: Fz.Meta) => {\n                            if (v === 0) {\n                                return {\n                                    state: \"none\",\n                                    presence: false,\n                                };\n                            }\n                            if (v === 1) {\n                                return {\n                                    state: \"presence\",\n                                    presence: true,\n                                };\n                            }\n                            if (v === 2) {\n                                return {\n                                    state: \"move\",\n                                    presence: true,\n                                };\n                            }\n                            return {\n                                state: \"none\",\n                                presence: false,\n                            };\n                        },\n                    },\n                ],\n                [2, \"move_sensitivity\", tuya.valueConverter.raw],\n                [3, \"detection_distance_min\", tuya.valueConverter.divideBy100],\n                [4, \"detection_distance_max\", tuya.valueConverter.divideBy100],\n                [9, \"distance\", tuya.valueConverter.divideBy10],\n                [101, \"find_switch\", tuya.valueConverter.onOff],\n                [102, \"presence_sensitivity\", tuya.valueConverter.raw],\n                [103, \"illuminance\", tuya.valueConverter.raw],\n                [105, \"presence_timeout\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_e9ajs4ft\"]),\n        model: \"CTL-R1-TY-Zigbee\",\n        vendor: \"Tuya\",\n        description: \"24G radar human presence motion sensor.\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.illuminance().withUnit(\"lx\"),\n            e.presence(),\n            e\n                .numeric(\"presence_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1)\n                .withUnit(\"%\")\n                .withDescription(\"Presence sensitivity\"),\n            e\n                .numeric(\"detection_range\", ea.STATE_SET)\n                .withValueMin(1.5)\n                .withValueMax(4.5)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Detection range\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(600)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Presence detection delay\"),\n            e\n                .numeric(\"illuminance_treshold_max\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(2000)\n                .withValueStep(1)\n                .withUnit(\"lx\")\n                .withDescription(\"The max illumiance threshold to turn on the light\"),\n            e\n                .numeric(\"illuminance_treshold_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(2000)\n                .withValueStep(1)\n                .withUnit(\"lx\")\n                .withDescription(\"The min illumiance threshold to turn on the light\"),\n            e\n                .binary(\"presence_illuminance_switch\", ea.STATE_SET, true, false)\n                .withDescription(`Whether to enable 'light_switch' illumination is between min/max threshold`),\n            e\n                .binary(\"light_switch\", ea.STATE, \"ON\", \"OFF\")\n                .withDescription(\"This state will determine the light on/off based on the lighting threshold and presence sensing\"),\n            e.binary(\"light_linkage\", ea.STATE_SET, true, false).withDescription(\"Light linkage\"),\n            e\n                .enum(\"detection_method\", ea.STATE_SET, [\"only_move\", \"exist_move\"])\n                .withDescription(`When 'only_move' is used, presence will only be triggered when there is movement`),\n            e.enum(\"indicator_light\", ea.STATE_SET, [\"presence\", \"off\", \"on\"]).withDescription(\"Controls when the indicator light is turned on\"),\n            e\n                .binary(\"identify\", ea.STATE_SET, true, false)\n                .withDescription(\"After turning on, the indicator light quickly flashes, used to locate devices\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"presence_sensitivity\", tuya.valueConverter.raw],\n                [4, \"detection_range\", tuya.valueConverter.divideBy10],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"illuminance_treshold_max\", tuya.valueConverter.raw],\n                [103, \"illuminance_treshold_min\", tuya.valueConverter.raw],\n                [104, \"detection_delay\", tuya.valueConverter.raw],\n                [109, \"presence_illuminance_switch\", tuya.valueConverter.trueFalseEnum1],\n                [105, \"light_switch\", tuya.valueConverter.onOff],\n                [106, \"light_linkage\", tuya.valueConverter.trueFalseEnum1],\n                [\n                    107,\n                    \"indicator_light\",\n                    tuya.valueConverterBasic.lookup({\n                        presence: tuya.enum(0),\n                        off: tuya.enum(1),\n                        on: tuya.enum(2),\n                    }),\n                ],\n                [\n                    108,\n                    \"detection_method\",\n                    tuya.valueConverterBasic.lookup({\n                        only_move: tuya.enum(0),\n                        exist_move: tuya.enum(1),\n                    }),\n                ],\n                [113, \"find_switch\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE204_sbyx0lm6\",\n            \"_TZE204_clrdrnya\",\n            \"_TZE204_dtzziy1e\",\n            \"_TZE204_iaeejhvf\",\n            \"_TZE204_mtoaryre\",\n            \"_TZE200_mp902om5\",\n            \"_TZE204_pfayrzcw\",\n            \"_TZE284_4qznlkbu\",\n            \"_TZE200_clrdrnya\",\n            \"_TZE200_sbyx0lm6\",\n        ]),\n        model: \"MTG075-ZB-RL\",\n        vendor: \"Tuya\",\n        description: \"2.4G/5.8G human presence sensor with relay\",\n        whiteLabel: [\n            tuya.whitelabel(\"Tuya\", \"MTG275-ZB-RL\", \"2.4G/5.8G MmWave radar human presence motion sensor\", [\"_TZE204_dtzziy1e\"]),\n            tuya.whitelabel(\"Tuya\", \"MTG035-ZB-RL\", \"Human presence sensor with relay\", [\"_TZE204_pfayrzcw\"]),\n            tuya.whitelabel(\"Tuya\", \"MTG235-ZB-RL\", \"24G Human presence sensor with relay\", [\"_TZE204_clrdrnya\", \"_TZE200_clrdrnya\"]),\n            tuya.whitelabel(\"QA\", \"QASZ24R\", \"mmWave 24 Ghz sensor with relay\", [\"_TZE284_4qznlkbu\"]),\n        ],\n        configure: tuya.configureMagicPacket,\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e\n                .numeric(\"radar_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9)\n                .withValueStep(1)\n                .withDescription(\"Detection threshold for the strength of object energy\"),\n            e\n                .numeric(\"detection_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Maximum distance detected by the sensor\"),\n            e\n                .numeric(\"shield_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Nearest distance detected by the sensor\"),\n            e\n                .numeric(\"entry_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9)\n                .withValueStep(1)\n                .withDescription(\"Sensitivity threshold triggered for the first time when the target enters the detection range\"),\n            e\n                .numeric(\"entry_distance_indentation\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Indent the distance inward based on the detection distance\"),\n            e\n                .numeric(\"entry_filter_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withUnit(\"s\")\n                .withDescription(\"Sensitivity threshold triggered for the first time when the target enters the detection range \"),\n            e\n                .numeric(\"departure_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(600)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Confirmation time after the target disappears\"),\n            e\n                .numeric(\"block_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withUnit(\"s\")\n                .withDescription(\"Time for the target to be detected again after switching from manned(occupy) to unmanned(unoccupy) mode\"),\n            e.binary(\"breaker_status\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Remotely control the breaker in standard mode\"),\n            e\n                .enum(\"breaker_mode\", ea.STATE_SET, [\"standard\", \"local\"])\n                .withDescription(\"Breaker mode: standard is remotely controlled, local is automatic\"),\n            e\n                .numeric(\"illuminance_threshold\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(420)\n                .withValueStep(0.1)\n                .withUnit(\"lx\")\n                .withDescription(\"Illumination threshold for local (automatic) switching mode operation\"),\n            e.enum(\"status_indication\", ea.STATE_SET, [\"OFF\", \"ON\"]).withDescription(\"Indicator light will flash when human presence is detected\"),\n            e\n                .enum(\"sensor\", ea.STATE_SET, [\"on\", \"off\", \"occupied\", \"unoccupied\"])\n                .withDescription(\n                    \"The radar sensor can be set in four states: on, off, occupied and unoccupied. For example, if set to occupied, \" +\n                        \"it will continue to maintain presence regardless of whether someone is present or not. If set to unoccupied, the unoccupied \" +\n                        \"state will be maintained permanently.\",\n                ),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [2, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [3, \"shield_range\", tuya.valueConverter.divideBy100],\n                [4, \"detection_range\", tuya.valueConverter.divideBy100],\n                [6, \"equipment_status\", tuya.valueConverter.raw],\n                [9, \"target_distance\", tuya.valueConverter.divideBy100],\n                [101, \"entry_filter_time\", tuya.valueConverter.divideBy10],\n                [102, \"departure_delay\", tuya.valueConverter.raw],\n                [103, \"cline\", tuya.valueConverter.raw],\n                [104, \"illuminance\", tuya.valueConverter.divideBy10],\n                [105, \"entry_sensitivity\", tuya.valueConverter.raw],\n                [106, \"entry_distance_indentation\", tuya.valueConverter.divideBy100],\n                [\n                    107,\n                    \"breaker_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        standard: tuya.enum(0),\n                        local: tuya.enum(1),\n                    }),\n                ],\n                [\n                    108,\n                    \"breaker_status\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [\n                    109,\n                    \"status_indication\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [110, \"illuminance_threshold\", tuya.valueConverter.divideBy10],\n                [\n                    111,\n                    \"breaker_polarity\",\n                    tuya.valueConverterBasic.lookup({\n                        NC: tuya.enum(0),\n                        NO: tuya.enum(1),\n                    }),\n                ],\n                [112, \"block_time\", tuya.valueConverter.divideBy10],\n                [113, \"parameter_setting_result\", tuya.valueConverter.raw],\n                [114, \"factory_parameters\", tuya.valueConverter.raw],\n                [\n                    115,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        on: tuya.enum(0),\n                        off: tuya.enum(1),\n                        occupied: tuya.enum(2),\n                        unoccupied: tuya.enum(3),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_81yrt3lo\", \"_TZE284_81yrt3lo\"]),\n        model: \"PJ-1203A\",\n        vendor: \"Tuya\",\n        description: \"Bidirectional energy meter with 80A current clamp\",\n        fromZigbee: [fzLocal.PJ1203A_strict_fz_datapoints, fzLocal.PJ1203A_sync_time_increase_seq],\n        toZigbee: [tuya.tz.datapoints],\n        extend: [tuya.modernExtend.tuyaBase({timeStart: \"off\"})],\n        options: [\n            e\n                .binary(\"late_energy_flow_a\", ea.SET, true, false)\n                .withDescription(\"Delay channel A publication until the next energy flow update (default false).\"),\n            e\n                .binary(\"late_energy_flow_b\", ea.SET, true, false)\n                .withDescription(\"Delay channel B publication until the next energy flow update (default false).\"),\n            e\n                .binary(\"signed_power_a\", ea.SET, true, false)\n                .withDescription(\"Report energy flow direction for channel A using signed power (default false).\"),\n            e\n                .binary(\"signed_power_b\", ea.SET, true, false)\n                .withDescription(\"Report energy flow direction for channel B using signed power (default false).\"),\n            e.binary(\"invert_energy_flow_a\", ea.SET, true, false).withDescription(\"Report energy flow direction inverted for channel A.\"),\n            e.binary(\"invert_energy_flow_b\", ea.SET, true, false).withDescription(\"Report energy flow direction inverted for channel B.\"),\n        ],\n        exposes: [\n            e.ac_frequency(),\n            e.voltage(),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"ab\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.energyFlowWithPhase(\"a\", [\"sign\"]),\n            tuya.exposes.energyFlowWithPhase(\"b\", [\"sign\"]),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyProducedWithPhase(\"a\"),\n            tuya.exposes.energyProducedWithPhase(\"b\"),\n            e\n                .numeric(\"update_frequency\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withDescription(\"Update frequency\")\n                .withValueMin(3)\n                .withValueMax(60)\n                .withPreset(\"default\", 10, \"Default value\"),\n            // Timestamp a and b are basically equivalent to last_seen\n            // but they indicate when the unsigned value of power_a and power_b\n            // were received. They can be several seconds in the past if\n            // the publication was delayed because of the late_energy_flow options.\n            e\n                .text(\"timestamp_a\", ea.STATE)\n                .withDescription(\"Timestamp at power measure (phase a)\"),\n            e.text(\"timestamp_b\", ea.STATE).withDescription(\"Timestamp at power measure (phase b)\"),\n        ],\n        meta: {\n            multiEndpointSkip: [\"power_factor\", \"power_factor_phase_b\", \"power_factor_phase_c\", \"energy\"],\n            tuyaDatapoints: [\n                [111, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [112, \"voltage\", tuya.valueConverter.divideBy10],\n                [101, null, convLocal.powerPJ1203A(\"a\")], // power_a\n                [105, null, convLocal.powerPJ1203A(\"b\")], // power_b\n                [113, null, convLocal.currentPJ1203A(\"a\")], // current_a\n                [114, null, convLocal.currentPJ1203A(\"b\")], // current_b\n                [110, null, convLocal.powerFactorPJ1203A(\"a\")], // power_factor_a\n                [121, null, convLocal.powerFactorPJ1203A(\"b\")], // power_factor_b\n                [102, null, convLocal.energyFlowPJ1203A(\"a\")], // energy_flow_a or the sign of power_a\n                [104, null, convLocal.energyFlowPJ1203A(\"b\")], // energy_flow_b or the sign of power_b\n                [115, null, convLocal.powerAbPJ1203A()],\n                [106, null, convLocal.energyForwardPJ1203A(\"a\")],\n                [108, null, convLocal.energyForwardPJ1203A(\"b\")],\n                [107, null, convLocal.energyReversePJ1203A(\"a\")],\n                [109, null, convLocal.energyReversePJ1203A(\"b\")],\n                [129, \"update_frequency\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_rks0sgb7\"]),\n        model: \"PC311-Z-TY\",\n        vendor: \"Tuya\",\n        description: \"Bidirectional energy meter with 80A current clamp\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.ac_frequency(),\n            e.voltage(),\n            e.power(),\n            e.current(),\n            e.energy(),\n            e.energy_produced(),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.powerFactorWithPhase(\"a\"),\n            tuya.exposes.powerFactorWithPhase(\"b\"),\n            tuya.exposes.energyWithPhase(\"a\"),\n            tuya.exposes.energyWithPhase(\"b\"),\n            tuya.exposes.energyProducedWithPhase(\"a\"),\n            tuya.exposes.energyProducedWithPhase(\"b\"),\n        ],\n        meta: {\n            multiEndpointSkip: [\"power_factor\", \"power_factor_phase_b\", \"power_factor_phase_c\", \"energy\"],\n            tuyaDatapoints: [\n                [113, \"ac_frequency\", tuya.valueConverter.raw],\n                [108, \"power_a\", tuya.valueConverter.raw],\n                [111, \"power_b\", tuya.valueConverter.raw],\n                [9, \"power\", tuya.valueConverter.raw],\n                [106, \"voltage\", tuya.valueConverter.divideBy10],\n                [107, \"current_a\", tuya.valueConverter.divideBy1000],\n                [110, \"current_b\", tuya.valueConverter.divideBy1000],\n                [105, \"current\", tuya.valueConverter.divideBy1000],\n                [109, \"power_factor_a\", tuya.valueConverter.raw],\n                [112, \"power_factor_b\", tuya.valueConverter.raw],\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [101, \"energy_a\", tuya.valueConverter.divideBy100],\n                [103, \"energy_b\", tuya.valueConverter.divideBy100],\n                [102, \"energy_produced_a\", tuya.valueConverter.divideBy100],\n                [104, \"energy_produced_b\", tuya.valueConverter.divideBy100],\n                [2, \"energy_produced\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_mpbki2zm\"]),\n        model: \"TYBAC-006\",\n        vendor: \"Tuya\",\n        description: \"Wall-mount thermostat for 2-pipe fan-coil unit\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        options: [\n            e\n                .enum(\"control_sequence_of_operation\", ea.SET, [\"cooling_only\", \"cooling_and_heating_4-pipes\"])\n                .withDescription(\"Operating environment of the thermostat\"),\n            e.binary(\"expose_device_state\", ea.SET, true, false).withDescription(\"Expose device power state as a separate property when enabled.\"),\n        ],\n        exposes: (device, options) => {\n            const system_modes = [\"off\", \"cool\", \"heat\", \"fan_only\"];\n            // Device can operate either in 2-pipe or 4-pipe configuration\n            // For 2-pipe configurations remove 'heat' mode\n            switch (options?.control_sequence_of_operation) {\n                case \"cooling_only\":\n                    system_modes.splice(2, 1);\n                    break;\n            }\n\n            const exposes = [\n                e\n                    .climate()\n                    .withLocalTemperature(ea.STATE)\n                    .withSetpoint(\"current_heating_setpoint\", 5, 35, 1, ea.STATE_SET)\n                    .withSystemMode([\"off\", \"cool\", \"heat\", \"fan_only\"], ea.STATE_SET)\n                    .withFanMode([\"low\", \"medium\", \"high\", \"auto\"], ea.STATE_SET)\n                    .withLocalTemperatureCalibration(-5, 5, 0.5, ea.STATE_SET),\n                e.child_lock(),\n                e.min_temperature().withValueMin(5).withValueMax(15),\n                e.max_temperature().withValueMin(15).withValueMax(45),\n                e.binary(\"eco_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"ECO mode ON/OFF\"),\n                e.max_temperature_limit().withDescription(\"ECO Heating energy-saving temperature (default: 20 ºC)\").withValueMin(15).withValueMax(30),\n                e.min_temperature_limit().withDescription(\"ECO Cooling energy-saving temperature (default: 26 ºC)\").withValueMin(15).withValueMax(30),\n                e.deadzone_temperature().withValueMin(0).withValueMax(5).withValueStep(1),\n                e.binary(\"valve\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"3-Way Valve State\"),\n                e.binary(\"manual_mode\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Manual = ON or Schedule = OFF\"),\n                ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            ];\n\n            if (options?.expose_device_state === true) {\n                exposes.unshift(e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON or OFF\"));\n            }\n\n            return exposes;\n        },\n        meta: {\n            publishDuplicateTransaction: true,\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    {\n                        to: async (v: string, meta: Tz.Meta) => {\n                            if (meta.options?.expose_device_state === true) {\n                                await tuya.sendDataPointBool(\n                                    meta.device.endpoints[0],\n                                    1,\n                                    utils.getFromLookup(v, {on: true, off: false}),\n                                    \"dataRequest\",\n                                    1,\n                                );\n                            }\n                        },\n                        from: (v: boolean, meta: Fz.Meta, options?: KeyValue) => {\n                            meta.state.system_mode = v === true ? (meta.state.system_mode_device ?? \"cool\") : \"off\";\n\n                            if (options?.expose_device_state === true) {\n                                return v === true ? \"ON\" : \"OFF\";\n                            }\n\n                            delete meta.state.state;\n                        },\n                    },\n                ],\n                [\n                    2,\n                    \"system_mode\",\n                    {\n                        // Extend system_mode to support 'off' in addition to 'cool', 'heat' and 'fan_only'\n                        to: async (v: string, meta: Tz.Meta) => {\n                            const entity = meta.device.endpoints[0];\n                            // Power State\n                            await tuya.sendDataPointBool(entity, 1, v !== \"off\", \"dataRequest\", 1);\n                            switch (v) {\n                                case \"cool\":\n                                    await tuya.sendDataPointEnum(entity, 2, 0, \"dataRequest\", 1);\n                                    break;\n                                case \"heat\":\n                                    await tuya.sendDataPointEnum(entity, 2, 1, \"dataRequest\", 1);\n                                    break;\n                                case \"fan_only\":\n                                    await tuya.sendDataPointEnum(entity, 2, 2, \"dataRequest\", 1);\n                                    break;\n                            }\n                        },\n                        from: (v: number, meta: Fz.Meta) => {\n                            const modes = [\"cool\", \"heat\", \"fan_only\"];\n                            meta.state.system_mode_device = modes[v];\n                            return modes[v];\n                        },\n                    },\n                ],\n                [4, \"eco_mode\", tuya.valueConverter.onOff],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [19, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [26, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.localTemperatureCalibration],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        auto: tuya.enum(3),\n                    }),\n                ],\n                [36, \"valve\", tuya.valueConverterBasic.lookup({OPEN: 0, CLOSE: 1})],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [103, \"deadzone_temperature\", tuya.valueConverter.raw],\n                [104, \"min_temperature_limit\", tuya.valueConverter.divideBy10],\n                [105, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [106, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [107, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [108, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [109, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [110, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [111, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [112, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [101, \"manual_mode\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_mhxn2jso\"]),\n        model: \"rtsc11r\",\n        vendor: \"Tuya\",\n        description: \"5.8G human presence sensor with relay\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.presence(),\n            e.illuminance().withUnit(\"lx\"),\n            e\n                .numeric(\"detection_delay\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withDescription(\"Detection delay\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"detection_distance\", ea.STATE)\n                .withValueMin(0)\n                .withValueMax(1000)\n                .withValueStep(1)\n                .withDescription(\"Distance of detected person\")\n                .withUnit(\"cm\"),\n            e.numeric(\"sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Detection sensitivity\"),\n            e\n                .numeric(\"keep_time\", ea.STATE_SET)\n                .withValueMin(5)\n                .withValueMax(3600)\n                .withValueStep(1)\n                .withDescription(\"Detection keep time\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(1000)\n                .withValueStep(50)\n                .withDescription(\"Minimum detection range\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"maximum_range\", ea.STATE_SET)\n                .withValueMin(50)\n                .withValueMax(1000)\n                .withValueStep(50)\n                .withDescription(\"Maximum detection range\")\n                .withUnit(\"m\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [12, \"detection_delay\", tuya.valueConverter.divideBy10],\n                [19, \"detection_distance\", tuya.valueConverter.raw],\n                [20, \"illuminance\", tuya.valueConverter.raw],\n                [101, \"sensitivity\", tuya.valueConverter.divideBy10],\n                [102, \"keep_time\", tuya.valueConverter.raw],\n                [111, \"minimum_range\", tuya.valueConverter.divideBy100],\n                [112, \"maximum_range\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_kyhbrfyl\"]),\n        model: \"NAS-PS09B2\",\n        vendor: \"NEO\",\n        description: \"Human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.occupancy(),\n            e.enum(\"human_motion_state\", ea.STATE, [\"none\", \"small\", \"large\"]).withDescription(\"Human Motion State\"),\n            e\n                .numeric(\"departure_delay\", ea.STATE_SET)\n                .withUnit(\"s\")\n                .withValueMin(3)\n                .withValueMax(600)\n                .withValueStep(1)\n                .withDescription(\"Presence Time\"),\n            e\n                .numeric(\"radar_range\", ea.STATE_SET)\n                .withUnit(\"cm\")\n                .withValueMin(150)\n                .withValueMax(600)\n                .withValueStep(75)\n                .withDescription(\"Motion Range Detection\"),\n            e\n                .numeric(\"radar_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(7)\n                .withValueStep(1)\n                .withDescription(\"Motion Detection Sensitivity\"),\n            e\n                .numeric(\"presence_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(7)\n                .withValueStep(1)\n                .withDescription(\"Motionless Detection Sensitivity\"),\n            e\n                .numeric(\"dis_current\", ea.STATE)\n                .withUnit(\"cm\")\n                .withValueMin(0)\n                .withValueMax(1000)\n                .withValueStep(1)\n                .withLabel(\"Current distance\")\n                .withDescription(\"Current Distance of Detected Motion\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse1],\n                [11, \"human_motion_state\", tuya.valueConverterBasic.lookup({none: 0, small: 1, large: 2})],\n                [12, \"departure_delay\", tuya.valueConverter.raw],\n                [13, \"radar_range\", tuya.valueConverter.raw],\n                [15, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [16, \"presence_sensitivity\", tuya.valueConverter.raw],\n                [19, \"dis_current\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_v1jqz5cy\", \"_TZE200_d9mzkhoq\"]),\n        model: \"BLE-YL01\",\n        vendor: \"Tuya\",\n        description: \"Smart WiFi Zigbee chlorine meter\",\n        whiteLabel: [tuya.whitelabel(\"Tuya\", \"YK-S03\", \"Smart pH and Chlorine Tester for Swimming Pool\", [\"_TZE200_d9mzkhoq\"])],\n        // Don't query too often. Values are not always updated. https://github.com/Koenkk/zigbee2mqtt/issues/18704\n        extend: [\n            tuya.modernExtend.tuyaBase({\n                dp: true,\n                queryOnDeviceAnnounce: true,\n                // https://github.com/Koenkk/zigbee2mqtt/issues/23946#issuecomment-2941182834\n                queryIntervalSeconds: 10 * 60,\n                respondToMcuVersionResponse: true,\n            }),\n            m.poll({\n                key: \"backlight\",\n                defaultIntervalSeconds: 30 * 60,\n                poll: async (device) => {\n                    // Set backlight ever 30 mins, otherwise device stops updating.\n                    // https://github.com/Koenkk/zigbee2mqtt/issues/23946#issuecomment-3176121660\n                    const ep = device.getEndpoint(1);\n                    await tuya.sendDataPointValue(ep, 105, 0, \"dataRequest\", 1);\n                    await utils.sleep(2000);\n                    await tuya.sendDataPointValue(ep, 105, 0, \"dataRequest\", 0);\n                },\n            }),\n        ],\n        exposes: [\n            e.numeric(\"tds\", ea.STATE).withUnit(\"ppm\").withDescription(\"Total Dissolved Solids\"),\n            e.temperature(),\n            e.battery(),\n            e\n                .numeric(\"ph\", ea.STATE)\n                .withUnit(\"pH\")\n                .withDescription(\n                    \"pH value, if the pH value is lower than 6.5, it means that the water quality \" +\n                        \"is too acidic and has impurities, and it is necessary to add disinfectant water for disinfection\",\n                ),\n            e.numeric(\"ec\", ea.STATE).withUnit(\"µS/cm\").withDescription(\"Electrical conductivity\"),\n            e\n                .numeric(\"orp\", ea.STATE)\n                .withUnit(\"mV\")\n                .withDescription(\n                    \"Oxidation Reduction Potential value. If the ORP value is above 850mv, it \" +\n                        \"means that the disinfectant has been added too much, and it is necessary to add water or change the water for neutralization. \" +\n                        \"If the ORP value is below 487mv, it means that too little disinfectant has been added and the pool needs to be disinfected again\",\n                ),\n            e\n                .numeric(\"free_chlorine\", ea.STATE)\n                .withUnit(\"mg/L\")\n                .withDescription(\n                    \"Free chlorine value. The water in the swimming pool should \" +\n                        \"be between 6.5-8ph and ORP should be between 487-840mv, and the chlorine value will be displayed normally. Chlorine will not \" +\n                        \"be displayed if either value is out of range\",\n                ),\n            e.numeric(\"ph_max\", ea.STATE_SET).withUnit(\"pH\").withDescription(\"pH maximal value\").withValueMin(0).withValueMax(140),\n            e.numeric(\"ph_min\", ea.STATE_SET).withUnit(\"pH\").withDescription(\"pH minimal value\").withValueMin(0).withValueMax(140),\n            e\n                .numeric(\"ec_max\", ea.STATE_SET)\n                .withUnit(\"µS/cm\")\n                .withDescription(\"Electrical Conductivity maximal value\")\n                .withValueMin(0)\n                .withValueMax(20000),\n            e\n                .numeric(\"ec_min\", ea.STATE_SET)\n                .withUnit(\"µS/cm\")\n                .withDescription(\"Electrical Conductivity minimal value\")\n                .withValueMin(0)\n                .withValueMax(20000),\n            e\n                .numeric(\"orp_max\", ea.STATE_SET)\n                .withUnit(\"mV\")\n                .withDescription(\"Oxidation Reduction Potential maximal value\")\n                .withValueMin(0)\n                .withValueMax(1200),\n            e\n                .numeric(\"orp_min\", ea.STATE_SET)\n                .withUnit(\"mV\")\n                .withDescription(\"Oxidation Reduction Potential minimal value\")\n                .withValueMin(0)\n                .withValueMax(1200),\n            e\n                .numeric(\"free_chlorine_max\", ea.STATE_SET)\n                .withUnit(\"mg/L\")\n                .withDescription(\"Free Chlorine maximal value\")\n                .withValueMin(0)\n                .withValueMax(40),\n            e\n                .numeric(\"free_chlorine_min\", ea.STATE_SET)\n                .withUnit(\"mg/L\")\n                .withDescription(\"Free Chlorine minimal value\")\n                .withValueMin(0)\n                .withValueMax(40),\n            e.numeric(\"salinity\", ea.STATE).withUnit(\"ppm\").withDescription(\"Salt value\"),\n            e.numeric(\"backlightvalue\", ea.STATE_SET).withUnit(\"gg\").withDescription(\"Backlight Value\").withValueMin(0).withValueMax(1),\n        ],\n        meta: {\n            // All datapoints go in here\n            tuyaDatapoints: [\n                [1, \"tds\", tuya.valueConverter.raw],\n                [2, \"temperature\", tuya.valueConverter.divideBy10],\n                [7, \"battery\", tuya.valueConverter.raw],\n                [\n                    10,\n                    \"ph\",\n                    {\n                        from: (v) => {\n                            if (v > 99) {\n                                return v / 100;\n                            }\n                            return v / 10;\n                        },\n                    },\n                ],\n                [11, \"ec\", tuya.valueConverter.raw],\n                [101, \"orp\", tuya.valueConverter.raw],\n                [102, \"free_chlorine\", tuya.valueConverter.divideBy10],\n                [105, \"backlightvalue\", tuya.valueConverter.raw],\n                [106, \"ph_max\", tuya.valueConverter.raw],\n                [107, \"ph_min\", tuya.valueConverter.raw],\n                [108, \"ec_max\", tuya.valueConverter.raw],\n                [109, \"ec_min\", tuya.valueConverter.raw],\n                [110, \"orp_max\", tuya.valueConverter.raw],\n                [111, \"orp_min\", tuya.valueConverter.raw],\n                [112, \"free_chlorine_max\", tuya.valueConverter.raw],\n                [113, \"free_chlorine_min\", tuya.valueConverter.raw],\n                [117, \"salinity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_mgxy2d9f\"]),\n        model: \"SP02-ZB001\",\n        vendor: \"iAlarm\",\n        description: \"Infrared motion sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [e.tamper(), e.battery(), e.occupancy()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [5, \"tamper\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0201\", [\"_TZE200_iq4ygaai\", \"_TZE200_01fvxamo\"]),\n        model: \"THS317-ET-TY\",\n        vendor: \"Tuya\",\n        description: \"Temperature sensor with probe\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [e.temperature(), e.battery()],\n        whiteLabel: [tuya.whitelabel(\"OWON\", \"THS317-ET-EY\", \"Temperature sensor with probe\", [\"_TZE200_01fvxamo\"])],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"temperature\", tuya.valueConverter.divideBy10],\n                [4, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_iuk8kupi\", \"_TZE204_iuk8kupi\"]),\n        model: \"DCR-RQJ\",\n        vendor: \"Tuya\",\n        description: \"Carbon monoxide sensor gas leak detector\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [e.gas(), tuya.exposes.gasValue().withUnit(\"LEL %\"), e.carbon_monoxide(), e.co()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"gas\", tuya.valueConverter.trueFalseEnum0],\n                [2, \"gas_value\", tuya.valueConverter.divideBy1000],\n                [18, \"carbon_monoxide\", tuya.valueConverter.trueFalseEnum0],\n                [19, \"co\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-101Z\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_nojsjtj2\", \"_TZE200_vrcfo4i0\"]),\n        model: \"ZG-101Z\",\n        vendor: \"Loginovo\",\n        description: \"SOS button\",\n        extend: [\n            tuya.modernExtend.combineActions([\n                tuya.modernExtend.dpAction({dp: 26, lookup: {sos: 0}}),\n                tuya.modernExtend.dpAction({dp: 29, lookup: {emergency: 0}}),\n            ]),\n            m.iasZoneAlarm({zoneType: \"generic\", zoneAttributes: [\"battery_low\"]}),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_muvkrjr5\"]),\n        model: \"SZR07U\",\n        vendor: \"Tuya\",\n        description: \"24GHz millimeter wave radar\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.presence(),\n            e\n                .numeric(\"detection_range\", ea.STATE_SET)\n                .withValueMin(1.5)\n                .withValueMax(6)\n                .withValueStep(0.75)\n                .withUnit(\"m\")\n                .withDescription(\"Maximum range\"),\n            e\n                .numeric(\"radar_sensitivity\", ea.STATE_SET)\n                .withValueMin(68)\n                .withValueMax(90)\n                .withValueStep(1)\n                .withDescription(\"Sensitivity of the radar\"),\n            e\n                .numeric(\"target_distance\", ea.STATE)\n                .withValueMin(0)\n                .withValueMax(1000)\n                .withValueStep(1)\n                .withDescription(\"Distance of detected target\")\n                .withUnit(\"cm\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(3).withValueMax(1799).withValueStep(1).withDescription(\"Fading time\").withUnit(\"s\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [13, \"detection_range\", tuya.valueConverter.divideBy100],\n                [16, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [19, \"target_distance\", tuya.valueConverter.raw],\n                [101, \"indicator\", tuya.valueConverter.onOff],\n                [102, null, null], // toggle to enable presence notifications in app is ignored\n                [103, \"fading_time\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0004\", [\"_TZ3000_5ajpkyq6\"]),\n        model: \"TS0004_switch_module_2\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch module\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchType: true,\n                indicatorMode: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(2), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(3), coordinatorEndpoint, [\"genOnOff\"]);\n            await reporting.bind(device.getEndpoint(4), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n        whiteLabel: [tuya.whitelabel(\"AVATTO\", \"ZWSM16-4-Zigbee\", \"4 gang switch module\", [\"_TZ3000_5ajpkyq6\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS1002\", [\"_TZ3000_etufnltx\"]),\n        model: \"F00XN00-04-1\",\n        vendor: \"FORIA\",\n        description: \"Dimmer 4 scenes\",\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            m.battery({voltage: true}),\n            tuya.modernExtend.combineActions([\n                m.actionEnumLookup<\"genOnOff\", undefined, [\"commandTuyaAction\"]>({\n                    actionLookup: {scene_1: 1, scene_2: 2, scene_3: 3, scene_4: 4},\n                    cluster: \"genOnOff\",\n                    commands: [\"commandTuyaAction\"],\n                    attribute: \"data\",\n                    parse: (msg, attr) => msg.data[attr as \"data\"][1],\n                }),\n                m.commandsOnOff(),\n                m.commandsLevelCtrl({\n                    commands: [\"brightness_move_up\", \"brightness_move_down\", \"brightness_stop\"],\n                }),\n            ]),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_kobbcyum\", \"_TZE284_kobbcyum\", \"_TZE284_hecsejsb\", \"_TZE284_432zhuwe\", \"_TZE204_432zhuwe\"]),\n        model: \"TOWSMR1\",\n        vendor: \"Tongou\",\n        description: \"Single-phase multifunction RCBO (DIN Module)\",\n        extend: [\n            tuya.modernExtend.tuyaBase({\n                dp: true,\n                queryOnConfigure: true,\n                queryIntervalSeconds: 10,\n                timeStart: \"off\",\n                respondToMcuVersionResponse: true,\n            }),\n        ],\n        whiteLabel: [tuya.whitelabel(\"Tongou\", \"TOSA1\", \"Single-phase multifunction RCBO (DIN Module)\", [\"_TZE284_432zhuwe\", \"_TZE204_432zhuwe\"])],\n        exposes: [\n            tuya.exposes.switch(),\n            e.temperature(),\n            e.current(),\n            e.power(),\n            e.voltage(),\n            e.energy(),\n            e.numeric(\"leakage_current\", ea.STATE).withUnit(\"mA\").withDescription(\"Current leakage\"),\n            e\n                .enum(\"event\", ea.STATE, [\n                    \"normal\",\n                    \"over_current_trip\",\n                    \"over_power_trip\",\n                    \"high_temp_trip\",\n                    \"over_voltage_trip\",\n                    \"under_voltage_trip\",\n                    \"over_current_alarm\",\n                    \"over_power_alarm\",\n                    \"high_temp_alarm\",\n                    \"over_voltage_alarm\",\n                    \"under_voltage_alarm\",\n                    \"remote_on\",\n                    \"remote_off\",\n                    \"manual_on\",\n                    \"manual_off\",\n                    \"leakage_trip\",\n                    \"leakage_alarm\",\n                    \"restore_default\",\n                    \"automatic_closing\",\n                    \"electricity_shortage\",\n                    \"electricity_shortage_alarm\",\n                    \"timing_switch_On\",\n                    \"timing_switch_off\",\n                ])\n                .withDescription(\"Last event of the device\"),\n            e.enum(\"over_current_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over current setting\"),\n            e\n                .numeric(\"over_current_threshold\", ea.STATE_SET)\n                .withUnit(\"A\")\n                .withDescription(\"Setup the value on the device\")\n                .withValueMin(1)\n                .withValueMax(40),\n            e.enum(\"over_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over voltage setting\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(240)\n                .withValueMax(295),\n            e.enum(\"under_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Under voltage setting\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(145)\n                .withValueMax(220),\n            e.enum(\"leakage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Leakage setting\"),\n            e\n                .numeric(\"leakage_threshold\", ea.STATE_SET)\n                .withUnit(\"mA\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(30)\n                .withValueMax(100),\n            e.enum(\"temperature_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Temperature setting\"),\n            e\n                .numeric(\"temperature_threshold\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(-25)\n                .withValueMax(100),\n            e.enum(\"over_power_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over power setting\"),\n            e\n                .numeric(\"over_power_threshold\", ea.STATE_SET)\n                .withUnit(\"W\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(1)\n                .withValueMax(25000),\n            e\n                .binary(\"auto_reclosing\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Auto reclosing\")\n                .withDescription(\n                    \"When the circuit breaker trips due to voltage protection, it will automatically close when the circuit voltage returns to normal\",\n                ),\n            e.binary(\"restore_default\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn ON to restore default settings\"),\n            e\n                .binary(\"overcurrent_recloser\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Overcurrent Recloser\")\n                .withDescription(\n                    \"When the circuit breaker trips due to overcurrent protection, it will automatically close when the circuit voltage returns to normal\",\n                ),\n            e\n                .binary(\"leakage_recloser\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Leakage Recloser\")\n                .withDescription(\n                    \"When the circuit breaker trips due to leakage protection, it will automatically close when the circuit voltage returns to normal\",\n                ),\n            e\n                .binary(\"overpower_recloser\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Overpower Recloser\")\n                .withDescription(\n                    \"When the circuit breaker trips due to overpower protection, it will automatically close when the circuit voltage returns to normal\",\n                ),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant2], // voltage and current\n                [15, \"leakage_current\", tuya.valueConverter.raw],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [\n                    110,\n                    \"event\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: 0,\n                        over_current_trip: 1,\n                        over_power_trip: 2,\n                        high_temp_trip: 3,\n                        over_voltage_trip: 4,\n                        under_voltage_trip: 5,\n                        over_current_alarm: 6,\n                        over_power_alarm: 7,\n                        high_temp_alarm: 8,\n                        over_voltage_alarm: 9,\n                        under_voltage_alarm: 10,\n                        remote_on: 11,\n                        remote_off: 12,\n                        manual_on: 13,\n                        manual_off: 14,\n                        leakage_trip: 15,\n                        leakage_alarm: 16,\n                        restore_default: 17,\n                        automatic_closing: 18,\n                        electricity_shortage: 19,\n                        electricity_shortage_alarm: 20,\n                        timing_switch_on: 21,\n                        timing_switch_off: 22,\n                    }),\n                ],\n                [\n                    102,\n                    \"over_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    103,\n                    \"under_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    104,\n                    \"over_current_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    105,\n                    \"over_power_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    107,\n                    \"temperature_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    108,\n                    \"leakage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [112, \"auto_reclosing\", tuya.valueConverter.onOff],\n                [113, \"restore_default\", tuya.valueConverter.onOff],\n                [114, \"over_current_threshold\", tuya.valueConverter.raw],\n                [115, \"over_voltage_threshold\", tuya.valueConverter.raw],\n                [116, \"under_voltage_threshold\", tuya.valueConverter.raw],\n                [117, \"leakage_threshold\", tuya.valueConverter.raw],\n                [118, \"temperature_threshold\", tuya.valueConverter.divideBy10],\n                [119, \"over_power_threshold\", tuya.valueConverter.raw],\n                [131, \"temperature\", tuya.valueConverter.divideBy10],\n                // The ones below might only work for _TZE284_432zhuwe\n                // https://github.com/Koenkk/zigbee-herdsman-converters/pull/9747\n                [143, \"overcurrent_recloser\", tuya.valueConverter.onOff],\n                [144, \"leakage_recloser\", tuya.valueConverter.onOff],\n                [145, \"overpower_recloser\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: [{modelID: \"TS0601\", manufacturerName: \"_TZE284_6ocnqlhn\"}],\n        model: \"TO-Q-SYS-JZT\",\n        vendor: \"Tongou\",\n        description: \"Din rail smart meter\",\n        extend: [\n            tuya.modernExtend.tuyaBase({\n                dp: true,\n                queryOnConfigure: true,\n                queryIntervalSeconds: 10,\n                timeStart: \"off\",\n                respondToMcuVersionResponse: true,\n            }),\n        ],\n        exposes: [\n            tuya.exposes.switch(),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            e.ac_frequency(),\n            e.power_factor().withUnit(\"%\"),\n            e.numeric(\"temperature\", ea.STATE).withUnit(\"°C\").withDescription(\"Current temperature\"),\n            e\n                .enum(\"event\", ea.STATE, [\n                    \"normal\",\n                    \"over_current_trip\",\n                    \"over_power_trip\",\n                    \"high_temp_trip\",\n                    \"over_voltage_trip\",\n                    \"under_voltage_trip\",\n                    \"over_current_alarm\",\n                    \"over_power_alarm\",\n                    \"high_temp_alarm\",\n                    \"over_voltage_alarm\",\n                    \"under_voltage_alarm\",\n                    \"remote_on\",\n                    \"remote_off\",\n                    \"manual_on\",\n                    \"manual_off\",\n                    \"leakage_trip\",\n                    \"leakage_alarm\",\n                    \"restore_default\",\n                    \"automatic_closing\",\n                    \"electricity_shortage\",\n                    \"electricity_shortage_alarm\",\n                    \"timing_switch_On\",\n                    \"timing_switch_off\",\n                ])\n                .withDescription(\"Last event of the device\"),\n            e.enum(\"over_current_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over current setting\"),\n            e\n                .numeric(\"over_current_threshold\", ea.STATE_SET)\n                .withUnit(\"A\")\n                .withDescription(\"Setup the value on the device\")\n                .withValueMin(1)\n                .withValueMax(50),\n            e.enum(\"over_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over voltage setting\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(240)\n                .withValueMax(295),\n            e.enum(\"under_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Under voltage setting\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(90)\n                .withValueMax(220),\n            e.enum(\"temperature_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Temperature setting\"),\n            e\n                .numeric(\"temperature_threshold\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(-25)\n                .withValueMax(80),\n            e.enum(\"over_power_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\", \"Trip\"]).withDescription(\"Over power setting\"),\n            e\n                .numeric(\"over_power_threshold\", ea.STATE_SET)\n                .withUnit(\"W\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(1000)\n                .withValueMax(26000),\n            e.numeric(\"test1\", ea.STATE), // ?\n            e.numeric(\"test5\", ea.STATE), // ?\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [6, null, tuya.valueConverter.phaseVariant2],\n                [13, \"test1\", tuya.valueConverter.raw], // ?\n                [15, \"leakage_current\", tuya.valueConverter.raw],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100],\n                [50, \"power_factor\", tuya.valueConverter.raw],\n                [\n                    102,\n                    \"over_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    103,\n                    \"under_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    104,\n                    \"over_current_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    105,\n                    \"over_power_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    107,\n                    \"temperature_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    108,\n                    \"leakage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                        Trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    110,\n                    \"event\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: 0,\n                        over_current_trip: 1,\n                        over_power_trip: 2,\n                        high_temp_trip: 3,\n                        over_voltage_trip: 4,\n                        under_voltage_trip: 5,\n                        over_current_alarm: 6,\n                        over_power_alarm: 7,\n                        high_temp_alarm: 8,\n                        over_voltage_alarm: 9,\n                        under_voltage_alarm: 10,\n                        remote_on: 11,\n                        remote_off: 12,\n                        manual_on: 13,\n                        manual_off: 14,\n                        leakage_trip: 15,\n                        leakage_alarm: 16,\n                        restore_default: 17,\n                        automatic_closing: 18,\n                        electricity_shortage: 19,\n                        electricity_shortage_alarm: 20,\n                        timing_switch_on: 21,\n                        timing_switch_off: 22,\n                    }),\n                ],\n                [114, \"over_current_threshold\", tuya.valueConverter.raw],\n                [115, \"over_voltage_threshold\", tuya.valueConverter.raw],\n                [116, \"under_voltage_threshold\", tuya.valueConverter.raw],\n                [118, \"temperature_threshold\", tuya.valueConverter.divideBy10],\n                [119, \"over_power_threshold\", tuya.valueConverter.raw],\n                [125, \"test5\", tuya.valueConverter.raw], // ?\n                [131, \"temperature\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_l6llgoxq\"]),\n        model: \"EA4161C-BI\",\n        vendor: \"Tuya\",\n        description: \"Single-phase multifunction energy meter (DIN Module)\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\"})],\n        exposes: [e.current(), e.power(), e.voltage(), e.energy(), e.text(\"meter_id\", ea.STATE).withDescription(\"Meter ID (ID of device)\")],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [3, null, null], // Monthly, but sends data only after request\n                [4, null, null], // Dayly, but sends data only after request\n                [6, null, tuya.valueConverter.phaseVariant2], // voltage and current\n                [\n                    10,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        over_current_threshold: 1,\n                        over_power_threshold: 2,\n                        over_voltage_threshold: 4,\n                        wrong_frequency_threshold: 8,\n                    }),\n                ],\n                [11, null, null], // Frozen - strange function, in native app - nothing is clear\n                [16, \"state\", tuya.valueConverter.onOff],\n                [17, null, tuya.valueConverter.threshold], // It's settable, but can't write converter\n                [18, \"meter_id\", tuya.valueConverter.raw],\n                [20, \"clear_fault\", tuya.valueConverter.onOff], // Clear fault\n                [21, null, null], // Forward Energy T1 - don't know what this\n                [22, null, null], // Forward Energy T2 - don't know what this\n                [23, null, null], // Forward Energy T3 - don't know what this\n                [24, null, null], // Forward Energy T4 - don't know what this\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZ3000_kkerjand\"]),\n        model: \"SZT06 V2.0\",\n        vendor: \"Tuya\",\n        description: \"Smart mini temperature and humidity sensor\",\n        extend: [m.temperature(), m.humidity(), m.identify({isSleepy: true}), m.battery({voltage: true})],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_pl31aqf5\", \"_TZE200_xpvamyfz\", \"_TZE284_xpvamyfz\"]),\n        model: \"ZR360CDB\",\n        vendor: \"Zorro Alert\",\n        description: \"Multifunctional CO2 detector\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        whiteLabel: [tuya.whitelabel(\"Nous\", \"E10\", \"Multifunctional CO2 detector\", [\"_TZE200_xpvamyfz\", \"_TZE284_xpvamyfz\"])],\n        exposes: [\n            e.humidity(),\n            e.temperature(),\n            e.co2(),\n            e.enum(\"alarm_ringtone\", ea.STATE_SET, [\"melody_1\", \"melody_2\", \"OFF\"]).withDescription(\"Ringtone of the alarm\"),\n            e.numeric(\"backlight_mode\", ea.STATE_SET).withValueMin(1).withValueMax(3).withValueStep(1).withDescription(\"Backlight\"),\n            tuya.exposes.batteryState(),\n            e.enum(\"air_quality\", ea.STATE_GET, [\"excellent\", \"moderate\", \"poor\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"air_quality\",\n                    tuya.valueConverterBasic.lookup({\n                        excellent: tuya.enum(0),\n                        moderate: tuya.enum(1),\n                        poor: tuya.enum(2),\n                    }),\n                ],\n                [2, \"co2\", tuya.valueConverter.raw],\n                [\n                    5,\n                    \"alarm_ringtone\",\n                    tuya.valueConverterBasic.lookup({\n                        melody_1: tuya.enum(0),\n                        melody_2: tuya.enum(1),\n                        OFF: tuya.enum(2),\n                    }),\n                ],\n                [14, \"battery_state\", tuya.valueConverter.batteryState],\n                [17, \"backlight_mode\", tuya.valueConverter.raw],\n                [18, \"temperature\", tuya.valueConverter.raw],\n                [19, \"humidity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS110E\", [\"_TZ3210_guijtl8k\", \"_TZ3210_hquixjeg\"]),\n        model: \"QS-Zigbee-D04\",\n        vendor: \"LEDRON\",\n        description: \"0-10v dimmer\",\n        fromZigbee: [fz.TS110E, fz.on_off],\n        toZigbee: [tz.TS110E_onoff_brightness, tz.TS110E_options, tz.light_brightness_move],\n        whiteLabel: [tuya.whitelabel(\"Ledron\", \"QS-Zigbee-D06-DC\", \"Dimmer 12-36v\", [\"_TZ3210_hquixjeg\"])],\n        exposes: [e.light_brightness().withMinBrightness().withMaxBrightness()],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            const endpoint = device.getEndpoint(1);\n            await reporting.bind(endpoint, coordinatorEndpoint, [\"genOnOff\", \"genLevelCtrl\"]);\n            await reporting.onOff(endpoint);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_edl8pz1k\", \"_TZE204_edl8pz1k\", \"_TZE204_6a4vxfnv\"]),\n        model: \"TS0601_floor_thermostat\",\n        vendor: \"Tuya\",\n        description: \"Zigbee thermostat for electric floors\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"auto\"])\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withDescription(\"Floor temperature\")\n                .withLocalTemperatureCalibration(-9, 9, 0.1, ea.STATE_SET)\n                .withDescription(\"Calibration floor temperature sensor\"),\n            e.deadzone_temperature().withValueMin(0).withValueMax(5).withValueStep(1).withDescription(\"Floor temperature\"),\n            e.child_lock(),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [2, \"preset\", tuya.valueConverter.tv02Preset()],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [24, \"device_temperature\", tuya.valueConverter.divideBy10],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration2],\n                [\n                    36,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(0),\n                        idle: tuya.enum(1),\n                    }),\n                ],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [102, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [103, \"deadzone_temperature\", tuya.valueConverter.raw],\n                [110, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [109, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [108, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [107, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [106, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [105, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n                [101, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDP],\n            ],\n        },\n        whiteLabel: [{vendor: \"ELECTSMART\", model: \"EST-120Z\"}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_khah2lkr\"]),\n        model: \"TE-1Z\",\n        vendor: \"Tuya\",\n        description: \"Floor heating thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            // e.binary('system_mode', ea.STATE_SET, 'ON', 'OFF')\n            // .withDescription('Turn system on or standby mode'),\n            e\n                .binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"Turn system on or standby mode\"),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n\n                // you can change preset, but can't make auto back remotely so I would set this readonly\n                .withPreset([\"auto\", \"manual\", \"mixed\"])\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE),\n            e.child_lock(),\n            // you can change it to IN remotely but can not set it back, so I set it read only\n            e\n                .enum(\"sensor_mode\", ea.STATE, [\"IN\", \"OU\", \"AL\"])\n                .withDescription(\n                    \"IN - internal sensor, no heat protection. OU - external sensor, no heat protection. AL - internal sensor for room temperature, external for heat protection\",\n                ),\n            e\n                .binary(\"high_temperature_protection_state\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"If temperature hit the HIGH temperature limit, it \" +\n                        \"will turn off heating until it drops for amount of deadzone/hysteresis \" +\n                        \"degrees\",\n                ),\n            e.binary(\"low_temperature_protection_state\", ea.STATE_SET, \"ON\", \"OFF\"),\n            e\n                .numeric(\"high_temperature_protection_setting\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(20)\n                .withValueMax(70)\n                .withDescription(\"Alarm temperature max\")\n                .withPreset(\"default\", 45, \"Default value\"),\n            e\n                .numeric(\"low_temperature_protection_setting\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(1)\n                .withValueMax(10)\n                .withDescription(\"Alarm temperature min\")\n                .withPreset(\"default\", 5, \"Default value\"),\n            e.numeric(\"temperature_sensor\", ea.STATE).withUnit(\"°C\").withDescription(\"Floor temperature from external sensor\"),\n            e\n                .deadzone_temperature()\n                .withValueMin(1)\n                .withValueMax(9)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withDescription(\"Hysteresis\")\n                .withPreset(\"default\", 1, \"Default value\"),\n            e.max_temperature().withValueMin(20).withValueMax(70).withPreset(\"default\", 35, \"Default value\"),\n            // @todo not tested\n            tuya.exposes.errorStatus(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                // internal sensor temperature\n                [16, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [50, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                // data type 1\n                [102, \"running_state\", tuya.valueConverterBasic.lookup({idle: false, heat: true})],\n                [103, \"temperature_sensor\", tuya.valueConverter.divideBy10],\n                // can be changed by setting 112 below 20, data type 1\n                [106, \"high_temperature_protection_state\", tuya.valueConverter.onOff],\n                // can be changed by setting 113 over 10, data type 1\n                [107, \"low_temperature_protection_state\", tuya.valueConverter.onOff],\n                // range -9 to +9, data type 2, affects shown room temperature (even tho sensors detect its 19, you can make it show 21 by setting this to 2)\n                [109, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                // according to manual settable between 0.5 and 2.5 degree.\n                // staring with 5 as 0.5 degree, and 25 as 2.5 degree (data type 2)\n                [110, \"temperature_return_difference\", tuya.valueConverter.raw],\n                // range 1-9. How far should temperature drop to turn back heating, if high temp protection kicked in\n                [111, \"deadzone_temperature\", tuya.valueConverter.raw],\n                // High temperature protection\n                // range 20-70, trying to turn below 20 keeps this datapoint at 20 but turns 106 to 0\n                [112, \"high_temperature_protection_setting\", tuya.valueConverter.raw],\n                // range 1-10, trying to turn over 10 keeps this datapoint at 10, but turns 107 to 0\n                [113, \"low_temperature_protection_setting\", tuya.valueConverter.raw],\n                [114, \"max_temperature\", tuya.valueConverter.raw],\n                // choose_sensor\n                // 0: device sensor. Switches \"higsyht_temperature_protection_state\" off\n                // 1: external sensor / high temperature protection off\n                // 2: internal for room + external for high temperature protection. Switches \"hight_temperature_protection_state\" on\n                [116, \"sensor_mode\", tuya.valueConverterBasic.lookup({IN: 0, OU: 1, AL: 2})],\n                // once every 24h it provides an array of numbers, maybe device fingerprint or something\n                // [119, 'unknown_119', tuya.valueConverter.raw],\n                // [120, 'unknown_120', tuya.valueConverter.raw],\n                // [121, 'unknown_121', tuya.valueConverter.raw],\n                // [122, 'unknown_122', tuya.valueConverter.raw],\n                // device state\n                // 0: standby mode - displays temperature but will not turn heating. Manual configuration is accessible only in this state\n                // 1: fully functional, can turn on heating\n                [125, \"system_mode\", tuya.valueConverter.onOff],\n                [125, \"state\", tuya.valueConverter.onOff],\n                // manual_mode\n                // 1: automatically turns heating when protection levels hit\n                // 2: you can turn off heating if it heats. You can set up target temperature\n                // 3: you can set up target temperature and it will automatically try to maintain it\n                [128, \"preset\", tuya.valueConverterBasic.lookup({auto: 1, manual: 0, mixed: 3})],\n                [129, \"child_lock\", tuya.valueConverter.lockUnlock],\n                // data type 5. Was [0] but went [16] when high temperature protection went into alert mode\n                [130, \"error_status\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_tagezcph\"]),\n        model: \"PRO-900Z\",\n        vendor: \"ElectSmart\",\n        description: \"Thermostat for electric floor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.binary(\"child_lock\", ea.STATE_SET, \"ON\", \"OFF\").withLabel(\"Child lock\"),\n            e.binary(\"eco_mode\", ea.STATE_SET, \"OFF\", \"ON\").withLabel(\"ECO mode\").withDescription(\"Default: Off\"),\n            e\n                .numeric(\"eco_temperature\", ea.STATE_SET)\n                .withValueMin(5)\n                .withValueMax(30)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withDescription(\"Max temperature in ECO mode. Default: 20\"),\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"auto\"])\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET)\n                .withDescription(\"Default: -3\")\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            e\n                .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(5)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withDescription(\"Hysteresis. Default: 1\"),\n            e.numeric(\"min_temperature\", ea.STATE_SET).withValueMin(5).withValueMax(15).withValueStep(1).withUnit(\"°C\").withDescription(\"Default: 5\"),\n            e\n                .numeric(\"max_temperature\", ea.STATE_SET)\n                .withValueMin(15)\n                .withValueMax(45)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withDescription(\"Default: 35\"),\n            e\n                .numeric(\"min_temperature_limit\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withLabel(\"Low temperature protection\")\n                .withDescription(\"Default: 0\"),\n            e\n                .numeric(\"max_temperature_limit\", ea.STATE_SET)\n                .withValueMin(25)\n                .withValueMax(70)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withLabel(\"High temperature protection\")\n                .withDescription(\"Default: 45\"),\n            e.temperature_sensor_select([\"IN\", \"OU\", \"AL\"]).withLabel(\"Sensor\").withDescription(\"Choose which sensor to use. Default: AL\"),\n            e\n                .numeric(\"external_temperature_input\", ea.STATE)\n                .withLabel(\"Floor temperature\")\n                .withUnit(\"°C\")\n                .withDescription(\"Temperature from floor sensor\"),\n            e\n                .numeric(\"brightness\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(1)\n                .withLabel(\"Screen brightness 06:00 - 22:00\")\n                .withDescription(\"0 - on for 10 seconds. Default: 6\"),\n            e\n                .numeric(\"display_brightness\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(1)\n                .withLabel(\"Screen brightness 22:00 - 06:00\")\n                .withDescription(\"0 - on for 10 seconds. Default: 3\"),\n            e\n                .text(\"schedule_monday\", ea.STATE_SET)\n                .withLabel(\"Schedule for monday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_tuesday\", ea.STATE_SET)\n                .withLabel(\"Schedule for tuesday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_wednesday\", ea.STATE_SET)\n                .withLabel(\"Schedule for wednesday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_thursday\", ea.STATE_SET)\n                .withLabel(\"Schedule for thursday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_friday\", ea.STATE_SET)\n                .withLabel(\"Schedule for friday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_saturday\", ea.STATE_SET)\n                .withLabel(\"Schedule for saturday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e\n                .text(\"schedule_sunday\", ea.STATE_SET)\n                .withLabel(\"Schedule for sunday\")\n                .withDescription(\"Default: 06:00/20.0 11:30/20.0 13:30/20.0 17:30/20.0\"),\n            e.enum(\"factory_reset\", ea.STATE_SET, [\"factory reset\"]).withLabel(\"Factory reset\").withDescription(\"Reset all settings to factory ones\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({off: false, heat: true})],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(1),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [19, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [26, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [27, \"local_temperature_calibration\", tuya.valueConverter.raw],\n                [28, \"factory_reset\", tuya.valueConverterBasic.lookup({factory_reset: true})],\n                [\n                    36,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        idle: tuya.enum(1),\n                        heat: tuya.enum(0),\n                    }),\n                ],\n                [39, \"child_lock\", tuya.valueConverterBasic.lookup({ON: true, OFF: false})],\n                [40, \"eco_mode\", tuya.valueConverterBasic.lookup({ON: true, OFF: false})],\n                [\n                    43,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        IN: tuya.enum(0),\n                        OU: tuya.enum(2),\n                        AL: tuya.enum(1),\n                    }),\n                ],\n                [102, \"external_temperature_input\", tuya.valueConverter.divideBy10],\n                [103, \"deadzone_temperature\", tuya.valueConverter.raw],\n                [104, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [101, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [105, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [106, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [107, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [108, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [109, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [110, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [111, \"min_temperature_limit\", tuya.valueConverter.divideBy10],\n                [112, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [113, \"brightness\", tuya.valueConverter.raw],\n                [114, \"display_brightness\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_dsagrkvg\", \"_TZE284_zm8zpwas\"]),\n        model: \"ZPV-01\",\n        vendor: \"Novato\",\n        description: \"Battery powered smart valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.switch().setAccess(\"state\", ea.STATE_SET),\n            e.enum(\"valve_state\", ea.STATE, [\"Closed\", \"Unknown\", \"Open\"]).withDescription(\"Valve Status\"),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    8,\n                    \"valve_state\",\n                    tuya.valueConverterBasic.lookup({\n                        unknown: tuya.enum(0),\n                        open: tuya.enum(1),\n                        closed: tuya.enum(2),\n                    }),\n                ],\n                [101, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3218_7fiyo3kv\"]),\n        model: \"TYZGTH1CH-D1RF\",\n        vendor: \"Mumubiz\",\n        description: \"Smart switch with temperature/humidity sensor\",\n        meta: {\n            tuyaSendCommand: \"sendData\",\n        },\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            tuya.modernExtend.tuyaOnOff({\n                powerOutageMemory: true,\n                switchType: false,\n            }),\n            tuya.modernExtend.dpChildLock({dp: 0x6f}),\n            tuya.modernExtend.dpTemperature({dp: 0x66}),\n            tuya.modernExtend.dpHumidity({dp: 0x67}),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x6c,\n                name: \"temperature_calibration\",\n                type: tuya.dataTypes.number,\n                valueMin: -10,\n                valueMax: 10,\n                valueStep: 0.1,\n                unit: \"°C\",\n                scale: 10,\n                description: \"Temperature calibration\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x6d,\n                name: \"humidity_calibration\",\n                type: tuya.dataTypes.number,\n                valueMin: -10,\n                valueMax: 10,\n                unit: \"%\",\n                description: \"Humidity calibration\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x71,\n                name: \"temperature_sensitivity\",\n                type: tuya.dataTypes.number,\n                valueMin: 0.1,\n                valueMax: 1,\n                valueStep: 0.1,\n                unit: \"°C\",\n                scale: 10,\n                description: \"Temperature sensitivity\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x70,\n                name: \"humidity_sensitivity\",\n                type: tuya.dataTypes.number,\n                valueMin: 1,\n                valueMax: 10,\n                unit: \"%\",\n                description: \"Humidity sensitivity\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"manual_mode\",\n                dp: 0x65,\n                type: tuya.dataTypes.enum,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Manual mode, ON = auto settings disabled, OFF = auto settings enabled\",\n            }),\n            tuya.modernExtend.dpTHZBSettings(),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS000F\", [\"_TZ3218_ya5d6wth\"]),\n        model: \"TYZGTH4CH-D1RF\",\n        vendor: \"Mumubiz\",\n        description: \"4 channel changeover contact with temperature and humidity sensing\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n            tuya.modernExtend.dpTemperature({dp: 102, scale: 10}),\n            tuya.modernExtend.dpHumidity({dp: 103}),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2, l3: 3, l4: 4};\n        },\n        exposes: [],\n        meta: {multiEndpoint: true},\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_uxllnywp\"]),\n        model: \"RT_ZCZ03Z\",\n        vendor: \"Tuya\",\n        description: \"Human presence sensor 24G\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.illuminance(),\n            e.presence(),\n            e\n                .numeric(\"detection_distance_max\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(840)\n                .withValueStep(1)\n                .withDescription(\"Max detection distance\")\n                .withUnit(\"cm\"),\n            e\n                .numeric(\"detection_distance_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(840)\n                .withValueStep(1)\n                .withDescription(\"Min detection distance\")\n                .withUnit(\"cm\"),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"cm\"),\n            e.numeric(\"fading_time\", ea.STATE_SET).withValueMin(1).withValueMax(59).withValueStep(1).withDescription(\"Delay time\").withUnit(\"s\"),\n            e.numeric(\"presence_sensitivity\", ea.STATE_SET).withValueMin(1).withValueMax(10).withValueStep(1).withDescription(\"Presence sensitivity\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED Indicator\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverterBasic.trueFalse(4)],\n                [101, \"target_distance\", tuya.valueConverter.raw],\n                [102, \"illuminance\", tuya.valueConverter.raw],\n                [103, \"fading_time\", tuya.valueConverter.raw],\n                [104, \"indicator\", tuya.valueConverter.onOff],\n                [107, \"detection_distance_max\", tuya.valueConverter.raw],\n                [108, \"detection_distance_min\", tuya.valueConverter.raw],\n                [111, \"presence_sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE204_q22avxbv\",\n            \"_TZE204_mrffaamu\",\n            \"_TZE204_tzreobvu\",\n            \"_TZE284_mrffaamu\",\n            \"_TZE284_tzreobvu\",\n            \"_TZE284_9xstqowh\",\n        ]),\n        model: \"TOQCB2-80\",\n        vendor: \"Tongou\",\n        description: \"Smart circuit breaker\",\n        // Important: respondToMcuVersionResponse should be false otherwise there is an avalanche of commandMcuVersionResponse messages every second.\n        // queryIntervalSeconds: is doing a pooling to update the device's parameters, now defined to update data every 3 minutes.\n        extend: [tuya.modernExtend.tuyaBase({dp: true, queryIntervalSeconds: 3 * 60, timeStart: \"off\", respondToMcuVersionResponse: true})],\n        exposes: [\n            tuya.exposes.switch(),\n            e.energy(),\n            e.power(),\n            e.voltage(),\n            e.current(),\n            e.temperature(),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e\n                .enum(\"last_event\", ea.STATE, [\n                    \"normal\",\n                    \"trip_over_current\",\n                    \"trip_over_power\",\n                    \"trip_over_temperature\",\n                    \"trip_voltage_1\",\n                    \"trip_voltage_2\",\n                    \"alarm_over_current\",\n                    \"alarm_over_power\",\n                    \"alarm_over_temperature\",\n                    \"alarm_voltage_1\",\n                    \"alarm_voltage_2\",\n                    \"remote_on\",\n                    \"remote_off\",\n                    \"manual_on\",\n                    \"manual_off\",\n                    \"value_15\",\n                    \"value_16\",\n                    \"factory_reset\",\n                ])\n                .withDescription(\"Last event\"),\n            e.enum(\"over_current_setting\", ea.STATE_SET, [\"closed\", \"alarm\", \"trip\"]).withDescription(\"Action if threshold value is reached\"),\n            e\n                .numeric(\"current_threshold\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(63)\n                .withValueStep(1)\n                .withUnit(\"A\")\n                .withDescription(\"Current threshold setting\"),\n            e.enum(\"under_voltage_setting\", ea.STATE_SET, [\"closed\", \"alarm\", \"trip\"]).withDescription(\"Action if threshold value is reached\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withValueMin(145)\n                .withValueMax(220)\n                .withValueStep(1)\n                .withUnit(\"V\")\n                .withDescription(\"Under voltage threshold setting\"),\n            e.enum(\"over_voltage_setting\", ea.STATE_SET, [\"closed\", \"alarm\", \"trip\"]).withDescription(\"Action if threshold value is reached\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withValueMin(245)\n                .withValueMax(295)\n                .withValueStep(1)\n                .withUnit(\"V\")\n                .withDescription(\"Over-voltage threshold setting\"),\n            e.enum(\"over_power_setting\", ea.STATE_SET, [\"closed\", \"alarm\", \"trip\"]).withDescription(\"Action if threshold value is reached\"),\n            e\n                .numeric(\"over_power_threshold\", ea.STATE_SET)\n                .withValueMin(200)\n                .withValueMax(20000)\n                .withValueStep(100)\n                .withUnit(\"W\")\n                .withDescription(\"Over-power threshold setting\"),\n            e.enum(\"temperature_setting\", ea.STATE_SET, [\"closed\", \"alarm\", \"trip\"]).withDescription(\"Action if threshold value is reached\"),\n            e\n                .numeric(\"temperature_threshold\", ea.STATE_SET)\n                .withValueMin(-40)\n                .withValueMax(100)\n                .withValueStep(1)\n                .withUnit(\"°C\")\n                .withDescription(\"Temperature threshold setting\"),\n            e.binary(\"clear_fault\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Recover from an incident\"),\n            e.binary(\"factory_reset\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Back to factory settings, USE WITH CAUTION\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                //[6, null, tuya.valueConverter.phaseVariant2],\n                [3, null, null], // Monthly, but sends data only after request\n                [4, null, null], // Dayly, but sends data only after request\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")],\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"b\")],\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"c\")],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [\n                    102,\n                    \"over_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                        trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    103,\n                    \"under_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                        trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    104,\n                    \"over_current_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                        trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    105,\n                    \"over_power_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                        trip: tuya.enum(2),\n                    }),\n                ],\n                [\n                    107,\n                    \"temperature_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        closed: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                        trip: tuya.enum(2),\n                    }),\n                ],\n                //109, 'online_state, unknown, I have not seen any message from this DP],\n                [\n                    110,\n                    \"last_event\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: tuya.enum(0),\n                        trip_over_current: tuya.enum(1),\n                        trip_over_power: tuya.enum(2),\n                        trip_over_temperature: tuya.enum(3),\n                        trip_voltage_1: tuya.enum(4),\n                        trip_voltage_2: tuya.enum(5),\n                        alarm_over_current: tuya.enum(6),\n                        alarm_over_power: tuya.enum(7),\n                        alarm_over_temperature: tuya.enum(8),\n                        alarm_voltage_1: tuya.enum(9),\n                        alarm_voltage_2: tuya.enum(10),\n                        remote_on: tuya.enum(11),\n                        remote_off: tuya.enum(12),\n                        manual_on: tuya.enum(13),\n                        manual_off: tuya.enum(14),\n                        value_15: tuya.enum(15),\n                        value_16: tuya.enum(16),\n                        factory_reset: tuya.enum(17),\n                    }),\n                ],\n                [112, \"clear_fault\", tuya.valueConverter.onOff],\n                [113, \"factory_reset\", tuya.valueConverter.onOff],\n                [114, \"current_threshold\", tuya.valueConverter.raw],\n                [115, \"over_voltage_threshold\", tuya.valueConverter.raw],\n                [116, \"under_voltage_threshold\", tuya.valueConverter.raw],\n                [118, \"temperature_threshold\", tuya.valueConverter.divideBy10],\n                [119, \"over_power_threshold\", tuya.valueConverter.raw],\n                //[125, 'forward_electricity', tuya.valueConverter.divideBy100],\n                [131, \"temperature\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_nbkshs6k\"]),\n        model: \"ZY-M100-S_3\",\n        vendor: \"Tuya\",\n        description: \"Human presence detector\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e\n                .enum(\"sensitivity\", ea.STATE_SET, [\"low\", \"medium\", \"high\"])\n                .withDescription(\"PIR sensor sensitivity (refresh and update only while active)\"),\n            e.enum(\"keep_time\", ea.STATE_SET, [\"30\", \"60\", \"120\"]).withDescription(\"PIR keep time in seconds (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverterBasic.lookup({True: 0, False: 1})],\n                [\n                    9,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [\n                    10,\n                    \"keep_time\",\n                    tuya.valueConverterBasic.lookup({\n                        \"30\": tuya.enum(0),\n                        \"60\": tuya.enum(1),\n                        \"120\": tuya.enum(2),\n                    }),\n                ],\n                [12, \"illuminance\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_dapwryy7\"]),\n        model: \"ZG-205Z\",\n        vendor: \"Tuya\",\n        description: \"5.8 GHz human presence sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.presence(),\n            e\n                .enum(\"presence_state\", ea.STATE, [\"none\", \"presence\", \"peaceful\", \"small_movement\", \"large_movement\"])\n                .withDescription(\"The presence state\"),\n            e\n                .numeric(\"target_distance\", ea.STATE)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Target distance\"),\n            e.illuminance(),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED Indicator\"),\n            e\n                .numeric(\"none_delay_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"Sec\")\n                .withDescription(\"Hold delay time\"),\n            e\n                .numeric(\"move_detection_max\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Move detection max distance\"),\n            e\n                .numeric(\"move_detection_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Move detection min distance\"),\n            e\n                .numeric(\"small_move_detection_max\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Small move detection max distance\"),\n            e\n                .numeric(\"small_move_detection_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Small move detection min distance\"),\n            e\n                .numeric(\"breath_detection_max\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Breath detection max distance\"),\n            e\n                .numeric(\"breath_detection_min\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(6)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Breath detection min distance\"),\n            e.numeric(\"move_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Move sensitivity\"),\n            e.numeric(\"breath_sensitivity\", ea.STATE_SET).withValueMin(0).withValueMax(10).withValueStep(1).withDescription(\"Breath sensitivity\"),\n            e\n                .numeric(\"small_move_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"Small Move sensitivity\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    null,\n                    {\n                        from: (v: number) => {\n                            const lookup = {\n                                none: tuya.enum(0),\n                                presence: tuya.enum(1),\n                                peaceful: tuya.enum(2),\n                                small_movement: tuya.enum(3),\n                                large_movement: tuya.enum(4),\n                            };\n                            const presenceState = Object.entries(lookup).find((i) => i[1].valueOf() === v)[0];\n                            return {\n                                presence: presenceState !== \"none\",\n                                presence_state: presenceState,\n                            };\n                        },\n                    },\n                ],\n                [101, \"target_distance\", tuya.valueConverter.divideBy100],\n                [102, \"illuminance\", tuya.valueConverter.raw],\n                [103, \"none_delay_time\", tuya.valueConverter.raw],\n                [104, \"indicator\", tuya.valueConverter.onOff],\n                [107, \"move_detection_max\", tuya.valueConverter.divideBy100],\n                [108, \"move_detection_min\", tuya.valueConverter.divideBy100],\n                [109, \"breath_detection_max\", tuya.valueConverter.divideBy100],\n                [110, \"breath_detection_min\", tuya.valueConverter.divideBy100],\n                [114, \"small_move_detection_max\", tuya.valueConverter.divideBy100],\n                [115, \"small_move_detection_min\", tuya.valueConverter.divideBy100],\n                [116, \"move_sensitivity\", tuya.valueConverter.raw],\n                [117, \"small_move_sensitivity\", tuya.valueConverter.raw],\n                [118, \"breath_sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ncti2pro\", \"_TZE204_l8xiyymq\", \"_TZE284_l8xiyymq\"]),\n        model: \"PN6\",\n        vendor: \"ZSVIOT\",\n        description: \"6-way controller\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            tuya.exposes.switch(),\n            tuya.exposes.switchMode2().withEndpoint(\"l1_l2\").withLabel(\"1-2 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switchMode2().withEndpoint(\"l3_l4\").withLabel(\"3-4 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switchMode2().withEndpoint(\"l5_l6\").withLabel(\"5-6 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n            tuya.exposes.switchType(),\n            e.power_on_behavior([\"off\", \"on\"]).withAccess(ea.STATE_SET),\n        ],\n        endpoint: (device) => {\n            return {\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                state: 1,\n                l1_l2: 1,\n                l3_l4: 1,\n                l5_l6: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n                [4, \"state_l4\", tuya.valueConverter.onOff],\n                [5, \"state_l5\", tuya.valueConverter.onOff],\n                [6, \"state_l6\", tuya.valueConverter.onOff],\n                [13, \"state\", tuya.valueConverter.onOff],\n                [14, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [107, \"switch_type\", tuya.valueConverter.switchType],\n                [113, \"switch_mode_l1_l2\", tuya.valueConverter.switchMode2],\n                [114, \"switch_mode_l3_l4\", tuya.valueConverter.switchMode2],\n                [115, \"switch_mode_l5_l6\", tuya.valueConverter.switchMode2],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_zqq3cipq\", \"_TZE284_zqq3cipq\"]),\n        model: \"PN16\",\n        vendor: \"ZSVIOT\",\n        description: \"16-way controller\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.power_on_behavior([\"off\", \"on\", \"previous\"]).withAccess(ea.STATE_SET),\n            tuya.exposes.switch().withEndpoint(\"all\"),\n            tuya.exposes.switchType().withEndpoint(\"l1_l8\").withLabel(\"Switch type 1-8 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n            tuya.exposes.switch().withEndpoint(\"l5\"),\n            tuya.exposes.switch().withEndpoint(\"l6\"),\n            tuya.exposes.switch().withEndpoint(\"l7\"),\n            tuya.exposes.switch().withEndpoint(\"l8\"),\n            tuya.exposes.switchType().withEndpoint(\"l9_l16\").withLabel(\"Switch type 9-16 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l9\"),\n            tuya.exposes.switch().withEndpoint(\"l10\"),\n            tuya.exposes.switchMode2().withEndpoint(\"l11_l12\").withLabel(\"Mode 11-12 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l11\"),\n            tuya.exposes.switch().withEndpoint(\"l12\"),\n            tuya.exposes.switchMode2().withEndpoint(\"l13_l14\").withLabel(\"Mode 13-14 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l13\"),\n            tuya.exposes.switch().withEndpoint(\"l14\"),\n            tuya.exposes.switchMode2().withEndpoint(\"l15_l16\").withLabel(\"Mode 15-16 channels\"),\n            tuya.exposes.switch().withEndpoint(\"l15\"),\n            tuya.exposes.switch().withEndpoint(\"l16\"),\n        ],\n        endpoint: (device) => {\n            return {\n                all: 1,\n                l1: 1,\n                l2: 1,\n                l3: 1,\n                l4: 1,\n                l5: 1,\n                l6: 1,\n                l7: 1,\n                l8: 1,\n                l9: 1,\n                l10: 1,\n                l11: 1,\n                l12: 1,\n                l13: 1,\n                l14: 1,\n                l15: 1,\n                l16: 1,\n                l1_l8: 1,\n                l9_l16: 1,\n                l11_l12: 1,\n                l13_l14: 1,\n                l15_l16: 1,\n            };\n        },\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_all\", tuya.valueConverter.onOff],\n                [101, \"state_l1\", tuya.valueConverter.onOff],\n                [102, \"state_l2\", tuya.valueConverter.onOff],\n                [103, \"state_l3\", tuya.valueConverter.onOff],\n                [104, \"state_l4\", tuya.valueConverter.onOff],\n                [105, \"state_l5\", tuya.valueConverter.onOff],\n                [106, \"state_l6\", tuya.valueConverter.onOff],\n                [107, \"state_l7\", tuya.valueConverter.onOff],\n                [108, \"state_l8\", tuya.valueConverter.onOff],\n                [109, \"state_l9\", tuya.valueConverter.onOff],\n                [110, \"state_l10\", tuya.valueConverter.onOff],\n                [111, \"state_l11\", tuya.valueConverter.onOff],\n                [112, \"state_l12\", tuya.valueConverter.onOff],\n                [113, \"state_l13\", tuya.valueConverter.onOff],\n                [114, \"state_l14\", tuya.valueConverter.onOff],\n                [115, \"state_l15\", tuya.valueConverter.onOff],\n                [116, \"state_l16\", tuya.valueConverter.onOff],\n                [117, \"power_on_behavior\", tuya.valueConverter.powerOnBehaviorEnum],\n                [118, \"switch_type_l1_l8\", tuya.valueConverter.switchType],\n                [119, \"switch_type_l9_l16\", tuya.valueConverter.switchType],\n                [120, \"switch_mode_l11_l12\", tuya.valueConverter.switchMode2],\n                [121, \"switch_mode_l13_l14\", tuya.valueConverter.switchMode2],\n                [122, \"switch_mode_l15_l16\", tuya.valueConverter.switchMode2],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0105\"],\n        model: \"TS0105\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch\",\n        extend: [tuyaBase({dp: true}), m.deviceEndpoints({endpoints: {l1: 1, l2: 1, l3: 1}})],\n        exposes: [\n            e.switch().withEndpoint(\"l1\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l2\").setAccess(\"state\", ea.STATE_SET),\n            e.switch().withEndpoint(\"l3\").setAccess(\"state\", ea.STATE_SET),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state_l1\", tuya.valueConverter.onOff],\n                [2, \"state_l2\", tuya.valueConverter.onOff],\n                [3, \"state_l3\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-103Z\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_iba1ckek\", \"_TZE200_hggxgsjj\", \"_TZE200_yjryxpot\", \"_TZE200_afycb3cg\"]),\n        model: \"ZG-103Z\",\n        vendor: \"Tuya\",\n        description: \"Vibration sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.vibration(),\n            e.tilt(),\n            e.numeric(\"x\", ea.STATE).withValueMin(0).withValueMax(256).withValueStep(1).withDescription(\"X coordinate\"),\n            e.numeric(\"y\", ea.STATE).withValueMin(0).withValueMax(256).withValueStep(1).withDescription(\"Y coordinate\"),\n            e.numeric(\"z\", ea.STATE).withValueMin(0).withValueMax(256).withValueStep(1).withDescription(\"Z coordinate\"),\n            e.battery(),\n            e.enum(\"sensitivity\", ea.STATE_SET, [\"low\", \"middle\", \"high\"]).withDescription(\"Vibration detection sensitivity\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"vibration\", tuya.valueConverter.trueFalseEnum1],\n                [7, \"tilt\", tuya.valueConverter.trueFalseEnum1],\n                [101, \"x\", tuya.valueConverter.raw],\n                [102, \"y\", tuya.valueConverter.raw],\n                [103, \"z\", tuya.valueConverter.raw],\n                [\n                    104,\n                    \"sensitivity\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        middle: tuya.enum(1),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [105, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-302ZM\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\n            \"_TZE200_kccdzaeo\",\n            \"_TZE200_s7rsrtbg\",\n            \"_TZE200_tmszbtzq\",\n            \"_TZE200_bfmfhxra\",\n            \"_TZE200_ahpcyzth\",\n            \"_TZE200_kijxnb8q\",\n        ]),\n        model: \"ZG-302ZM\",\n        vendor: \"HOBEIAN\",\n        description: \"Motion sensing switch\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.binary(\"switch1\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switch1\"),\n            e.binary(\"switch2\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switch2\"),\n            e.binary(\"switch3\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switch3\"),\n            e\n                .numeric(\"sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(19)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"detection sensitivity\"),\n            e.binary(\"backlight\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"backlight\"),\n            e\n                .numeric(\"trigger_hold\", ea.STATE_SET)\n                .withValueMin(5)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Trigger hold(second)\"),\n            tuya.exposes.powerOutageMemory(),\n            e\n                .enum(\"auto_on\", ea.STATE_SET, [\"off\", \"all\", \"ch1\", \"ch2\", \"ch3\", \"ch1_2\", \"ch2_3\", \"ch1_3\"])\n                .withDescription(\"Someone turn on the light\"),\n            e\n                .enum(\"auto_off\", ea.STATE_SET, [\"off\", \"all\", \"ch1\", \"ch2\", \"ch3\", \"ch1_2\", \"ch2_3\", \"ch1_3\"])\n                .withDescription(\"No one turns off the lights\"),\n            e.enum(\"trigger_switch\", ea.STATE_SET, [\"ch1\", \"ch2\", \"ch3\"]).withDescription(\"Switch state reversal\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [101, \"switch1\", tuya.valueConverter.onOff],\n                [102, \"switch2\", tuya.valueConverter.onOff],\n                [103, \"switch3\", tuya.valueConverter.onOff],\n                [110, \"sensitivity\", tuya.valueConverter.raw],\n                [111, \"backlight\", tuya.valueConverter.onOff],\n                [114, \"trigger_hold\", tuya.valueConverter.raw],\n                [\n                    112,\n                    \"power_outage_memory\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        on: tuya.enum(1),\n                        restore: tuya.enum(2),\n                    }),\n                ],\n                [\n                    113,\n                    \"auto_on\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        all: tuya.enum(1),\n                        ch1: tuya.enum(1),\n                        ch2: tuya.enum(2),\n                        ch3: tuya.enum(3),\n                        ch1_2: tuya.enum(4),\n                        ch2_3: tuya.enum(5),\n                        ch1_3: tuya.enum(6),\n                    }),\n                ],\n                [\n                    115,\n                    \"auto_off\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(0),\n                        all: tuya.enum(1),\n                        ch1: tuya.enum(1),\n                        ch2: tuya.enum(2),\n                        ch3: tuya.enum(3),\n                        ch1_2: tuya.enum(4),\n                        ch2_3: tuya.enum(5),\n                        ch1_3: tuya.enum(6),\n                    }),\n                ],\n                [\n                    108,\n                    \"trigger_switch\",\n                    tuya.valueConverterBasic.lookup({\n                        ch1: tuya.enum(0),\n                        ch2: tuya.enum(1),\n                        ch3: tuya.enum(2),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_wqashyqo\"]),\n        model: \"ZG-303Z\",\n        vendor: \"HOBEIAN\",\n        description: \"Soil moisture sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.enum(\"water_warning\", ea.STATE, [\"none\", \"alarm\"]).withDescription(\"Water shortage warning\"),\n            e.temperature(),\n            e.humidity(),\n            e.soil_moisture(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            tuya.exposes.soilCalibration(),\n            tuya.exposes.temperatureSampling(),\n            tuya.exposes.soilSampling(),\n            tuya.exposes.soilWarning(),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"water_warning\",\n                    tuya.valueConverterBasic.lookup({\n                        none: tuya.enum(0),\n                        alarm: tuya.enum(1),\n                    }),\n                ],\n                [103, \"temperature\", tuya.valueConverter.divideBy10],\n                [109, \"humidity\", tuya.valueConverter.raw],\n                [107, \"soil_moisture\", tuya.valueConverter.raw],\n                [108, \"battery\", tuya.valueConverter.raw],\n                [106, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [104, \"temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [105, \"humidity_calibration\", tuya.valueConverter.localTempCalibration2],\n                [102, \"soil_calibration\", tuya.valueConverter.localTempCalibration2],\n                [111, \"temperature_sampling\", tuya.valueConverter.raw],\n                [112, \"soil_sampling\", tuya.valueConverter.raw],\n                [110, \"soil_warning\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_fhvdgeuh\", \"_TZE200_abatw3kj\", \"_TZE204_4bjixefp\"]),\n        model: \"TS0601_din_4\",\n        vendor: \"Tuya\",\n        description: \"Din rail switch with power monitoring and threshold settings\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            // Required to get the device to start reporting\n            await device.getEndpoint(1).command(\"manuSpecificTuya\", \"dataQuery\", {});\n        },\n        whiteLabel: [tuya.whitelabel(\"RTX\", \"TS0601_RTX_DIN\", \"Din rail switch\", [\"_TZE200_abatw3kj\"])],\n        exposes: [\n            e.switch().setAccess(\"state\", ea.STATE_SET),\n            e.power(),\n            e.current(),\n            e.voltage(),\n            e.energy(),\n            e.numeric(\"temperature\", ea.STATE).withUnit(\"°C\").withDescription(\"Current temperature\"),\n            e.numeric(\"leakage\", ea.STATE).withUnit(\"mA\").withDescription(\"Current leakage\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [16, \"state\", tuya.valueConverter.onOff],\n                [1, \"energy\", tuya.valueConverter.divideBy100], // Total forward energy\n                [6, null, tuya.valueConverter.phaseVariant2], // Phase A voltage and current\n                // [9, 'fault', tuya.valueConverter.raw], // no expose\n                // [11, 'switch_prepayment', tuya.valueConverter.raw], // no expose\n                // [12, 'clear_energy', tuya.valueConverter.raw], // no expose\n                // [14, 'charge_energy', tuya.valueConverter.raw], // no expose\n                [15, \"leakage\", tuya.valueConverter.raw],\n                // [102, 'reclosing_allowed_times', tuya.valueConverter.raw], // no expose\n                [103, \"temperature\", tuya.valueConverter.raw],\n                // [104, 'reclosing_enable', tuya.valueConverter.raw], // no expose\n                // [105, 'timer', tuya.valueConverter.raw], // no expose\n                // [106, 'cycle_schedule', tuya.valueConverter.raw], // no expose\n                // [107, 'reclose_recover_seconds', tuya.valueConverter.raw], // no expose\n                // [108, 'random_timing', tuya.valueConverter.raw], // no expose\n                // [109, 'switch_inching', tuya.valueConverter.raw], // no expose\n                // [119, 'power_on_delay_power_on_time', tuya.valueConverter.raw], // no expose\n                // [124, 'overcurrent_event_threshold_time', tuya.valueConverter.raw], // no expose\n                // [125, 'time_threshold_of_lost_flow_event', tuya.valueConverter.raw], // no expose\n                // [127, 'status', tuya.valueConverter.raw], // no expose\n                // [134, 'relay_status_for_power_on', tuya.valueConverter.raw], // no expose\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_hcxvyxa5\"]),\n        model: \"ZA03\",\n        vendor: \"Tuya\",\n        description: \"Siren alarm\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.binary(\"alarm\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Sound the alarm\"),\n            e.enum(\"volume\", ea.STATE_SET, [\"low\", \"medium\", \"high\", \"mute\"]),\n            e.enum(\"ringtone\", ea.STATE_SET, [\n                \"ringtone 1\",\n                \"ringtone 2\",\n                \"ringtone 3\",\n                \"ringtone 4\",\n                \"ringtone 5\",\n                \"ringtone 6\",\n                \"ringtone 7\",\n                \"ringtone 8\",\n                \"ringtone 9\",\n                \"ringtone 10\",\n                \"ringtone 11\",\n                \"ringtone 12\",\n                \"ringtone 13\",\n                \"ringtone 14\",\n                \"ringtone 15\",\n                \"ringtone 16\",\n                \"ringtone 17\",\n                \"ringtone 18\",\n                \"ringtone 19\",\n                \"ringtone 20\",\n                \"ringtone 21\",\n                \"ringtone 22\",\n                \"ringtone 23\",\n                \"ringtone 24\",\n                \"ringtone 25\",\n                \"ringtone 26\",\n                \"ringtone 27\",\n                \"ringtone 28\",\n                \"ringtone 29\",\n                \"ringtone 30\",\n                \"ringtone 31\",\n                \"ringtone 32\",\n            ]),\n            e\n                .numeric(\"duration\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(380)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"How long the alarm sounds for when triggered\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    5,\n                    \"volume\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        mute: tuya.enum(3),\n                    }),\n                ],\n                [7, \"duration\", tuya.valueConverter.raw],\n                [13, \"alarm\", tuya.valueConverter.onOff],\n                [\n                    21,\n                    \"ringtone\",\n                    tuya.valueConverterBasic.lookup({\n                        \"ringtone 1\": tuya.enum(0),\n                        \"ringtone 2\": tuya.enum(1),\n                        \"ringtone 3\": tuya.enum(2),\n                        \"ringtone 4\": tuya.enum(3),\n                        \"ringtone 5\": tuya.enum(4),\n                        \"ringtone 6\": tuya.enum(5),\n                        \"ringtone 7\": tuya.enum(6),\n                        \"ringtone 8\": tuya.enum(7),\n                        \"ringtone 9\": tuya.enum(8),\n                        \"ringtone 10\": tuya.enum(9),\n                        \"ringtone 11\": tuya.enum(10),\n                        \"ringtone 12\": tuya.enum(11),\n                        \"ringtone 13\": tuya.enum(12),\n                        \"ringtone 14\": tuya.enum(13),\n                        \"ringtone 15\": tuya.enum(14),\n                        \"ringtone 16\": tuya.enum(15),\n                        \"ringtone 17\": tuya.enum(16),\n                        \"ringtone 18\": tuya.enum(17),\n                        \"ringtone 19\": tuya.enum(18),\n                        \"ringtone 20\": tuya.enum(19),\n                        \"ringtone 21\": tuya.enum(20),\n                        \"ringtone 22\": tuya.enum(21),\n                        \"ringtone 23\": tuya.enum(22),\n                        \"ringtone 24\": tuya.enum(23),\n                        \"ringtone 25\": tuya.enum(24),\n                        \"ringtone 26\": tuya.enum(25),\n                        \"ringtone 27\": tuya.enum(26),\n                        \"ringtone 28\": tuya.enum(27),\n                        \"ringtone 29\": tuya.enum(28),\n                        \"ringtone 30\": tuya.enum(29),\n                        \"ringtone 31\": tuya.enum(30),\n                        \"ringtone 32\": tuya.enum(31),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_ex3rcdha\", \"_TZE204_lbbg34rj\"]),\n        model: \"ZY_HPS01\",\n        vendor: \"Tuya\",\n        description: \"mmWave radar 5.8GHz\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        extend: [],\n        whiteLabel: [tuya.whitelabel(\"Nova Digital\", \"ZTS-MM\", \"mmWave radar 5.8GHz\", [\"_TZE204_lbbg34rj\"])],\n        exposes: [\n            e.illuminance().withUnit(\"lx\"),\n            e.occupancy(),\n            e\n                .numeric(\"presence_timeout\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(180)\n                .withValueStep(1)\n                .withDescription(\"Presence timeout\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"move_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"sensitivity of the radar\")\n                .withUnit(\"X\"),\n            e\n                .numeric(\"move_minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(600)\n                .withValueStep(10)\n                .withDescription(\"Movement minimum range\")\n                .withUnit(\"cm\"),\n            e\n                .numeric(\"move_maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(600)\n                .withValueStep(10)\n                .withDescription(\"Movement maximum range\")\n                .withUnit(\"cm\"),\n            e\n                .numeric(\"breath_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"Breath sensitivity of the radar\")\n                .withUnit(\"X\"),\n            e\n                .numeric(\"breath_minimum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(600)\n                .withValueStep(10)\n                .withDescription(\"Breath minimum range\")\n                .withUnit(\"cm\"),\n            e\n                .numeric(\"breath_maximum_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(600)\n                .withValueStep(10)\n                .withDescription(\"Breath maximum range\")\n                .withUnit(\"cm\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [12, \"illuminance\", tuya.valueConverter.raw],\n                [101, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [104, \"presence_timeout\", tuya.valueConverter.raw],\n                [105, \"move_sensitivity\", tuya.valueConverter.raw],\n                [107, \"breath_sensitivity\", tuya.valueConverter.raw],\n                [109, \"move_maximum_range\", tuya.valueConverter.raw],\n                [110, \"move_minimum_range\", tuya.valueConverter.raw],\n                [111, \"breath_maximum_range\", tuya.valueConverter.raw],\n                [112, \"breath_minimum_range\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ppuj1vem\"]),\n        model: \"ZPIR-10\",\n        vendor: \"Tuya\",\n        description: \"Treatlife human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [e.occupancy(), e.battery(), e.illuminance()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ha0vwoew\"]),\n        model: \"TS0601_thermostat_thermosphere\",\n        vendor: \"Tuya\",\n        description: \"ThermoSphere thermostat\",\n        extend: [tuyaBase({dp: true})],\n        exposes: [\n            e\n                .climate()\n                .withSystemMode([\"off\", \"auto\"], ea.STATE_SET, \"Whether the thermostat is turned on or off\")\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE),\n            e\n                .enum(\"sensor_mode\", ea.STATE_SET, [\"room_temperature\", \"floor_temperature\", \"room_with_floor_limit\"])\n                .withDescription(\"What type of sensor are you using to measure the temperature of the floor?\"),\n            e\n                .binary(\"adaptive_start\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"Preheat the room to the desired temperature before the scheduled start time.\"),\n            e.max_temperature_limit().withDescription(\"Maximum temperature (default: 35 ºC)\").withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e\n                .min_temperature_limit()\n                .withDescription(\n                    \"Minimum temperature limit for frost protection. Turns the thermostat on regardless of setpoint if the temperature drops below this.\",\n                )\n                .withValueMin(1)\n                .withValueMax(5),\n            e\n                .enum(\"boost\", ea.STATE_SET, [\"ON\", \"OFF\"])\n                .withDescription(\"Override the schedule and boost at the current temperature until turned off\"),\n            e\n                .numeric(\"display_brightness\", ea.STATE_SET)\n                .withDescription(\"Brightness of the display when in use\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1),\n            e\n                .numeric(\"holiday_start_stop\", ea.STATE_SET)\n                .withDescription(\"Set the number of days of holiday, this will start immediately.\")\n                .withValueMax(99)\n                .withValueMin(0),\n            e.holiday_temperature().withValueMin(5).withValueMax(35),\n            e.binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turning on will keep heating at the minimum temperature limit\"),\n            e\n                .numeric(\"switch_delay\", ea.STATE_SET)\n                .withDescription(\"How long to wait between making a change and it taking effect\")\n                .withValueMin(10)\n                .withValueMax(90)\n                .withValueStep(10)\n                .withUnit(\"s\"),\n            e\n                .numeric(\"power_rating\", ea.STATE_SET)\n                .withDescription(\n                    \"How much power is the underfloor heating rated to. Entering a value will allow the Thermostat to record a value of power usage that can be checked under settings on the physical Thermostat\",\n                )\n                .withUnit(\"W\")\n                .withValueMin(0)\n                .withValueMax(4500)\n                .withValueStep(100),\n            e\n                .binary(\"open_window_active\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"When active the heating will cut off if an Open Window is detected\"),\n            e\n                .numeric(\"open_window_sensing_time\", ea.STATE_SET)\n                .withDescription(\"The duration that the drop in temperature needs to occur over\")\n                .withUnit(\"minutes\")\n                .withValueMin(1)\n                .withValueMax(30)\n                .withValueStep(1),\n            e\n                .numeric(\"open_window_drop_limit\", ea.STATE_SET)\n                .withDescription(\"The drop in ambient room temperature that will trigger an open window warning\")\n                .withUnit(\"C\")\n                .withValueMin(2)\n                .withValueMax(4)\n                .withValueStep(1),\n            e\n                .numeric(\"open_window_off_time\", ea.STATE_SET)\n                .withDescription(\"The length of time the drop in temperature must be consistent for to turn the heating off\")\n                .withUnit(\"minutes\")\n                .withValueMin(10)\n                .withValueMax(60)\n                .withValueStep(5),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({off: false, auto: true})],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [\n                    4,\n                    \"boost\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(1),\n                        ON: tuya.enum(2),\n                    }),\n                ],\n                [18, \"open_window_active\", tuya.valueConverterBasic.lookup({OFF: false, ON: true})],\n                [40, \"open_window_sensing_time\", tuya.valueConverterBasic.divideBy(1)],\n                [45, \"open_window_drop_limit\", tuya.valueConverter.divideBy10],\n                [47, \"open_window_off_time\", tuya.valueConverterBasic.divideBy(1)],\n                [37, \"adaptive_start\", tuya.valueConverterBasic.lookup({OFF: false, ON: true})],\n                [38, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [39, \"max_temperature_limit\", tuya.valueConverter.divideBy10],\n                [41, \"holiday_start_stop\", tuya.valueConverterBasic.divideBy(1)], //divideBy1 required to force the format. Raw does not work\n                [42, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [\n                    43,\n                    \"sensor_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        room_temperature: tuya.enum(0),\n                        floor_temperature: tuya.enum(1),\n                        room_with_floor_limit: tuya.enum(2),\n                    }),\n                ],\n                //[48, 'temp_tolerance', tuya.valueConverter.raw],\n                [50, \"power_rating\", tuya.valueConverterBasic.divideBy(1)],\n                [52, \"frost_protection\", tuya.valueConverterBasic.lookup({OFF: false, ON: true})],\n                [53, \"min_temperature_limit\", tuya.valueConverter.divideBy10],\n                [54, \"switch_delay\", tuya.valueConverterBasic.divideBy(1)],\n                [55, \"display_brightness\", tuya.valueConverterBasic.divideBy(1)], //divideBy1 required to force the format. Raw does not work\n                //[16, 'schedule', tuya.valueConverter.Raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_madl8ejv\"]),\n        model: \"SAS936RHB-7-Z03\",\n        vendor: \"Saswell\",\n        description: \"Wireless temperature sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n        exposes: [\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 5, 30, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET),\n            e.binary(\"heating_demand\", ea.STATE, \"ON\", \"OFF\").withDescription(\"Valve demand (0=off, 1=heating)\"),\n            e\n                .binary(\"temporary_leaving\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"Temporary leaving mode (checkmark on display, disables heating)\"),\n            e.child_lock(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [102, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [103, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [\n                    101,\n                    \"system_mode\",\n                    {\n                        to: async (v: string, meta: Tz.Meta) => {\n                            await tuya.sendDataPointBool(meta.device.endpoints[0], 101, v === \"heat\", \"dataRequest\", 1);\n                        },\n                        from: (v: boolean) => (v === true ? \"heat\" : \"off\"),\n                    },\n                ],\n                [\n                    3,\n                    \"heating_demand\",\n                    {\n                        from: (v: unknown) => {\n                            const value = Array.isArray(v) ? v[v.length - 1] : v;\n                            return value === 1 ? \"ON\" : \"OFF\";\n                        },\n                        to: (v: string) => (v === \"ON\" ? 1 : 0),\n                    },\n                ],\n                [106, \"temporary_leaving\", tuya.valueConverter.onOff],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_pbo8cj0z\"]),\n        model: \"TS0601_GTZ10\",\n        vendor: \"Tuya\",\n        description: \"Thermostat radiator valve\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        ota: true,\n        exposes: [\n            e.battery(),\n            e.child_lock(),\n            e.window_detection(),\n            e.window_open(),\n            e.open_window_temperature().withValueMin(5).withValueMax(30),\n            e.max_temperature().withValueMin(15).withValueMax(45),\n            e.min_temperature().withValueMin(5).withValueMax(15),\n            e\n                .climate()\n                .withPreset([\"manual\", \"auto\", \"holiday\", \"comfort\", \"eco\", \"off\"])\n                .withSetpoint(\"current_heating_setpoint\", 5, 40, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9, 9, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\", \"auto\"], ea.STATE_SET, \"Only for Homeassistant\")\n                .withRunningState([\"idle\", \"heat\"], ea.STATE),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            tuya.exposes\n                .errorStatus()\n                .withDescription(\n                    \"Error status. Possible codes: E1 - builtin sensor error, E2 - external sensor error, E3 - valve not installed, E4 - motor error.\",\n                ),\n            e\n                .binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"When the room temperature is lower than 5 °C, the valve opens; when the temperature rises to 8 °C, the valve closes.\",\n                ),\n            e.binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Boost Heating: the device will enter the boost heating mode.\"),\n            e\n                .numeric(\"boost_timeset_countdown\", ea.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\n                    \"Setting \" +\n                        \"minimum 0 - maximum 90 minutes boost time. The boost function is activated. The remaining \" +\n                        \"time for the function will be counted down in minutes ( 90 to 0 ).\",\n                )\n                .withValueMin(0)\n                .withValueMax(90),\n            e.binary(\"switch_type\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enables/disables valve switch\"),\n            e\n                .numeric(\"position\", ea.STATE)\n                .withUnit(\"%\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withDescription(\"Position\"), // set actually not working\n            e.enum(\"screen_orientation\", ea.STATE_SET, [\"up\", \"right\", \"down\", \"left\"]).withDescription(\"Screen orientation\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    null,\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        fromMap: {\n                            0: {\n                                deviceMode: \"manual\",\n                                systemMode: \"heat\",\n                                preset: \"manual\",\n                            },\n                            1: {deviceMode: \"auto\", systemMode: \"auto\", preset: \"auto\"},\n                            2: {\n                                deviceMode: \"holiday\",\n                                systemMode: \"heat\",\n                                preset: \"holiday\",\n                            },\n                            3: {\n                                deviceMode: \"comfort\",\n                                systemMode: \"heat\",\n                                preset: \"comfort\",\n                            },\n                            4: {deviceMode: \"eco\", systemMode: \"heat\", preset: \"eco\"},\n                            5: {deviceMode: \"off\", systemMode: \"off\", preset: \"off\"},\n                        },\n                    }),\n                ],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        toMap: {\n                            manual: new tuya.Enum(0),\n                            auto: new tuya.Enum(1),\n                            holiday: new tuya.Enum(2),\n                            comfort: new tuya.Enum(3),\n                            eco: new tuya.Enum(4),\n                            off: new tuya.Enum(5),\n                        },\n                    }),\n                ],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverter.thermostatSystemModeAndPresetMap({\n                        toMap: {\n                            heat: new tuya.Enum(0),\n                            auto: new tuya.Enum(1),\n                            off: new tuya.Enum(5),\n                        },\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [7, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [9, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [10, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [14, \"window_detection\", tuya.valueConverter.onOff],\n                [15, \"window_open\", tuya.valueConverter.onOff],\n                [16, \"open_window_temperature\", tuya.valueConverter.divideBy10],\n                [28, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1)],\n                [29, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2)],\n                [30, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3)],\n                [31, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4)],\n                [32, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5)],\n                [33, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6)],\n                [34, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7)],\n                [35, \"error_status\", tuya.valueConverter.raw],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                [37, \"boost_heating\", tuya.valueConverter.onOff],\n                [38, \"boost_timeset_countdown\", tuya.valueConverter.raw],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [\n                    49, //valve_state\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        idle: tuya.enum(0),\n                        heat: tuya.enum(1),\n                        closing: tuya.enum(2),\n                        opening: tuya.enum(3),\n                    }),\n                ],\n                [113, \"switch_type\", tuya.valueConverter.onOff], // valve_switch\n                [115, \"position\", tuya.valueConverter.raw], // valve_opening\n                [\n                    119,\n                    \"screen_orientation\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                        left: tuya.enum(2),\n                        right: tuya.enum(3),\n                    }),\n                ],\n                // Exposed but not used DPs\n                [1, \"preheat\", tuya.valueConverter.raw],\n                [3, \"working_status\", tuya.valueConverter.raw],\n                [8, \"temperature_scale\", tuya.valueConverter.raw],\n                [11, \"max_temperature_f\", tuya.valueConverter.divideBy10],\n                [12, \"min_temperature_f\", tuya.valueConverter.divideBy10],\n                [17, \"open_window_time\", tuya.valueConverter.raw],\n                [18, \"backlight\", tuya.valueConverter.raw],\n                [39, \"switch_scale\", tuya.valueConverter.raw],\n                [40, \"local_temperature_f\", tuya.valueConverter.divideBy10],\n                [41, \"current_heating_setpoint_f\", tuya.valueConverter.divideBy10],\n                [46, \"open_window_temperature_f\", tuya.valueConverter.divideBy10],\n                [48, \"valve_testing\", tuya.valueConverter.raw],\n                [112, \"local_temperature_calibration_f\", tuya.valueConverter.localTempCalibration1],\n                [114, \"valve_control_type\", tuya.valueConverterBasic.lookup({PID: 0, ONOFF: 1})],\n                [116, \"frost_temperature\", tuya.valueConverter.raw],\n                [117, \"frost_temperature_f\", tuya.valueConverter.raw],\n                [118, \"auto_time\", tuya.valueConverter.raw],\n                [120, \"multi_control_link\", tuya.valueConverter.raw],\n                [121, \"holiday_time\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_kyyu8rbj\"]),\n        model: \"ME201WZ\",\n        vendor: \"Tuya\",\n        description: \"Water level sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.numeric(\"liquid_level_percent\", ea.STATE).withUnit(\"%\").withDescription(\"Liquid level ratio\"),\n            e.numeric(\"liquid_depth\", ea.STATE).withUnit(\"m\").withDescription(\"Liquid Depth\"),\n            e.enum(\"liquid_state\", ea.STATE, [\"low\", \"normal\", \"high\"]).withDescription(\"Liquid level status\"),\n            e\n                .numeric(\"max_set\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withDescription(\"Liquid max percentage\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1),\n            e\n                .numeric(\"mini_set\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withDescription(\"Liquid minimal percentage\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1),\n            e\n                .numeric(\"installation_height\", ea.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\"Height from sensor to tank bottom\")\n                .withValueMin(0.1)\n                .withValueMax(4)\n                .withValueStep(0.01),\n            e\n                .numeric(\"liquid_depth_max\", ea.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\"Height from sensor to liquid level\")\n                .withValueMin(0.1)\n                .withValueMax(4)\n                .withValueStep(0.01),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"liquid_state\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(1),\n                        normal: tuya.enum(0),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [2, \"liquid_depth\", tuya.valueConverter.divideBy100],\n                [22, \"liquid_level_percent\", tuya.valueConverter.raw],\n                [7, \"max_set\", tuya.valueConverter.raw],\n                [8, \"mini_set\", tuya.valueConverter.raw],\n                [19, \"installation_height\", tuya.valueConverter.divideBy100],\n                [21, \"liquid_depth_max\", tuya.valueConverter.divideBy100],\n            ],\n        },\n    },\n    {\n        fingerprint: [{modelID: \"TS0601\", manufacturerName: \"_TZE200_lvkk0hdg\"}],\n        model: \"TLC2206\",\n        vendor: \"Tuya\",\n        description: \"Water level sensor\",\n        extend: [m.forcePowerSource({powerSource: \"Mains (single phase)\"}), tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true})],\n        exposes: [\n            e.numeric(\"liquid_level_percent\", ea.STATE).withUnit(\"%\").withDescription(\"Liquid level ratio\"),\n            e.numeric(\"liquid_depth\", ea.STATE).withUnit(\"cm\").withDescription(\"Liquid depth\"),\n            e.enum(\"liquid_state\", ea.STATE, [\"low\", \"normal\", \"high\"]).withDescription(\"Liquid level status\"),\n            e\n                .numeric(\"max_set\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withDescription(\"Liquid max percentage\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1),\n            e\n                .numeric(\"min_set\", ea.STATE_SET)\n                .withUnit(\"%\")\n                .withDescription(\"Liquid minimal percentage\")\n                .withValueMin(0)\n                .withValueMax(100)\n                .withValueStep(1),\n            e\n                .numeric(\"installation_height\", ea.STATE_SET)\n                .withUnit(\"mm\")\n                .withDescription(\"Height from sensor to tank bottom\")\n                .withValueMin(10)\n                .withValueMax(4000)\n                .withValueStep(5),\n            e\n                .numeric(\"liquid_depth_max\", ea.STATE_SET)\n                .withUnit(\"mm\")\n                .withDescription(\"Height from sensor to liquid level\")\n                .withValueMin(10)\n                .withValueMax(4000)\n                .withValueStep(5),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"liquid_state\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(1),\n                        normal: tuya.enum(0),\n                        high: tuya.enum(2),\n                    }),\n                ],\n                [2, \"liquid_depth\", tuya.valueConverter.raw], // mm\n                [22, \"liquid_level_percent\", tuya.valueConverter.raw],\n                [7, \"max_set\", tuya.valueConverter.raw],\n                [8, \"min_set\", tuya.valueConverter.raw],\n                [19, \"installation_height\", tuya.valueConverter.raw],\n                [21, \"liquid_depth_max\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_q12rv9gj\"]),\n        model: \"HHST001\",\n        vendor: \"HeatHUB\",\n        description: \"Fan coil thermostat\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON/OFF\"),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSystemMode([\"cool\", \"heat\", \"fan_only\"], ea.STATE_SET)\n                .withSetpoint(\"current_heating_setpoint\", 5, 45, 0.5, ea.STATE_SET)\n                .withFanMode([\"auto\", \"high\", \"medium\", \"low\", \"off\"], ea.STATE_SET)\n                .withLocalTemperatureCalibration(-9, 9, 0.1, ea.STATE_SET),\n            e\n                .numeric(\"deadzone_temperature\", ea.STATE_SET)\n                .withValueMax(5)\n                .withValueMin(1)\n                .withValueStep(1)\n                .withPreset(\"default\", 1, \"Default value\")\n                .withDescription(\"The difference between the local temperature that triggers heating and the set temperature\"),\n            e.min_temperature().withValueMin(5).withValueMax(15),\n            e.max_temperature().withValueMin(35).withValueMax(45),\n            e.child_lock(),\n            e.humidity(),\n            e.binary(\"manual_mode\", ea.STATE_SET, \"Auto\", \"Manual\").withDescription(\"Manual = Manual or Schedule = Auto\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        cool: tuya.enum(0),\n                        heat: tuya.enum(1),\n                        fan_only: tuya.enum(2),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [19, \"max_temperature\", tuya.valueConverter.divideBy10],\n                [18, \"max_temperature_f\", tuya.valueConverter.raw],\n                [20, \"min_temperature_f\", tuya.valueConverter.raw],\n                [21, \"local_temperature_f\", tuya.valueConverter.raw],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [26, \"min_temperature\", tuya.valueConverter.divideBy10],\n                [102, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [103, \"local_temperature_calibration_f\", tuya.valueConverter.raw],\n                [104, \"deadzone_temperature\", tuya.valueConverter.raw],\n                [105, \"deadzone_temperature_f\", tuya.valueConverter.raw],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        high: tuya.enum(1),\n                        medium: tuya.enum(2),\n                        low: tuya.enum(3),\n                        off: tuya.enum(4),\n                    }),\n                ],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [44, \"current_heating_setpoint_f\", tuya.valueConverter.raw],\n                [46, \"temperature_scale\", tuya.valueConverter.raw],\n                [\n                    101,\n                    \"manual_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        Auto: tuya.enum(0),\n                        Manual: tuya.enum(1),\n                        Tempoary: tuya.enum(2),\n                    }),\n                ],\n                [113, \"humidity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_8zizsafo\", \"_TZE284_iilebqoo\"]),\n        model: \"GX03\",\n        vendor: \"GIEX\",\n        description: \"GIEX 2 zone watering timer\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.binary(\"valve_1\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switch state\"),\n            e\n                .numeric(\"countdown_1\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(1440)\n                .withValueStep(1)\n                .withUnit(\"min\")\n                .withDescription(\"Countdown timer for valve operation\"),\n            e.binary(\"valve_2\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Switch state\"),\n            e\n                .numeric(\"countdown_2\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(1440)\n                .withValueStep(1)\n                .withUnit(\"min\")\n                .withDescription(\"Countdown timer for valve operation\"),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"valve_1\", tuya.valueConverter.onOff],\n                [59, \"battery\", tuya.valueConverter.raw],\n                [\n                    104,\n                    \"valve_1\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(2),\n                        ON: tuya.enum(0),\n                    }),\n                ],\n                [2, \"valve_2\", tuya.valueConverter.onOff],\n                [\n                    105,\n                    \"valve_2\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(2),\n                        ON: tuya.enum(0),\n                    }),\n                ],\n                [13, \"countdown_1\", tuya.valueConverter.raw],\n                [14, \"countdown_2\", tuya.valueConverter.raw],\n            ],\n        },\n        whiteLabel: [tuya.whitelabel(\"Nova Digital\", \"ZVL-DUAL\", \"Water Valve with 2 zones\", [\"_TZE284_iilebqoo\"])],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_eaulras5\"]),\n        model: \"PJ3201A\",\n        vendor: \"Dongguan Pinjia Technology Co.,LTD.\",\n        description: \"Human Presence Sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.presence().withDescription(\"Indicates whether the device detected presence. Will be true also when movement (occupancy) is detected.\"),\n            e\n                .occupancy()\n                .withDescription(\n                    \"Indicates whether the device detected movement. Will be true when movement. Can remain true even if the target left the detection range. In this case presence will be reset to false reliably.\",\n                ),\n            e.numeric(\"closest_target_distance\", ea.STATE).withDescription(\"the target distance away from the sensor\").withUnit(\"m\"),\n            e\n                .numeric(\"movement_timeout\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(43200)\n                .withValueStep(1)\n                .withDescription(\"Timeout until the movement (occupancy) is reset when no further movement is detected. (Occupancy -> None)\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"idle_timeout\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(43200)\n                .withValueStep(1)\n                .withDescription(\"Timeout until the presence is reset when no further presence is detected (Presence -> None)\")\n                .withUnit(\"s\"),\n            e.illuminance(),\n            e\n                .numeric(\"far_movement_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"the moving detecting sensitivity 1 meter away\"),\n            e\n                .numeric(\"near_movement_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"the moving detecting sensitivity  within 1 meter\"),\n            e\n                .numeric(\"near_presence_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"the presence detecting sensitivity  within 1 meter\"),\n            e\n                .numeric(\"far_presence_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withDescription(\"the presence detecting sensitivity  1 meter away\"),\n            e\n                .numeric(\"closest_detection_distance\", ea.STATE_SET)\n                .withValueMin(0.1)\n                .withValueMax(7)\n                .withValueStep(0.1)\n                .withDescription(\"The closest distance that can be detected\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"largest_movement_detection_distance\", ea.STATE_SET)\n                .withValueMin(0.1)\n                .withValueMax(7)\n                .withValueStep(0.1)\n                .withDescription(\"The farthest distance that can be detected (moving)\")\n                .withUnit(\"m\"),\n            e\n                .numeric(\"largest_presence_detection_distance\", ea.STATE_SET)\n                .withValueMin(0.1)\n                .withValueMax(7)\n                .withValueStep(0.1)\n                .withDescription(\"The farthest distance that can be detected (present)\")\n                .withUnit(\"m\"),\n            e.binary(\"restore_factory\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"restore_factory\"),\n            e.binary(\"led_indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"turn on or off the led \"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [104, \"presence\", tuya.valueConverter.trueFalse1],\n                [112, \"occupancy\", tuya.valueConverter.trueFalseInvert],\n                [9, \"closest_target_distance\", tuya.valueConverter.divideBy100],\n                [101, \"movement_timeout\", tuya.valueConverter.raw],\n                [102, \"idle_timeout\", tuya.valueConverter.raw],\n                [103, \"illuminance\", tuya.valueConverter.divideBy10],\n                [105, \"far_movement_sensitivity\", tuya.valueConverter.raw],\n                [110, \"near_movement_sensitivity\", tuya.valueConverter.raw],\n                [109, \"near_presence_sensitivity\", tuya.valueConverter.raw],\n                [111, \"far_presence_sensitivity\", tuya.valueConverter.raw],\n                [3, \"closest_detection_distance\", tuya.valueConverter.divideBy100],\n                [4, \"largest_movement_detection_distance\", tuya.valueConverter.divideBy100],\n                [108, \"largest_presence_detection_distance\", tuya.valueConverter.divideBy100],\n                [106, \"restore_factory\", tuya.valueConverterBasic.lookup({ON: false, OFF: true})],\n                [107, \"led_indicator\", tuya.valueConverterBasic.lookup({ON: false, OFF: true})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0225\", [\"_TZ321C_fkzihax8\", \"_TZ321C_4slreunp\"]),\n        model: \"MTD085-ZB\",\n        vendor: \"LeapMMW\",\n        description: \"Human presence sensor\",\n        extend: [tuyaBase({dp: true})],\n        fromZigbee: [fz.ias_occupancy_alarm_1, fz.ias_occupancy_alarm_1_report],\n        exposes: [\n            e.occupancy(),\n            e.illuminance(),\n            e.numeric(\"target_distance\", ea.STATE).withDescription(\"Distance to target\").withUnit(\"m\"),\n            e\n                .numeric(\"radar_sensitivity\", ea.STATE_SET)\n                .withValueMin(10)\n                .withValueMax(100)\n                .withValueStep(10)\n                .withUnit(\"%\")\n                .withDescription(\"Detection threshold for the strength of object energy\"),\n            e\n                .numeric(\"detection_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Maximum distance detected by the sensor\"),\n            e\n                .numeric(\"shield_range\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Nearest distance detected by the sensor\"),\n            e\n                .numeric(\"entry_sensitivity\", ea.STATE_SET)\n                .withValueMin(10)\n                .withValueMax(100)\n                .withValueStep(10)\n                .withUnit(\"%\")\n                .withDescription(\"Sensitivity threshold triggered for the first time when the target enters the detection range\"),\n            e\n                .numeric(\"entry_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(8)\n                .withValueStep(0.1)\n                .withUnit(\"m\")\n                .withDescription(\"Detection distance when unoccupied\"),\n            e\n                .numeric(\"entry_filter_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(0.5)\n                .withValueStep(0.05)\n                .withUnit(\"s\")\n                .withDescription(\"Sensitivity threshold triggered for the first time when the target enters the detection range \"),\n            e\n                .numeric(\"departure_delay\", ea.STATE_SET)\n                .withValueMin(5)\n                .withValueMax(7200)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Confirmation time after the target disappears\"),\n            e\n                .numeric(\"block_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.1)\n                .withUnit(\"s\")\n                .withDescription(\"Time for the target to be detected again after switching from manned(occupy) to unmanned(unoccupy) mode\"),\n            e.enum(\"status_indication\", ea.STATE_SET, [\"OFF\", \"ON\"]).withDescription(\"Indicator light will turn on when human presence is detected\"),\n            e\n                .enum(\"sensor\", ea.STATE_SET, [\"on\", \"occupied\", \"unoccupied\"])\n                .withDescription(\n                    \"The radar sensor can be set in three states: on, occupied and unoccupied. For example, if set to occupied, \" +\n                        \"it will continue to maintain presence regardless of whether someone is present or not. If set to unoccupied, the unoccupied \" +\n                        \"state will be maintained permanently.\",\n                ),\n            e\n                .enum(\"scene_preset\", ea.STATE_SET, [\n                    \"Custom\",\n                    \"Toilet\",\n                    \"Kitchen\",\n                    \"Hallway\",\n                    \"Bedroom\",\n                    \"Livingroom\",\n                    \"Meetingroom\",\n                    \"Factory default\",\n                ])\n                .withDescription(\"Presets\"),\n            e\n                .enum(\"distance_report_mode\", ea.STATE_SET, [\"Normal\", \"Occupancy detection\"])\n                .withDescription(\"Indicator light will turn on when human presence is detected\"),\n            e\n                .enum(\"debug_mode\", ea.STATE_SET, [\"OFF\", \"ON\"])\n                .withDescription(\"In debug mode, radar will report more information, can be used to identify interference\"),\n            e.numeric(\"debug_distance\", ea.STATE).withDescription(\"Real time distance to target\").withUnit(\"m\"),\n            e.numeric(\"debug_countdown\", ea.STATE).withDescription(\"Time before the target disappears\").withUnit(\"s\"),\n        ],\n        meta: {\n            tuyaSendCommand: \"sendData\",\n            tuyaDatapoints: [\n                //\t\t\t[1, 'presence', tuya.valueConverter.trueFalse1],\n                [101, \"entry_sensitivity\", tuya.valueConverter.raw],\n                [102, \"entry_distance\", tuya.valueConverter.divideBy100],\n                [103, \"departure_delay\", tuya.valueConverter.raw],\n                [104, \"entry_filter_time\", tuya.valueConverter.divideBy100],\n                [105, \"block_time\", tuya.valueConverter.divideBy10],\n                [107, \"illuminance\", tuya.valueConverter.divideBy10],\n                [\n                    108,\n                    \"debug_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [109, \"debug_distance\", tuya.valueConverter.divideBy100],\n                [110, \"debug_countdown\", tuya.valueConverter.raw],\n                [\n                    111,\n                    \"scene_preset\",\n                    tuya.valueConverterBasic.lookup({\n                        Custom: tuya.enum(0),\n                        Toilet: tuya.enum(1),\n                        Kitchen: tuya.enum(2),\n                        Hallway: tuya.enum(3),\n                        Bedroom: tuya.enum(4),\n                        Livingroom: tuya.enum(5),\n                        Meetingroom: tuya.enum(6),\n                        Default: tuya.enum(7),\n                    }),\n                ],\n                [\n                    112,\n                    \"sensor\",\n                    tuya.valueConverterBasic.lookup({\n                        on: tuya.enum(0),\n                        occupied: tuya.enum(1),\n                        unoccupied: tuya.enum(2),\n                    }),\n                ],\n                [113, \"cline\", tuya.valueConverter.raw],\n                [\n                    114,\n                    \"status_indication\",\n                    tuya.valueConverterBasic.lookup({\n                        OFF: tuya.enum(0),\n                        ON: tuya.enum(1),\n                    }),\n                ],\n                [115, \"radar_sensitivity\", tuya.valueConverter.raw],\n                [116, \"shield_range\", tuya.valueConverter.divideBy100],\n                [117, \"detection_range\", tuya.valueConverter.divideBy100],\n                [118, \"equipment_status\", tuya.valueConverter.raw],\n                [119, \"target_distance\", tuya.valueConverter.divideBy100],\n                [\n                    120,\n                    \"distance_report_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        Normal: tuya.enum(0),\n                        \"Occupancy detection\": tuya.enum(1),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_d6i25bwg\"]),\n        model: \"PO-BOCO-ELEC\",\n        vendor: \"Powernity\",\n        description: \"Pilot wire heating module\",\n        extend: [tuyaBase({dp: true})],\n        exposes: [\n            e\n                .climate()\n                .withPreset([\"manual\", \"auto\", \"holiday\"])\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"occupied_heating_setpoint\", 0, 20, 1, ea.STATE_SET)\n                .withLocalTemperatureCalibration(-5.5, 5.5, 0.5, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\", \"auto\"], ea.STATE_SET, \"Only for Homeassistant\"),\n            e.enum(\"auto_mode\", ea.STATE_SET, [\"off\", \"antifrost\", \"eco\", \"comfort_-2\", \"comfort_-1\", \"comfort\"]).withDescription(\"Auto Mode\"),\n            e.enum(\"manual_mode\", ea.STATE_SET, [\"off\", \"antifrost\", \"eco\", \"comfort_-2\", \"comfort_-1\", \"comfort\"]).withDescription(\"Manual Mode\"),\n            tuya.exposes.frostProtection(),\n            // e.text(\"antifrost_mode\", ea.STATE),\n            e.humidity(),\n            e.child_lock(),\n            e.window_detection(),\n            e\n                .enum(\"window_opening_mode\", ea.STATE_SET, [\"off\", \"antifrost\", \"eco\", \"comfort_-2\", \"comfort_-1\", \"comfort\"])\n                .withDescription(\"Window Opening Mode\"),\n            e\n                .numeric(\"window_opening_mode_duration\", ea.STATE_SET)\n                .withUnit(\"min\")\n                .withDescription(\"Duration of the window opening mode\")\n                .withValueMin(1)\n                .withValueMax(90),\n            tuya.exposes.temperatureUnit(),\n            e\n                .binary(\"boost_heating\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\"Boost Heating: the device will enter the boost heating mode.\")\n                .withCategory(\"config\"),\n            e\n                .numeric(\"boost_timeset_countdown\", ea.STATE)\n                .withUnit(\"s\")\n                .withDescription(\n                    \"The remaining \" + \"time for the function will be counted down in seconds ( 900 to 0 ) when the boost heating is activated.\",\n                )\n                .withValueMin(0)\n                .withValueMax(900),\n            e\n                .numeric(\"power_rating\", ea.STATE_SET)\n                .withDescription(\n                    \"How much power is the heater rated to. Entering a value will allow the Thermostat to record a value of power usage that can be checked under settings on the physical Thermostat\",\n                )\n                .withUnit(\"kWh\")\n                .withValueMin(10)\n                .withValueMax(10000)\n                .withValueStep(10)\n                .withCategory(\"config\"),\n            e.numeric(\"energy_consumed\", ea.STATE).withUnit(\"kWh\").withDescription(\"Consumed energy\"),\n            e\n                .enum(\"mode_switching\", ea.STATE_SET, [\"four_modes\", \"six_modes\"])\n                .withDescription(\"Choose the number of mode your heater supports.\")\n                .withCategory(\"config\"),\n            e\n                .text(\"schedule_monday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_tuesday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_wednesday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_thursday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_friday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_saturday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"schedule_sunday\", ea.STATE_SET)\n                .withDescription(\n                    \"Schedule for the auto mode. Can be defined in the following format: \" +\n                        \"`mode / hours:minutes / mode`. \" +\n                        \"For example: `comfort / 06:00 / eco / 12:00 / off`. \" +\n                        \"Note: Minutes can only be set by multiple of 5. Your limited to 9 modes max.\",\n                ),\n            e\n                .text(\"holiday_start_stop\", ea.STATE_SET)\n                .withDescription(\n                    \"The holiday mode will automatically start \" +\n                        \"at the set time starting point and run the holiday mode. Can be defined in the following format: \" +\n                        \"`startYear/startMonth/startDay startHours:startMinutes | endYear/endMonth/endDay endHours:endMinutes  | mode`. \" +\n                        \"For example: `2024/12/12 09:00 | 2024/12/14 10:00 | comfort`\" +\n                        \"Note: You cannot set an interval superior at 255 hours. The end date minutes will be ignore.\",\n                ),\n            e.binary(\"reset_consumption\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Reset energy consumption to zero\").withCategory(\"config\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    null,\n                    \"occupied_heating_setpoint\",\n                    {\n                        to: async (v: number, meta: Tz.Meta) => {\n                            const entity = meta.device.endpoints[0];\n                            const mode = meta.state.mode_switching;\n                            let temp = v;\n                            if (meta.state.temperature_unit === \"fahrenheit\") temp = ((temp - 32) * 5) / 9;\n\n                            await tuya.sendDataPointEnum(entity, 2, 1, \"dataRequest\", 1); // manual\n                            if (temp === 0) {\n                                await tuya.sendDataPointEnum(entity, 127, 5, \"dataRequest\", 3); //off\n                            } else if (temp < 16) {\n                                await tuya.sendDataPointEnum(entity, 127, 4, \"dataRequest\", 3); //antifrost\n                            } else if (temp >= 19) {\n                                await tuya.sendDataPointEnum(entity, 127, 0, \"dataRequest\", 1); //comfort\n                            } else if (mode === 1) {\n                                if (temp === 17) {\n                                    await tuya.sendDataPointEnum(entity, 127, 2, \"dataRequest\", 1); // comfort-2\n                                } else if (temp === 18) {\n                                    await tuya.sendDataPointEnum(entity, 127, 1, \"dataRequest\", 1); // comfort-1\n                                }\n                            } else {\n                                await tuya.sendDataPointEnum(entity, 127, 3, \"dataRequest\", 1); // eco\n                            }\n\n                            return v;\n                        },\n                    },\n                ],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        auto: tuya.enum(0),\n                        manual: tuya.enum(1),\n                        holiday: tuya.enum(2),\n                    }),\n                ],\n                [\n                    null,\n                    \"system_mode\",\n                    {\n                        // Extend system_mode to support 'off' in addition to 'heat' and 'auto'\n                        to: async (v: string, meta: Tz.Meta) => {\n                            const entity = meta.device.endpoints[0];\n                            let temp = meta.state.occupied_heating_setpoint as number;\n                            if (meta.state.temperature_unit === \"fahrenheit\") temp = ((temp - 32) * 5) / 9;\n                            const mode = meta.state.mode_switching;\n\n                            switch (v) {\n                                case \"off\":\n                                    await tuya.sendDataPointEnum(entity, 2, 1, \"dataRequest\", 1); // manual\n                                    await tuya.sendDataPointEnum(entity, 127, 5, \"dataRequest\", 1); // off\n                                    break;\n                                case \"heat\":\n                                    await tuya.sendDataPointEnum(entity, 2, 1, \"dataRequest\", 1); // manual\n                                    if (temp === 0) {\n                                        await tuya.sendDataPointEnum(entity, 127, 5, \"dataRequest\", 3); //off\n                                    } else if (temp < 16) {\n                                        await tuya.sendDataPointEnum(entity, 127, 4, \"dataRequest\", 3); //antifrost\n                                    } else if (temp >= 19) {\n                                        await tuya.sendDataPointEnum(entity, 127, 0, \"dataRequest\", 1); //comfort\n                                    } else if (mode === 1) {\n                                        if (temp === 17) {\n                                            await tuya.sendDataPointEnum(entity, 127, 2, \"dataRequest\", 1); // comfort-2\n                                        } else if (temp === 18) {\n                                            await tuya.sendDataPointEnum(entity, 127, 1, \"dataRequest\", 1); // comfort-1\n                                        }\n                                    } else {\n                                        await tuya.sendDataPointEnum(entity, 127, 3, \"dataRequest\", 1); // eco\n                                    }\n                                    break;\n                                case \"auto\":\n                                    await tuya.sendDataPointEnum(entity, 2, 0, \"dataRequest\", 1); // auto\n                                    break;\n                            }\n                        },\n                    },\n                ],\n                [8, \"humidity\", tuya.valueConverter.raw],\n                [11, \"energy_consumed\", tuya.valueConverter.raw],\n                [16, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [39, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [46, \"temperature_unit\", tuya.valueConverter.temperatureUnitEnum],\n                [101, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration1],\n                [108, \"boost_heating\", tuya.valueConverter.onOff],\n                [114, \"schedule_monday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(1)],\n                [115, \"schedule_tuesday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(2)],\n                [116, \"schedule_wednesday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(3)],\n                [117, \"schedule_thursday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(4)],\n                [118, \"schedule_friday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(5)],\n                [119, \"schedule_saturday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(6)],\n                [120, \"schedule_sunday\", tuya.valueConverter.PO_BOCO_ELEC_schedule(7)],\n                [123, \"boost_timeset_countdown\", tuya.valueConverter.raw],\n                // [125, \"temperature_antifreeze\", tuya.valueConverterBasic.raw],\n                [\n                    126,\n                    \"auto_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(5),\n                        antifrost: tuya.enum(4),\n                        eco: tuya.enum(3),\n                        \"comfort_-2\": tuya.enum(2),\n                        \"comfort_-1\": tuya.enum(1),\n                        comfort: tuya.enum(0),\n                    }),\n                ],\n                [\n                    127,\n                    \"manual_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(5),\n                        antifrost: tuya.enum(4),\n                        eco: tuya.enum(3),\n                        \"comfort_-2\": tuya.enum(2),\n                        \"comfort_-1\": tuya.enum(1),\n                        comfort: tuya.enum(0),\n                    }),\n                ],\n                [136, \"frost_protection\", tuya.valueConverter.onOff],\n                // [137, \"antifrost\", tuya.valueConverterBasic.raw],\n                [138, \"window_detection\", tuya.valueConverter.onOff],\n                [\n                    139,\n                    \"window_opening_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        off: tuya.enum(5),\n                        antifrost: tuya.enum(4),\n                        eco: tuya.enum(3),\n                        \"comfort_-2\": tuya.enum(2),\n                        \"comfort_-1\": tuya.enum(1),\n                        comfort: tuya.enum(0),\n                    }),\n                ],\n                [140, \"window_opening_mode_duration\", tuya.valueConverter.raw],\n                [141, \"reset_consumption\", tuya.valueConverter.onOff],\n                [142, \"power_rating\", tuya.valueConverter.raw],\n                [143, \"holiday_start_stop\", tuya.valueConverter.PO_BOCO_ELEC_holiday],\n                [\n                    144,\n                    \"mode_switching\",\n                    tuya.valueConverterBasic.lookup({\n                        four_modes: tuya.enum(0),\n                        six_modes: tuya.enum(1),\n                    }),\n                ],\n                // [145, \"weekly temperature replication function\", ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_eekpf0ft\", \"_TZE284_eekpf0ft\"]),\n        model: \"TR-M3Z\",\n        vendor: \"Tuya\",\n        description: \"Thermostatic radiator valve actuator\",\n        extend: [tuyaBase({dp: true})],\n        exposes: [\n            e.child_lock(),\n            e.battery(),\n            e.battery_low(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withPreset([\"manual\", \"schedule\", \"eco\", \"comfort\", \"frost_protection\", \"holiday\", \"off\"])\n                .withSystemMode([\"off\", \"heat\"], ea.STATE)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withLocalTemperatureCalibration(-9.5, 9.5, 0.5, ea.STATE_SET),\n            ...tuya.exposes.scheduleAllDays(ea.STATE_SET, \"HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C HH:MM/C\"),\n            e.eco_temperature().withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e.comfort_temperature().withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e.holiday_temperature().withValueMin(5).withValueMax(35).withValueStep(0.5),\n            e\n                .binary(\"window_detection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"Startup: when room temperature decreases by 3°C within 5 minutes, stop heating. \" +\n                        \"Close: when room temperature rises by 3 degrees / 48 minutes later / manual (three ways). \" +\n                        \"After the window opening mode is turned on, one of these three conditions can trigger to exit the window opening mode.\",\n                ),\n            e.binary(\"window_open\", ea.STATE, \"OPEN\", \"CLOSE\").withDescription(\"Window status CLOSE or OPEN \"),\n            e\n                .binary(\"scale_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"If the heat sink is not fully opened within \" +\n                        \"two weeks or is not used for a long time, the valve will be blocked due to silting up and the heat sink will not be \" +\n                        \"able to be used. To ensure normal use of the heat sink, the controller will automatically open the valve fully every \" +\n                        'two weeks. It will run for 30 seconds per time with the screen displaying \"Ad\", then return to its normal working state ' +\n                        \"again.\",\n                ),\n            e\n                .binary(\"frost_protection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"When the room temperature is lower than 5 °C, the valve opens; when the temperature rises to 8 °C, the valve closes.\",\n                ),\n            e\n                .numeric(\"frost_protection_temperature\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(5)\n                .withValueMax(35)\n                .withValueStep(0.5)\n                .withDescription(\"\"),\n            e\n                .numeric(\"temperature_accuracy\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withValueMin(0.5)\n                .withValueMax(5)\n                .withValueStep(0.5)\n                .withDescription(\"The difference required between local temperature and set point to trigger the valve.\"),\n            e.numeric(\"error\", ea.STATE).withDescription('If NTC is damaged, \"Er\" will be on the TRV display.'),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        manual: tuya.enum(0),\n                        schedule: tuya.enum(1),\n                        eco: tuya.enum(2),\n                        comfort: tuya.enum(3),\n                        frost_protection: tuya.enum(4),\n                        holiday: tuya.enum(5),\n                        off: tuya.enum(6),\n                    }),\n                ],\n                [\n                    3,\n                    \"running_state\",\n                    tuya.valueConverterBasic.lookup({\n                        idle: tuya.enum(0),\n                        heat: tuya.enum(1),\n                    }),\n                ],\n                [4, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [5, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [6, \"battery\", tuya.valueConverter.raw],\n                [7, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [14, \"window_detection\", tuya.valueConverter.onOff],\n                [\n                    15,\n                    \"window_open\",\n                    tuya.valueConverterBasic.lookup({\n                        CLOSE: tuya.enum(0),\n                        OPEN: tuya.enum(1),\n                    }),\n                ],\n                [21, \"holiday_temperature\", tuya.valueConverter.divideBy10],\n                [28, \"schedule_monday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(1, 6)],\n                [29, \"schedule_tuesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(2, 6)],\n                [30, \"schedule_wednesday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(3, 6)],\n                [31, \"schedule_thursday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(4, 6)],\n                [32, \"schedule_friday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(5, 6)],\n                [33, \"schedule_saturday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(6, 6)],\n                [34, \"schedule_sunday\", tuya.valueConverter.thermostatScheduleDayMultiDPWithDayNumber(7, 6)],\n                [35, \"fault_alarm\", tuya.valueConverter.errorOrBatteryLow],\n                [36, \"frost_protection\", tuya.valueConverter.onOff],\n                [39, \"scale_protection\", tuya.valueConverter.onOff],\n                [47, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [101, \"system_mode\", tuya.valueConverterBasic.lookup({off: false, heat: true})],\n                [102, \"temperature_accuracy\", tuya.valueConverter.divideBy10],\n                [103, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [104, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [105, \"frost_protection_temperature\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_wem3gxyx\"]),\n        model: \"AE-940K\",\n        vendor: \"ACMELEC\",\n        description: \"Compatible with Daikin vrv system\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON/OFF\"),\n            e\n                .climate()\n                .withSystemMode([\"cool\", \"heat\", \"fan_only\", \"dry\"], ea.STATE_SET)\n                .withSetpoint(\"current_heating_setpoint\", 16, 32, 1, ea.STATE_SET)\n                .withFanMode([\"low\", \"medium\", \"high\", \"auto\"], ea.STATE_SET)\n                .withLocalTemperature(ea.STATE),\n            e.child_lock(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        cool: tuya.enum(0),\n                        heat: tuya.enum(1),\n                        fan_only: tuya.enum(2),\n                        dry: tuya.enum(3),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.raw],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        auto: tuya.enum(3),\n                    }),\n                ],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_mul9abs3\"]),\n        model: \"AE-669K\",\n        vendor: \"ACMELEC\",\n        description: \"Compatible with Mitsubishi Electric vrf system\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the thermostat ON/OFF\"),\n            e\n                .climate()\n                .withSystemMode([\"cool\", \"heat\", \"fan_only\", \"dry\"], ea.STATE_SET)\n                .withSetpoint(\"current_heating_setpoint\", 16, 32, 1, ea.STATE_SET)\n                .withFanMode([\"low\", \"medium\", \"high\", \"auto\"], ea.STATE_SET)\n                .withLocalTemperature(ea.STATE),\n            e.child_lock(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        cool: tuya.enum(0),\n                        heat: tuya.enum(1),\n                        fan_only: tuya.enum(2),\n                        dry: tuya.enum(3),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.raw],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        auto: tuya.enum(3),\n                    }),\n                ],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_a14rjslz\"]),\n        model: \"ATMS10013Z3\",\n        vendor: \"Ourtop\",\n        description: \"Zigbee 3 Phase Meter\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        whiteLabel: [{vendor: \"Ourtop\", model: \"ATMS100133Z\"}],\n        exposes: [\n            e.energy(),\n            tuya.exposes.voltageWithPhase(\"a\"),\n            tuya.exposes.voltageWithPhase(\"b\"),\n            tuya.exposes.voltageWithPhase(\"c\"),\n            tuya.exposes.powerWithPhase(\"a\"),\n            tuya.exposes.powerWithPhase(\"b\"),\n            tuya.exposes.powerWithPhase(\"c\"),\n            tuya.exposes.currentWithPhase(\"a\"),\n            tuya.exposes.currentWithPhase(\"b\"),\n            tuya.exposes.currentWithPhase(\"c\"),\n            e.produced_energy(),\n            e.numeric(\"total_energy\", ea.STATE).withUnit(\"kWh\").withDescription(\"Total consumed and produced energy\"),\n            e.power(),\n            e.power_reactive(),\n            e.power_factor().withUnit(\"%\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100], // \"Forward Active Energy\", 7685 -> 76.85kW\n                [6, null, tuya.valueConverter.phaseVariant2WithPhase(\"a\")], // \"Phase A\", CJMAAEMAAAI=\n                [7, null, tuya.valueConverter.phaseVariant2WithPhase(\"b\")], // \"Phase B\"\n                [8, null, tuya.valueConverter.phaseVariant2WithPhase(\"c\")], // \"Phase C\"\n                [23, \"produced_energy\", tuya.valueConverter.divideBy100], // \"Reverse Energy\", 0 W*h -> 0.0 kW*h\n                [24, \"total_energy\", tuya.valueConverter.divideBy100], // total energy produced + consumed , 7692 W*h -> 76.92kW*h\n                [29, \"power\", tuya.valueConverter.power], // \"Total Active Power\", 1740 W\n                [30, \"power_reactive\", tuya.valueConverter.power], // \"Total Reactive Power\", 985 Var\n                [50, \"power_factor\", tuya.valueConverter.raw], // \"Overall Power Factor\" 88 -> 88 %\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"TS0901\"],\n        model: \"TS0901\",\n        vendor: \"Tuya\",\n        description: \"Battery powered light\",\n        extend: [m.battery(), m.light()],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_atdqo4nj\"]),\n        model: \"ZG-WK-DA-Wh-Zigbee\",\n        vendor: \"Tuya\",\n        description: \"Wall thermostat with humidity sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.humidity(),\n            e.child_lock(),\n            //e.temperature_sensor_select(['internal', 'external', 'both']),\n            e\n                .climate()\n                .withSystemMode([\"off\", \"heat\"], ea.STATE_SET)\n                .withPreset([\"manual\", \"auto\"])\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withRunningState([\"idle\", \"heat\"], ea.STATE)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [2, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [3, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [4, \"preset\", tuya.valueConverterBasic.lookup({manual: 0, auto: 1})],\n                [9, \"child_lock\", tuya.valueConverter.lockUnlock],\n                //[11, 'unknown', null],\n                [19, \"local_temperature_calibration\", tuya.valueConverterBasic.divideBy(1)],\n                [102, \"running_state\", tuya.valueConverterBasic.lookup({heat: 0, idle: 1})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0003\", [\"_TZ3000_g9chy2ib\"]),\n        model: \"TS0003_3_gang_switch\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch with backlight\",\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        fromZigbee: [],\n        toZigbee: [],\n        endpoint: (device) => ({l1: 1, l2: 2, l3: 3}),\n        meta: {\n            multiEndpoint: true,\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZ3000_qvmiyxuk\"]),\n        model: \"TS0001_1_gang_switch\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch with backlight\",\n        fromZigbee: [],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                onOffCountdown: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_5kxl9esg\", \"_TZ3002_jn2x20tg\"]),\n        model: \"TS0726_1_gang_scene_switch\",\n        vendor: \"Tuya\",\n        description: \"1 gang switch with scene and backlight\",\n        whiteLabel: [tuya.whitelabel(\"BSEED\", \"EC-GL86ZPCS11\", \"1 gang switch with scene and backlight\", [\"_TZ3002_jn2x20tg\"])],\n        fromZigbee: [fzLocal.TS0726_action],\n        exposes: [e.action([\"scene_1\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchMode: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorModeNoneRelayPos: true,\n                onOffCountdown: true,\n            }),\n        ],\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await reporting.bind(device.getEndpoint(1), coordinatorEndpoint, [\"genOnOff\"]);\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_ezqbvrqz\", \"_TZ3002_ymv5vytn\", \"_TZ3002_6ahhkwyh\", \"_TZ3002_zjuvw9zf\"]),\n        model: \"TS0726_2_gang_scene_switch\",\n        vendor: \"Tuya\",\n        description: \"2 gang switch with scene and backlight\",\n        whiteLabel: [tuya.whitelabel(\"BSEED\", \"EC-GL86ZPCS21\", \"2 gang switch with scene and backlight\", [\"_TZ3002_zjuvw9zf\"])],\n        fromZigbee: [fzLocal.TS0726_action],\n        exposes: [e.action([\"scene_1\", \"scene_2\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchMode: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorModeNoneRelayPos: true,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => ({l1: 1, l2: 2}),\n        meta: {\n            multiEndpoint: true,\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_noru9tix\", \"_TZ3002_rbnycsav\", \"_TZ3002_kq3kqwjt\"]),\n        model: \"TS0726_3_gang_scene_switch\",\n        vendor: \"Tuya\",\n        description: \"3 gang switch with scene and backlight\",\n        fromZigbee: [fzLocal.TS0726_action],\n        exposes: [e.action([\"scene_1\", \"scene_2\", \"scene_3\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchMode: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorModeNoneRelayPos: true,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\", \"l3\"],\n            }),\n        ],\n        endpoint: (device) => ({l1: 1, l2: 2, l3: 3}),\n        meta: {\n            multiEndpoint: true,\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0726\", [\"_TZ3000_rsylfthg\", \"_TZ3002_umdkr64x\"]),\n        model: \"TS0726_4_gang_scene_switch\",\n        vendor: \"Tuya\",\n        description: \"4 gang switch with scene and backlight\",\n        fromZigbee: [fzLocal.TS0726_action],\n        exposes: [e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\"])],\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                switchMode: true,\n                powerOnBehavior2: true,\n                backlightModeOffOn: true,\n                indicatorModeNoneRelayPos: true,\n                onOffCountdown: true,\n                endpoints: [\"l1\", \"l2\", \"l3\", \"l4\"],\n            }),\n        ],\n        endpoint: (device) => ({l1: 1, l2: 2, l3: 3, l4: 4}),\n        meta: {\n            multiEndpoint: true,\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            for (const ep of [1, 2, 3, 4]) {\n                await reporting.bind(device.getEndpoint(ep), coordinatorEndpoint, [\"genOnOff\"]);\n            }\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_oc7xqqbs\"]),\n        model: \"HY-SZLUMPIR\",\n        vendor: \"Homcloud\",\n        description: \"PIR sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"off\", respondToMcuVersionResponse: true})],\n        exposes: [e.occupancy(), e.illuminance(), e.battery()],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"occupancy\", tuya.valueConverter.trueFalse0],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [101, \"illuminance\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_1drr8tab\"]),\n        model: \"XZ-AKT101\",\n        vendor: \"Tuya\",\n        description: \"Intelligent air conditioning wall switch\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        ota: true,\n        exposes: [\n            e.binary(\"air_switch\", ea.STATE_SET, true, false),\n            e.child_lock(),\n            e\n                .climate()\n                .withLocalTemperature(ea.STATE)\n                .withSetpoint(\"current_heating_setpoint\", 20, 30, 0.5, ea.STATE_SET)\n                .withSystemMode([\"cool\", \"heat\", \"fan_only\"], ea.STATE_SET, \"Only for Homeassistant\")\n                .withFanMode([\"low\", \"medium\", \"high\", \"auto\"]),\n            e\n                .numeric(\"boost_time\", ea.STATE_SET)\n                .withUnit(\"H\")\n                .withDescription(\"Boost running time. Minimum 0 - maximum 24 hours\")\n                .withValueMin(0)\n                .withValueMax(24)\n                .withValueStep(0.5)\n                .withCategory(\"config\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"air_switch\", tuya.valueConverter.raw],\n                [\n                    2,\n                    \"system_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        heat: tuya.enum(1),\n                        cool: tuya.enum(0),\n                        fan_only: tuya.enum(2),\n                    }),\n                ],\n                [\n                    28,\n                    \"fan_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        low: tuya.enum(0),\n                        medium: tuya.enum(1),\n                        high: tuya.enum(2),\n                        auto: tuya.enum(3),\n                    }),\n                ],\n                [16, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [24, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [40, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [101, \"boost_time\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_jcwbwckh\"]),\n        model: \"ZBN-JT-63\",\n        vendor: \"Tuya\",\n        description: \"Din rail switch with power monitoring\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            tuya.exposes.switch(),\n            e.numeric(\"power\", ea.STATE).withDescription(\"power\").withUnit(\"W\").withDescription(\"Instantaneous measured power\"),\n            e.numeric(\"current\", ea.STATE).withDescription(\"current\").withUnit(\"A\").withDescription(\"Instantaneous measured electrical current\"),\n            e.numeric(\"voltage\", ea.STATE).withDescription(\"voltage\").withUnit(\"V\").withDescription(\"Measured electrical potential value\"),\n            e.numeric(\"energy\", ea.STATE).withDescription(\"energy\").withUnit(\"kWh\").withDescription(\"Consumed energy\"),\n            e.enum(\"power_outage_memory\", ea.STATE_SET, [\"on\", \"off\", \"restore\"]).withDescription(\"Recover state after power outage\"),\n            e\n                .enum(\"fault\", ea.STATE, [\n                    \"clear\",\n                    \"short_circuit_alarm\",\n                    \"surge_alarm\",\n                    \"overload_alarm\",\n                    \"leakagecurr_alarm\",\n                    \"temp_dif_fault\",\n                    \"fire_alarm\",\n                    \"high_power_alarm\",\n                    \"self_test_alarm\",\n                    \"ov_cr\",\n                    \"unbalance_alarm\",\n                    \"ov_vol\",\n                    \"undervoltage_alarm\",\n                    \"miss_phase_alarm\",\n                    \"outage_alarm\",\n                    \"magnetism_alarm\",\n                    \"credit_alarm\",\n                    \"no_balance_alarm\",\n                ])\n                .withDescription(\"Fault status of the device (clear = nothing)\"),\n            e.text(\"meter_id\", ea.STATE).withDescription(\"Meter ID (ID of device)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100],\n                [3, null, null],\n                [4, null, null],\n                [6, null, tuya.valueConverter.phaseVariant3],\n                [\n                    10,\n                    \"fault\",\n                    tuya.valueConverterBasic.lookup({\n                        clear: 0,\n                        ov_cr: 1,\n                        unbalance_alarm: 2,\n                        ov_vol: 4,\n                        undervoltage_alarm: 8,\n                        miss_phase_alarm: 16,\n                        outage_alarm: 32,\n                        magnetism_alarm: 64,\n                        terminal_alarm: 128,\n                        cover_alarm: 256,\n                        credit_alarm: 512,\n                        no_balance_alarm: 1024,\n                        battery_alarm: 2048,\n                        meter_hardware_alarm: 4096,\n                    }),\n                ],\n                [16, \"state\", tuya.valueConverter.onOff],\n                [\n                    18,\n                    \"meter_id\",\n                    {\n                        from: (v) => {\n                            if (typeof v === \"object\") {\n                                const buf = Buffer.from([v[0], v[1], v[2], v[3]]);\n                                return buf.readUInt32BE();\n                            }\n                            return v;\n                        },\n                    },\n                ],\n                [\n                    23,\n                    \"power_outage_memory\",\n                    tuya.valueConverterBasic.lookup({\n                        on: 0,\n                        off: 1,\n                        restore: 2,\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"5rta89nj\"],\n        fingerprint: [{modelID: \"TS0601\", manufacturerName: \"_TZ3210_emqmwtym\"}],\n        model: \"EPJ-ZB\",\n        vendor: \"Nova Digital\",\n        description: \"Smart sliding window pusher\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.battery(),\n            e.cover_position(),\n            e.binary(\"charge_state\", ea.STATE, \"true\", \"false\"),\n            e.enum(\"manual_mode\", ea.STATE_SET, [\"Enable\", \"Disable\"]),\n            e.enum(\"fault\", ea.STATE, [\"Normal\", \"None\", \"Fault\"]).withDescription(\"Motor Fault\"),\n            e.numeric(\"countdown\", ea.STATE_SET).withValueMin(10).withValueMax(90).withUnit(\"s\").withDescription(\"Motor timeout\"),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"Left Side\", \"Right Side\"]).withDescription(\"Pusher install side\"),\n            e.enum(\"mode\", ea.STATE_SET, [\"Enable\", \"Disable\"]).withDescription(\"Slow stop mode\"),\n            e.enum(\"fixed_window_sash\", ea.STATE_SET, [\"Up\", \"Down\"]).withDescription(\"Button position\"),\n            e.enum(\"window_detection\", ea.STATE, [\"Opened\", \"Closed\", \"Pending\"]).withDescription(\"Window detection status\"),\n        ],\n        meta: {\n            tuyaSendCommand: \"sendData\",\n            tuyaDatapoints: [\n                [4, \"battery\", tuya.valueConverter.raw],\n                [102, \"state\", tuya.valueConverterBasic.lookup({OPEN: 0, CLOSE: 1, STOP: 2})],\n                [104, \"position\", tuya.valueConverter.coverPosition],\n                [105, \"charge_state\", tuya.valueConverter.trueFalse1],\n                [106, \"manual_mode\", tuya.valueConverterBasic.lookup({Enable: 0, Disable: 1})],\n                [107, \"fault\", tuya.valueConverterBasic.lookup({Normal: 0, None: 1, Fault: 2})],\n                [108, \"countdown\", tuya.valueConverter.raw],\n                [109, \"motor_direction\", tuya.valueConverterBasic.lookup({\"Left Side\": 1, \"Right Side\": 0})],\n                [110, \"mode\", tuya.valueConverterBasic.lookup({Enable: 1, Disable: 0})],\n                [112, \"fixed_window_sash\", tuya.valueConverterBasic.lookup({Up: 1, Down: 0})],\n                [114, \"window_detection\", tuya.valueConverterBasic.lookup({Opened: 0, Closed: 1, Pending: 2})],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-102ZM\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_wzk0x7fq\", \"_TZE200_jfw0a4aa\"]),\n        model: \"ZG-102ZM\",\n        vendor: \"HOBEIAN\",\n        description: \"Vibration sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.vibration(),\n            e.contact(),\n            e.battery(),\n            e\n                .numeric(\"sensitivity\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(50)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"The larger the value, the more sensitive it is (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"vibration\", tuya.valueConverter.trueFalse1],\n                [101, \"contact\", tuya.valueConverter.inverse],\n                [4, \"battery\", tuya.valueConverter.raw],\n                [6, \"sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZV\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_uli8wasj\", \"_TZE200_grgol3xp\", \"_TZE200_rhgsbacq\", \"_TZE200_y8jijhba\"]),\n        model: \"ZG-204ZV\",\n        vendor: \"HOBEIAN\",\n        description: \"Millimeter wave motion detection\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e.temperature(),\n            e.humidity(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            e.battery(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Motion keep time\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n            e\n                .numeric(\"illuminance_interval\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(720)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Light sensing sampling(refresh and update only while active)\"),\n            e\n                .numeric(\"motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(19)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"The larger the value, the more sensitive it is (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [2, \"motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [108, \"indicator\", tuya.valueConverter.onOff],\n                [110, \"battery\", tuya.valueConverter.raw],\n                [111, \"temperature\", tuya.valueConverter.divideBy10],\n                [101, \"humidity\", tuya.valueConverter.raw],\n                [109, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [105, \"temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [104, \"humidity_calibration\", tuya.valueConverter.localTempCalibration2],\n                [107, \"illuminance_interval\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-223Z\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_jsaqgakf\", \"_TZE200_u6x1zyv2\"]),\n        model: \"ZG-223Z\",\n        vendor: \"HOBEIAN\",\n        description: \"Rainwater detection sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.enum(\"rainwater\", ea.STATE, [\"none\", \"raining\"]).withDescription(\"Sensor rainwater status\"),\n            e.illuminance(),\n            e\n                .numeric(\"sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(9)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"The larger the value, the more sensitive it is (refresh and update only while active)\"),\n            e\n                .numeric(\"illuminance_sampling\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(480)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Brightness acquisition interval (refresh and update only while active)\"),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"rainwater\",\n                    tuya.valueConverterBasic.lookup({\n                        none: tuya.enum(0),\n                        raining: tuya.enum(1),\n                    }),\n                ],\n                [102, \"illuminance\", tuya.valueConverter.raw],\n                [104, \"battery\", tuya.valueConverter.raw],\n                [2, \"sensitivity\", tuya.valueConverter.raw],\n                [101, \"illuminance_sampling\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_no6qtgtl\"]),\n        model: \"RD24G01\",\n        vendor: \"Tuya\",\n        description: \"24GHz human presence sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            exposes\n                .enum(\"presence_state\", exposes.access.STATE, [\"none\", \"motion\", \"stationary\"])\n                .withDescription(\"Presence state: none, motion, or stationary\"),\n            exposes.numeric(\"target_distance_closest\", exposes.access.STATE).withUnit(\"m\").withDescription(\"Closest target distance\"),\n            exposes\n                .numeric(\"near_detection\", exposes.access.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\"Minimum detection range\")\n                .withValueMin(0.1)\n                .withValueMax(6),\n            exposes\n                .numeric(\"far_detection\", exposes.access.STATE_SET)\n                .withUnit(\"m\")\n                .withDescription(\"Maximum detection range\")\n                .withValueMin(0.1)\n                .withValueMax(6),\n            exposes\n                .numeric(\"static_sensitivity\", exposes.access.STATE_SET)\n                .withDescription(\"Static presence sensitivity\")\n                .withValueMin(0)\n                .withValueMax(10),\n            exposes.numeric(\"motion_sensitivity\", exposes.access.STATE_SET).withDescription(\"Motion sensitivity\").withValueMin(0).withValueMax(10),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"presence_state\",\n                    tuya.valueConverterBasic.lookup({\n                        none: 0,\n                        motion: 1,\n                        stationary: 2,\n                    }),\n                ],\n                [3, \"near_detection\", tuya.valueConverter.divideBy100],\n                [4, \"far_detection\", tuya.valueConverter.divideBy100],\n                [9, \"target_distance_closest\", tuya.valueConverter.divideBy100],\n                [101, \"static_sensitivity\", tuya.valueConverter.raw],\n                [102, \"motion_sensitivity\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_gubdgai2\", \"_TZE200_vdiuwbkq\"]),\n        model: \"M515EGBZTN\",\n        vendor: \"Quoya\",\n        description: \"Zigbee roller blind\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        options: [exposes.options.invert_cover()],\n        exposes: [\n            e.cover_position().setAccess(\"position\", ea.STATE_SET),\n            e.enum(\"motor_direction\", ea.STATE_SET, [\"forward\", \"back\"]).withDescription(\"Motor direction\"),\n            e.enum(\"border\", ea.STATE_SET, [\"up\", \"down\", \"up_delete\", \"down_delete\", \"remove_top_bottom\"]).withDescription(\"Limit setting\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup({\n                        OPEN: tuya.enum(0),\n                        STOP: tuya.enum(1),\n                        CLOSE: tuya.enum(2),\n                    }),\n                ],\n                [2, \"position\", tuya.valueConverter.coverPositionInverted],\n                [\n                    5,\n                    \"motor_direction\",\n                    tuya.valueConverterBasic.lookup({\n                        forward: tuya.enum(0),\n                        back: tuya.enum(1),\n                    }),\n                ],\n                [\n                    16,\n                    \"border\",\n                    tuya.valueConverterBasic.lookup({\n                        up: tuya.enum(0),\n                        down: tuya.enum(1),\n                        up_delete: tuya.enum(2),\n                        down_delete: tuya.enum(3),\n                        remove_top_bottom: tuya.enum(4),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-303Z\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_npj9bug3\", \"_TZE200_wrmhp6b3\"]),\n        model: \"CS-201Z\",\n        vendor: \"COOLO\",\n        description: \"Soil moisture sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.dry(),\n            e.temperature(),\n            e.humidity(),\n            e.soil_moisture(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            tuya.exposes.soilCalibration(),\n            tuya.exposes.temperatureSampling(),\n            tuya.exposes.soilSampling(),\n            tuya.exposes.soilWarning(),\n            e.battery(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [106, \"dry\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.divideBy10],\n                [109, \"humidity\", tuya.valueConverter.raw],\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [15, \"battery\", tuya.valueConverter.raw],\n                [9, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [104, \"temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [105, \"humidity_calibration\", tuya.valueConverter.localTempCalibration2],\n                [102, \"soil_calibration\", tuya.valueConverter.localTempCalibration2],\n                [111, \"temperature_sampling\", tuya.valueConverter.raw],\n                [112, \"soil_sampling\", tuya.valueConverter.raw],\n                [110, \"soil_warning\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0001\", [\"_TZE21C_dohbhb5k\"]),\n        model: \"TYONOFFTS\",\n        vendor: \"Scimagic\",\n        description: \"Smart switch with temperature sensor\",\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            tuya.modernExtend.dpOnOff({\n                dp: 0x02,\n            }),\n            tuya.modernExtend.dpTemperature({dp: 0x1b}),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x1e,\n                name: \"temperature_calibration\",\n                type: tuya.dataTypes.number,\n                valueMin: -10,\n                valueMax: 10,\n                valueStep: 0.5,\n                unit: \"°C\",\n                scale: 2,\n                description: \"Temperature calibration\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x1d,\n                name: \"temperature_range\",\n                type: tuya.dataTypes.number,\n                valueMin: 1,\n                valueMax: 10,\n                valueStep: 0.1,\n                unit: \"°C\",\n                scale: 10,\n                description: \"Keep the temperature in a range\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"auto_work\",\n                dp: 0x09,\n                type: tuya.dataTypes.bool,\n                valueOn: [\"ON\", true],\n                valueOff: [\"OFF\", false],\n                description: \"Auto work mode\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x16,\n                name: \"temperature_target\",\n                type: tuya.dataTypes.number,\n                valueMin: -100,\n                valueMax: 100,\n                valueStep: 0.5,\n                unit: \"°C\",\n                scale: 10,\n                description: \"Temperature target\",\n            }),\n            tuya.modernExtend.dpEnumLookup({\n                dp: 0x08,\n                name: \"mode\",\n                type: tuya.dataTypes.enum,\n                lookup: {Heating: 0, Cooling: 2},\n                description: \"Work mode\",\n            }),\n            tuya.modernExtend.dpBinary({\n                name: \"delay\",\n                dp: 0x38,\n                type: tuya.dataTypes.bool,\n                valueOn: [\"ON\", 1],\n                valueOff: [\"OFF\", 0],\n                description: \"Switch delay time mode\",\n            }),\n            tuya.modernExtend.dpNumeric({\n                dp: 0x37,\n                name: \"delay_time\",\n                type: tuya.dataTypes.number,\n                valueMin: 0,\n                valueMax: 10,\n                valueStep: 1,\n                unit: \"minute\",\n                scale: 1,\n                description: \"Switch delay time\",\n            }),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_5ys44kzo\"]),\n        model: \"TYSCENECUBE\",\n        vendor: \"iHseno\",\n        description: \"Scene cube\",\n        extend: [\n            tuya.modernExtend.tuyaMagicPacket(),\n            ...convLocal.sceneCubeAction(),\n            tuya.modernExtend.dpBattery({\n                dp: 0x0a,\n            }),\n        ],\n    },\n    {\n        zigbeeModel: [\"ZG-305Z\"],\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_rul9yxcc\"]),\n        model: \"SM-PW801EZ\",\n        vendor: \"Coswall\",\n        description: \"2 gang switch with USB\",\n        ota: true,\n        extend: [\n            tuya.modernExtend.tuyaOnOff({\n                childLock: true,\n                endpoints: [\"l1\", \"l2\"],\n            }),\n        ],\n        endpoint: (device) => {\n            return {l1: 1, l2: 2};\n        },\n        meta: {\n            multiEndpoint: true,\n            multiEndpointSkip: [\"power_on_behavior\"],\n        },\n        configure: tuya.configureMagicPacket,\n\n        whiteLabel: [{vendor: \"HOBEIAN\", model: \"ZG-305Z\", fingerprint: [{modelID: \"ZG-305Z\"}]}],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_tgeqdjgk\"]),\n        model: \"TS0601_knob_dimmer_switch\",\n        vendor: \"Tuya\",\n        description: \"Dimmer knob with two lights\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tzLocal.TS0601_knob_dimmer_switch_group_id, tuya.tz.datapoints],\n        exposes: [\n            e.switch(),\n            e.switch().withEndpoint(\"l1\"),\n            e.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switchMode().withEndpoint(\"l1\"),\n            tuya.exposes.switchMode().withEndpoint(\"l2\"),\n\n            e.light_brightness_colortemp([154, 370]),\n\n            e.enum(\"adjustment_mode\", ea.ALL, [\"brightness\", \"color_temp\"]).withDescription(\"Adjustment mode\"),\n            tuya.exposes.powerOnBehavior(),\n            e.action([\"button_1\", \"button_2\"]),\n            e.enum(\"mode\", ea.ALL, [\"knob\", \"scene\"]).withDescription(\"Mode\"),\n\n            e.numeric(\"group_id\", ea.SET).withValueMin(1).withValueMax(10000).withDescription(\"Group ID to bind to.\"),\n        ],\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [102, \"state\", tuya.valueConverter.onOff],\n                [121, \"state_l1\", tuya.valueConverter.onOff],\n                [122, \"state_l2\", tuya.valueConverter.onOff],\n                [131, \"switch_mode_l1\", tuya.valueConverter.switchMode],\n                [132, \"switch_mode_l2\", tuya.valueConverter.switchMode],\n                [103, \"brightness\", tuya.valueConverterBasic.scale(0, 254, 0, 1000)],\n                [107, \"color_temp\", tuya.valueConverterBasic.scale(154, 370, 0, 1000)],\n                [105, \"adjustment_mode\", tuya.valueConverterBasic.lookup({brightness: tuya.enum(0), color_temp: tuya.enum(1)})],\n                [106, \"power_on_behavior\", tuya.valueConverter.powerOnBehavior],\n                [111, \"action\", tuya.valueConverterBasic.lookup({button_1: tuya.enum(0)})],\n                [112, \"action\", tuya.valueConverterBasic.lookup({button_2: tuya.enum(0)})],\n                [141, \"mode\", tuya.valueConverterBasic.lookup({knob: tuya.enum(0), scene: tuya.enum(1)})],\n            ],\n        },\n        configure: async (device, coordinatorEndpoint) => {\n            const endpoint = device.getEndpoint(1);\n            await tuya.configureMagicPacket(device, coordinatorEndpoint);\n            await endpoint.command(\"genBasic\", \"tuyaSetup\", {}, {disableDefaultResponse: true});\n        },\n        endpoint: (device) => ({\n            default: 1,\n            l1: 1,\n            l2: 1,\n        }),\n    },\n    {\n        fingerprint: [{modelID: \"TS0601\", manufacturerName: \"_TZE200_khah2lkr\"}],\n        model: \"HY607W-3A\",\n        vendor: \"Tuya\",\n        description: \"Thermostat for gas boiler\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        configure: tuya.configureMagicPacket,\n        exposes: [\n            e.climate().withLocalTemperature(ea.STATE).withSetpoint(\"occupied_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET),\n            e\n                .enum(\"mode_state\", ea.STATE_SET, [\"manual\", \"auto\", \"temp_override\"])\n                .withDescription(\"Thermostat mode: manual, auto, or temp_override\"),\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"ON/OFF thermostat\"),\n            e.enum(\"running_state\", ea.STATE, [\"idle\", \"heat\"]).withDescription(\"State of heating\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [16, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [50, \"occupied_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [125, \"state\", tuya.valueConverter.onOff],\n                [\n                    128,\n                    \"mode_state\",\n                    {\n                        from: (v: Buffer | number | number[] | string | undefined | {data: number[]}) => {\n                            function extractFirstNumericByte(v: Buffer | number | number[] | string | undefined | {data: number[]}) {\n                                try {\n                                    if (v === undefined || v === null) return undefined;\n                                    if (Buffer.isBuffer(v)) return v.length > 0 ? v[0] : undefined;\n                                    if (typeof v === \"object\" && !Array.isArray(v) && \"data\" in v && Array.isArray(v.data))\n                                        return v.data.length > 0 ? v.data[0] : undefined;\n                                    if (Array.isArray(v)) return v.length > 0 && typeof v[0] === \"number\" ? v[0] : undefined;\n                                    if (typeof v === \"number\") return v;\n                                    if (typeof v === \"string\" && v.length > 0) {\n                                        const n = Number.parseInt(v, 10);\n                                        return Number.isNaN(n) ? undefined : n;\n                                    }\n                                } catch (_err) {}\n                                return undefined;\n                            }\n                            const b = extractFirstNumericByte(v);\n                            const lookup: {[key: number]: string} = {0: \"manual\", 1: \"auto\", 3: \"temp_override\"};\n                            return b !== undefined ? lookup[b] : undefined;\n                        },\n                        to: (v: string) => {\n                            if (typeof v !== \"string\") return undefined;\n                            const lookup: {[key: string]: number} = {manual: 0, auto: 1, temp_override: 3};\n                            const n = lookup[v];\n                            return n !== undefined ? [n] : undefined;\n                        },\n                    },\n                ],\n                [102, \"running_state\", {from: (v: boolean) => (v === true ? \"heat\" : \"idle\")}],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZH\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_vuqzj1ej\", \"_TZE200_hdih4foa\"]),\n        model: \"ZG-204ZH\",\n        vendor: \"HOBEIAN\",\n        description: \"PIR 24Ghz human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e.temperature(),\n            e.humidity(),\n            tuya.exposes.temperatureUnit(),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.humidityCalibration(),\n            e.battery(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Motion keep time\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n            e\n                .numeric(\"illuminance_interval\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(720)\n                .withValueStep(1)\n                .withUnit(\"minutes\")\n                .withDescription(\"Light sensing sampling(refresh and update only while active)\"),\n            e\n                .numeric(\"static_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(5)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Static detection distance\"),\n            e\n                .numeric(\"static_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Static detection sensitivity\"),\n            e.enum(\"motion_detection_mode\", ea.STATE_SET, [\"pir_and_radar\", \"pir_or_radar\", \"only_radar\"]).withDescription(\"Motion detection mode\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [2, \"static_detection_sensitivity\", tuya.valueConverter.raw],\n                [4, \"static_detection_distance\", tuya.valueConverter.divideBy100],\n                [108, \"indicator\", tuya.valueConverter.onOff],\n                [110, \"battery\", tuya.valueConverter.raw],\n                [111, \"temperature\", tuya.valueConverter.divideBy10],\n                [101, \"humidity\", tuya.valueConverter.raw],\n                [109, \"temperature_unit\", tuya.valueConverter.temperatureUnit],\n                [105, \"temperature_calibration\", tuya.valueConverter.localTempCalibration3],\n                [104, \"humidity_calibration\", tuya.valueConverter.localTempCalibration2],\n                [107, \"illuminance_interval\", tuya.valueConverter.raw],\n                [\n                    112,\n                    \"motion_detection_mode\",\n                    tuya.valueConverterBasic.lookup({\n                        pir_and_radar: tuya.enum(0),\n                        pir_or_radar: tuya.enum(1),\n                        only_radar: tuya.enum(2),\n                    }),\n                ],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_z5jz7wpo\"]),\n        model: \"_TZE284_z5jz7wpo\",\n        vendor: \"Tuya\",\n        description: \"Ceiling fan control module\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n        exposes: [\n            e.fan().withState().withSpeed(),\n            e.power_on_behavior([\"off\", \"on\", \"restore\"]).withAccess(ea.STATE_SET),\n            exposes\n                .numeric(\"countdown_hours\", ea.STATE_SET)\n                .withUnit(\"h\")\n                .withValueMin(0.25)\n                .withValueMax(12)\n                .withValueStep(0.25)\n                .withDescription(\"Fan ON time in hours (15 min increments)\"),\n            e.enum(\"light_mode\", ea.STATE_SET, [\"none\", \"relay\", \"pos\"]),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [\n                    2,\n                    \"countdown_hours\",\n                    {\n                        from: (seconds) => +(seconds / 3600).toFixed(2), // device → HA (hours with 2 decimal places)\n                        to: (hours) => Math.min(43200, Math.round(hours * 3600)), // HA → device (seconds)\n                    },\n                ],\n                [\n                    3,\n                    \"speed\",\n                    {\n                        from: (value) => (value + 1) * 51, // device → HA %\n                        to: (value) => {\n                            // Snap HA % to nearest step: 20%, 40%, 60%, 80%, 100%\n                            const snappedStep = Math.max(0, Math.min(4, Math.round(value / 51) - 1));\n                            return tuya.enum(snappedStep);\n                        },\n                    },\n                ],\n                [11, \"power_on_behavior\", tuya.valueConverterBasic.lookup({off: tuya.enum(0), on: tuya.enum(1), restore: tuya.enum(2)})],\n                [12, \"light_mode\", tuya.valueConverterBasic.lookup({none: tuya.enum(0), relay: tuya.enum(1), pos: tuya.enum(2)})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_pglpvdar\", \"_TZE284_4hdbt6rn\"]),\n        model: \"TO-Q-SA1\",\n        vendor: \"Tongou\",\n        description: \"Zigbee energy meter (transformer clamp)\",\n        whiteLabel: [tuya.whitelabel(\"Tongou\", \"TOSA1-01WXJAT2A\", \"Smart energy meter, two wire\", [\"_TZE284_4hdbt6rn\"])],\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.energy(),\n            e.voltage(),\n            e.current(),\n            e.power(),\n            e.ac_frequency(),\n            e.power_factor().withUnit(\"%\"),\n            e.numeric(\"temperature\", ea.STATE).withUnit(\"°C\").withDescription(\"Current temperature\"),\n            e\n                .enum(\"event\", ea.STATE, [\n                    \"normal\",\n                    \"over_current_trip\",\n                    \"over_power_trip\",\n                    \"high_temp_trip\",\n                    \"over_voltage_trip\",\n                    \"under_voltage_trip\",\n                    \"over_current_alarm\",\n                    \"over_power_alarm\",\n                    \"high_temp_alarm\",\n                    \"over_voltage_alarm\",\n                    \"under_voltage_alarm\",\n                    \"remote_on\",\n                    \"remote_off\",\n                    \"manual_on\",\n                    \"manual_off\",\n                    \"leakage_trip\",\n                    \"leakage_alarm\",\n                    \"restore_default\",\n                    \"automatic_closing\",\n                    \"electricity_shortage\",\n                    \"electricity_shortage_alarm\",\n                    \"timing_switch_On\",\n                    \"timing_switch_off\",\n                ])\n                .withDescription(\"Last event of the device\"),\n            e.enum(\"over_current_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\"]).withDescription(\"Over current setting\"),\n            e\n                .numeric(\"over_current_threshold\", ea.STATE_SET)\n                .withUnit(\"A\")\n                .withDescription(\"Setup the value on the device\")\n                .withValueMin(1)\n                .withValueMax(50),\n            e.enum(\"over_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\"]).withDescription(\"Over voltage setting\"),\n            e\n                .numeric(\"over_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(240)\n                .withValueMax(295),\n            e.enum(\"under_voltage_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\"]).withDescription(\"Under voltage setting\"),\n            e\n                .numeric(\"under_voltage_threshold\", ea.STATE_SET)\n                .withUnit(\"V\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(90)\n                .withValueMax(220),\n            e.enum(\"temperature_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\"]).withDescription(\"Temperature setting\"),\n            e\n                .numeric(\"temperature_threshold\", ea.STATE_SET)\n                .withUnit(\"°C\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(-25)\n                .withValueMax(80),\n            e.enum(\"over_power_setting\", ea.STATE_SET, [\"Ignore\", \"Alarm\"]).withDescription(\"Over power setting\"),\n            e\n                .numeric(\"over_power_threshold\", ea.STATE_SET)\n                .withUnit(\"W\")\n                .withDescription(\"Setup value on the device\")\n                .withValueMin(1000)\n                .withValueMax(26000),\n        ],\n        meta: {\n            multiEndpointSkip: [\"test1\", \"forward_electricity\"],\n            tuyaDatapoints: [\n                [1, \"energy\", tuya.valueConverter.divideBy100], // Total forward energy\n                [6, null, tuya.valueConverter.phaseVariant2], // Phase A\n                [13, \"test1\", tuya.valueConverter.raw], // Remaining electricity\n                [32, \"ac_frequency\", tuya.valueConverter.divideBy100], // Grid supply frequency\n                [50, \"power_factor\", tuya.valueConverter.raw], // Overall power factor\n                [\n                    102,\n                    \"over_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                    }),\n                ],\n                [\n                    103,\n                    \"under_voltage_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                    }),\n                ],\n                [\n                    104,\n                    \"over_current_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                    }),\n                ],\n                [\n                    105,\n                    \"over_power_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                    }),\n                ],\n                [\n                    107,\n                    \"temperature_setting\",\n                    tuya.valueConverterBasic.lookup({\n                        Ignore: tuya.enum(0),\n                        Alarm: tuya.enum(1),\n                    }),\n                ],\n                [\n                    110,\n                    \"event\",\n                    tuya.valueConverterBasic.lookup({\n                        normal: 0,\n                        over_current_trip: 1,\n                        over_power_trip: 2,\n                        high_temp_trip: 3,\n                        over_voltage_trip: 4,\n                        under_voltage_trip: 5,\n                        over_current_alarm: 6,\n                        over_power_alarm: 7,\n                        high_temp_alarm: 8,\n                        over_voltage_alarm: 9,\n                        under_voltage_alarm: 10,\n                        remote_on: 11,\n                        remote_off: 12,\n                        manual_on: 13,\n                        manual_off: 14,\n                        leakage_trip: 15,\n                        leakage_alarm: 16,\n                        restore_default: 17,\n                        automatic_closing: 18,\n                        electricity_shortage: 19,\n                        electricity_shortage_alarm: 20,\n                        timing_switch_on: 21,\n                        timing_switch_off: 22,\n                    }),\n                ],\n                [114, \"over_current_threshold\", tuya.valueConverter.raw],\n                [115, \"over_voltage_threshold\", tuya.valueConverter.raw],\n                [116, \"under_voltage_threshold\", tuya.valueConverter.raw],\n                [118, \"temperature_threshold\", tuya.valueConverter.divideBy10],\n                [119, \"over_power_threshold\", tuya.valueConverter.raw],\n                [125, \"forward_electricity\", tuya.valueConverter.raw],\n                [131, \"temperature\", tuya.valueConverter.divideBy10],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_q9xty0ad\"]),\n        model: \"_TZE204_q9xty0ad\",\n        vendor: \"Tuya\",\n        description: \"Ayvolt Blinds\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n        options: [exposes.options.invert_cover()],\n        exposes: [e.cover_position(), e.enum(\"motor_direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Motor direction\")],\n        meta: {\n            tuyaDatapoints: [\n                [\n                    1,\n                    \"state\",\n                    tuya.valueConverterBasic.lookup((options) =>\n                        options.invert_cover\n                            ? {OPEN: tuya.enum(2), STOP: tuya.enum(1), CLOSE: tuya.enum(0)}\n                            : {OPEN: tuya.enum(0), STOP: tuya.enum(1), CLOSE: tuya.enum(2)},\n                    ),\n                ],\n                [\n                    3,\n                    \"work_state\",\n                    tuya.valueConverterBasic.lookup((options) =>\n                        options.invert_cover ? {opening: tuya.enum(1), closing: tuya.enum(0)} : {opening: tuya.enum(0), closing: tuya.enum(1)},\n                    ),\n                ],\n                [\n                    8,\n                    null,\n                    {\n                        from: (v, meta, options, publish) => {\n                            return {\n                                position: tuya.valueConverter.coverPosition.from(v, meta, options, publish),\n                            };\n                        },\n                    },\n                ],\n                [9, \"position\", tuya.valueConverter.coverPosition],\n                [11, \"motor_direction\", tuya.valueConverter.tubularMotorDirection],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS011F\", [\"_TZ3000_qiutut5y\"]),\n        model: \"TS011F_quad_power1\",\n        vendor: \"Tuya\",\n        description: \"Switch with 4 gangs\",\n        extend: [\n            m.deviceEndpoints({endpoints: {\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4}}),\n            m.onOff({powerOnBehavior: false, endpointNames: [\"1\", \"2\", \"3\", \"4\"]}),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_3regm3h6\"]),\n        model: \"_TZE204_3regm3h6\",\n        vendor: \"Tuya\",\n        description: \"Smart thermostat for electric radiator with pilot wire\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n        exposes: [\n            e.binary(\"state\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Turn the heater on or off\").withCategory(\"config\"),\n            e.child_lock(),\n            e\n                .climate()\n                .withSetpoint(\"current_heating_setpoint\", 5, 35, 0.5, ea.STATE_SET)\n                .withLocalTemperature(ea.STATE)\n                .withLocalTemperatureCalibration(-9, 9, 1, ea.STATE_SET)\n                .withSystemMode([\"off\", \"heat\"], ea.STATE)\n                .withPreset([\"comfort\", \"eco\", \"antifrost\", \"off\", \"comfort_1\", \"comfort_2\", \"program\", \"manual\"]),\n            e\n                .enum(\"mode\", ea.STATE, [\"comfort\", \"eco\", \"antifrost\", \"off\", \"comfort_1\", \"comfort_2\", \"program\", \"manual\"])\n                .withDescription(\"Current running mode\")\n                .withCategory(\"diagnostic\"),\n            e\n                .binary(\"radiators_without_integrated_regulation\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withDescription(\n                    \"Enable this for radiator without integrated regulation. OFF if Comfort, Eco and Antifrost temperatures can be defined on the radiator. ON if the radiator has no integrated regulation (i.e define temperatures on the thermostat).\",\n                )\n                .withCategory(\"config\"),\n            e\n                .numeric(\"comfort_temperature\", ea.STATE_SET)\n                .withUnit(\"  C\")\n                .withValueMin(5)\n                .withValueMax(35)\n                .withValueStep(0.5)\n                .withDescription(\"Set comfort temperature\")\n                .withCategory(\"config\"),\n            e\n                .numeric(\"eco_temperature\", ea.STATE_SET)\n                .withUnit(\"  C\")\n                .withValueMin(5)\n                .withValueMax(30)\n                .withValueStep(0.5)\n                .withDescription(\"Set ECO temperature\")\n                .withCategory(\"config\"),\n            e\n                .numeric(\"antifrost_temperature\", ea.STATE_SET)\n                .withUnit(\"  C\")\n                .withValueMin(5)\n                .withValueMax(15)\n                .withValueStep(0.5)\n                .withDescription(\"Set antifrost temperature\")\n                .withCategory(\"config\"),\n            e\n                .numeric(\"temperature_sensibility\", ea.STATE_SET)\n                .withUnit(\"  C\")\n                .withValueMin(0.5)\n                .withValueMax(5)\n                .withValueStep(0.5)\n                .withDescription(\"Set thermostat sensitivity\")\n                .withCategory(\"config\"),\n            e.binary(\"antifrost\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Enable antifrost protection feature\").withCategory(\"config\"),\n            e\n                .binary(\"window_detection\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Open window detection\")\n                .withDescription(\"Enable / Disable open window detection feature\")\n                .withCategory(\"config\"),\n            e.enum(\"window\", ea.STATE, [\"close\", \"open\"]).withDescription(\"Indicates if window is open\").withCategory(\"diagnostic\"),\n            e.power(),\n            e.voltage(),\n            e.current(),\n            e.energy(),\n            e.numeric(\"energy_today\", ea.STATE).withUnit(\"kWh\").withDescription(\"Energy consumed today\"),\n            e.numeric(\"energy_yesterday\", ea.STATE).withUnit(\"kWh\").withDescription(\"Energy consumed yesterday\"),\n            e\n                .enum(\"device_mode_type\", ea.STATE, [\"four\", \"six\", \"switch\"])\n                .withDescription(\"Indicates the actual pilot wire mode of the thermostat\")\n                .withCategory(\"diagnostic\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"state\", tuya.valueConverter.onOff],\n                [1, \"system_mode\", tuya.valueConverterBasic.lookup({heat: true, off: false})],\n                [\n                    2,\n                    \"mode\",\n                    tuya.valueConverterBasic.lookup({\n                        comfort: tuya.enum(0),\n                        eco: tuya.enum(1),\n                        antifrost: tuya.enum(2),\n                        off: tuya.enum(3),\n                        comfort_1: tuya.enum(4),\n                        comfort_2: tuya.enum(5),\n                        program: tuya.enum(6),\n                        manual: tuya.enum(7),\n                    }),\n                ],\n                [\n                    2,\n                    \"preset\",\n                    tuya.valueConverterBasic.lookup({\n                        comfort: tuya.enum(0),\n                        eco: tuya.enum(1),\n                        antifrost: tuya.enum(2),\n                        off: tuya.enum(3),\n                        comfort_1: tuya.enum(4),\n                        comfort_2: tuya.enum(5),\n                        program: tuya.enum(6),\n                        manual: tuya.enum(7),\n                    }),\n                ],\n                [11, \"power\", tuya.valueConverter.raw],\n                [16, \"local_temperature\", tuya.valueConverter.divideBy10],\n                [\n                    17,\n                    \"window\",\n                    tuya.valueConverterBasic.lookup({\n                        close: tuya.enum(0),\n                        open: tuya.enum(1),\n                    }),\n                ],\n                [19, \"local_temperature_calibration\", tuya.valueConverter.localTempCalibration2],\n                [20, \"fault\", tuya.valueConverter.raw],\n                [29, \"window_detection\", tuya.valueConverter.onOff],\n                [39, \"child_lock\", tuya.valueConverter.lockUnlock],\n                [50, \"current_heating_setpoint\", tuya.valueConverter.divideBy10],\n                [101, \"voltage\", tuya.valueConverter.divideBy10],\n                [102, \"current\", tuya.valueConverter.divideBy1000],\n                [103, \"temperature_sensibility\", tuya.valueConverter.divideBy10],\n                [104, \"energy_today\", tuya.valueConverter.raw],\n                [105, \"energy_yesterday\", tuya.valueConverter.raw],\n                [\n                    106,\n                    \"device_mode_type\",\n                    tuya.valueConverterBasic.lookup({\n                        four: tuya.enum(0),\n                        six: tuya.enum(1),\n                        switch: tuya.enum(2),\n                    }),\n                ],\n                [107, \"energy\", tuya.valueConverter.raw],\n                [108, \"week_program_1\", tuya.valueConverter.raw],\n                [109, \"week_program_2\", tuya.valueConverter.raw],\n                [110, \"week_program_3\", tuya.valueConverter.raw],\n                [111, \"week_program_4\", tuya.valueConverter.raw],\n                [112, \"week_program_5\", tuya.valueConverter.raw],\n                [113, \"week_program_6\", tuya.valueConverter.raw],\n                [114, \"week_program_7\", tuya.valueConverter.raw],\n                [115, \"set_temp_switch\", tuya.valueConverter.onOff],\n                [115, \"radiators_without_integrated_regulation\", tuya.valueConverter.onOff],\n                [116, \"antifrost\", tuya.valueConverter.onOff],\n                [117, \"eco_temperature\", tuya.valueConverter.divideBy10],\n                [118, \"comfort_temperature\", tuya.valueConverter.divideBy10],\n                [119, \"antifrost_temperature\", tuya.valueConverter.divideBy10],\n                [120, \"light\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_r3szw0xr\"]),\n        model: \"TS0601_cover_11\",\n        vendor: \"Tuya\",\n        description: \"Cover motor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n        exposes: [\n            e.enum(\"control\", ea.STATE_SET, [\"stop\", \"open\", \"close\"]).withDescription(\"Control the motor\"),\n            e.numeric(\"time_total\", ea.STATE).withUnit(\"s\").withDescription(\"Total movement time\"),\n            e.enum(\"work_state\", ea.STATE, [\"opening\", \"closing\", \"stopped\"]).withDescription(\"Work state\"),\n            e.enum(\"dry_contact_switch_mode\", ea.STATE_SET, [\"mode1\", \"mode2\"]).withDescription(\"Dry contact switch mode\"),\n            e.enum(\"ac_switch_mode\", ea.STATE_SET, [\"mode1\", \"mode2\"]).withDescription(\"AC switch mode\"),\n            e.numeric(\"speed\", ea.STATE_SET).withValueMin(0).withValueMax(100).withDescription(\"Motor speed\"),\n            e.numeric(\"percent_state\", ea.STATE).withUnit(\"%\").withDescription(\"Current percent position\"),\n            e.enum(\"dot_mode\", ea.STATE_SET, [\"single\", \"multi\"]).withDescription(\"Dot mode\"),\n            e.numeric(\"percent_control\", ea.STATE_SET).withUnit(\"%\").withValueMin(0).withValueMax(100).withDescription(\"Set percent position\"),\n            e.enum(\"direction\", ea.STATE_SET, [\"normal\", \"reversed\"]).withDescription(\"Motor direction\"),\n            e.enum(\"border\", ea.STATE_SET, [\"UP\", \"Down\", \"Delete\"]).withDescription(\"Border mode\"),\n        ],\n\n        meta: {\n            tuyaDatapoints: [\n                [1, \"control\", tuya.valueConverterBasic.lookup({stop: tuya.enum(1), open: tuya.enum(0), close: tuya.enum(2)})],\n                [2, \"time_total\", tuya.valueConverter.raw],\n                [3, \"work_state\", tuya.valueConverterBasic.lookup({opening: tuya.enum(0), closing: tuya.enum(1), stopped: tuya.enum(2)})],\n                [101, \"dry_contact_switch_mode\", tuya.valueConverterBasic.lookup({mode1: tuya.enum(0), mode2: tuya.enum(1)})],\n                [102, \"ac_switch_mode\", tuya.valueConverterBasic.lookup({mode1: tuya.enum(0), mode2: tuya.enum(1)})],\n                [103, \"speed\", tuya.valueConverter.raw],\n                [8, \"percent_state\", tuya.valueConverter.raw],\n                [104, \"dot_mode\", tuya.valueConverterBasic.lookup({single: tuya.enum(0), multi: tuya.enum(1)})],\n                [9, \"percent_control\", tuya.valueConverter.raw],\n                [11, \"direction\", tuya.valueConverterBasic.lookup({normal: tuya.enum(0), reversed: tuya.enum(1)})],\n                [16, \"border\", tuya.valueConverterBasic.lookup({Up: tuya.enum(0), Down: tuya.enum(1), Delete: tuya.enum(2)})],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_k7p2q5d9\"]),\n        model: \"ZS-300Z\",\n        vendor: \"Arteco\",\n        description: \"Soil moisture sensor\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, timeStart: \"2000\"})],\n        exposes: [\n            e.enum(\"water_warning\", ea.STATE, [\"none\", \"alarm\"]).withDescription(\"Water shortage warning\"),\n            e.enum(\"battery_state\", ea.STATE, [\"low\", \"middle\", \"high\"]).withDescription(\"low: 16.67%, middle:16.68-83.33%, high: 83.34-100%\"),\n            e.soil_moisture(),\n            e.temperature(),\n            e.humidity(),\n            e.illuminance(),\n            tuya.exposes.soilSampling(),\n            tuya.exposes.soilCalibration(),\n            tuya.exposes.humidityCalibration(),\n            e\n                .numeric(\"illuminance_calibration\", ea.STATE_SET)\n                .withValueMin(-1000)\n                .withValueMax(1000)\n                .withValueStep(1)\n                .withUnit(\"lx\")\n                .withDescription(\"Illuminance calibration\"),\n            tuya.exposes.temperatureCalibration(),\n            tuya.exposes.soilWarning(),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [3, \"soil_moisture\", tuya.valueConverter.raw],\n                [5, \"temperature\", tuya.valueConverter.divideBy10],\n                [101, \"humidity\", tuya.valueConverter.raw],\n                [102, \"illuminance\", tuya.valueConverter.raw],\n                [14, \"battery_state\", tuya.valueConverterBasic.lookup({low: tuya.enum(0), middle: tuya.enum(1), high: tuya.enum(2)})],\n                [103, \"soil_sampling\", tuya.valueConverter.raw],\n                [104, \"soil_calibration\", tuya.valueConverter.raw],\n                [105, \"humidity_calibration\", tuya.valueConverter.raw],\n                [106, \"illuminance_calibration\", tuya.valueConverter.raw],\n                [107, \"temperature_calibration\", tuya.valueConverter.divideBy10],\n                [110, \"soil_warning\", tuya.valueConverter.raw],\n                [111, \"water_warning\", tuya.valueConverterBasic.lookup({none: tuya.enum(0), alarm: tuya.enum(1)})],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZK\"],\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE200_ka8l86iu\"]),\n        model: \"ZG-204ZK\",\n        vendor: \"HOBEIAN\",\n        description: \"24Ghz human presence sensor\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n            e.illuminance(),\n            e.battery(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Presence keep time\"),\n            e\n                .numeric(\"static_detection_distance\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(0.01)\n                .withUnit(\"m\")\n                .withDescription(\"Static detection distance\"),\n            e\n                .numeric(\"static_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Static detection sensitivity\"),\n            e\n                .numeric(\"motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(10)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"Motion detection sensitivity (Firmware version>=0122052017)\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [106, \"illuminance\", tuya.valueConverter.raw],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [4, \"static_detection_distance\", tuya.valueConverter.divideBy100],\n                [2, \"static_detection_sensitivity\", tuya.valueConverter.raw],\n                [107, \"indicator\", tuya.valueConverter.onOff],\n                [123, \"motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [121, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        zigbeeModel: [\"ZG-204ZE\"],\n        fingerprint: [{modelID: \"CK-BL702-MWS-01(7016)\", manufacturerName: \"ZG-204ZE\"}],\n        model: \"ZG-204ZE\",\n        vendor: \"HOBEIAN\",\n        description: \"10G mw motion detection\",\n        fromZigbee: [tuya.fz.datapoints],\n        toZigbee: [tuya.tz.datapoints],\n        exposes: [\n            e.presence(),\n\n            e.battery(),\n            e\n                .numeric(\"fading_time\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(28800)\n                .withValueStep(1)\n                .withUnit(\"s\")\n                .withDescription(\"Motion keep time\"),\n            e.binary(\"indicator\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"LED indicator mode\"),\n            e\n                .numeric(\"motion_detection_sensitivity\", ea.STATE_SET)\n                .withValueMin(0)\n                .withValueMax(19)\n                .withValueStep(1)\n                .withUnit(\"x\")\n                .withDescription(\"The larger the value, the more sensitive it is (refresh and update only while active)\"),\n        ],\n        meta: {\n            tuyaDatapoints: [\n                [1, \"presence\", tuya.valueConverter.trueFalse1],\n                [102, \"fading_time\", tuya.valueConverter.raw],\n                [2, \"motion_detection_sensitivity\", tuya.valueConverter.raw],\n                [108, \"indicator\", tuya.valueConverter.onOff],\n                [110, \"battery\", tuya.valueConverter.raw],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0049\", [\"_TZ3000_kz1anoi8\"]),\n        model: \"HZ-WT02\",\n        vendor: \"Haozee\",\n        description: \"Water valve\",\n        toZigbee: [tzLocal.ts0049_countdown],\n        fromZigbee: [fzLocal.ts0049_countdown],\n        extend: [\n            m.battery(),\n            m.onOff({powerOnBehavior: false}),\n            m.deviceAddCustomCluster(\"manuSpecificTuyaE001\", {\n                ID: 0xe001,\n                attributes: {},\n                commands: {\n                    setCountdown: {\n                        ID: 0xfe,\n                        parameters: [{name: \"data\", type: 1008}],\n                    },\n                },\n                commandsResponse: {},\n            }),\n        ],\n        exposes: [\n            e\n                .numeric(\"water_countdown\", ea.STATE_SET)\n                .withValueMin(1)\n                .withValueMax(1440)\n                .withValueStep(1)\n                .withUnit(\"minute\")\n                .withDescription(\"Watering countdown to turn device off after a certain time\"),\n        ],\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE284_7zazvlyn\", \"_TZE284_idn2htgu\"]),\n        model: \"F3-Pro\",\n        vendor: \"Tuya\",\n        description: \"Smart panel, 4-gang switch with scene, dimmer, and curtain control\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true, forceTimeUpdates: true, queryOnConfigure: true})],\n\n        endpoint: (device) => {\n            return {l1: 1, l2: 1, l3: 1, l4: 1, l5: 1, l6: 1, l7: 1, l8: 1};\n        },\n\n        exposes: [\n            e.binary(\"backlight_switch\", ea.STATE_SET, \"ON\", \"OFF\").withDescription(\"Panel screen on/off\"),\n\n            tuya.exposes.switch().withEndpoint(\"l1\"),\n            tuya.exposes.switch().withEndpoint(\"l2\"),\n            tuya.exposes.switch().withEndpoint(\"l3\"),\n            tuya.exposes.switch().withEndpoint(\"l4\"),\n\n            e.text(\"switch_name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for Switch 1\"),\n            e.text(\"switch_name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for Switch 2\"),\n            e.text(\"switch_name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for Switch 3\"),\n            e.text(\"switch_name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for Switch 4\"),\n\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for Scene 1\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for Scene 2\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for Scene 3\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for Scene 4\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l5\").withDescription(\"Name for Scene 5\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l6\").withDescription(\"Name for Scene 6\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l7\").withDescription(\"Name for Scene 7\"),\n            e.text(\"scene_name\", ea.STATE_SET).withEndpoint(\"l8\").withDescription(\"Name for Scene 8\"),\n\n            e.text(\"cover_name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for Cover 1\"),\n            e.text(\"cover_name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for Cover 2\"),\n            e.text(\"cover_name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for Cover 3\"),\n            e.text(\"cover_name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for Cover 4\"),\n\n            e.text(\"led_switch_name\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Name for LED Switch 1\"),\n            e.text(\"led_switch_name\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Name for LED Switch 2\"),\n            e.text(\"led_switch_name\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Name for LED Switch 3\"),\n            e.text(\"led_switch_name\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Name for LED Switch 4\"),\n\n            e.action([\"scene_1\", \"scene_2\", \"scene_3\", \"scene_4\", \"scene_5\", \"scene_6\", \"scene_7\", \"scene_8\"]),\n\n            e.binary(\"led_switch\", ea.ALL, \"ON\", \"OFF\").withEndpoint(\"l1\").withDescription(\"Switch of LED 1\"),\n            e.numeric(\"led_warm\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Color temperature of LED 1\").withValueMin(1).withValueMax(100),\n            e.numeric(\"led_bright\", ea.STATE_SET).withEndpoint(\"l1\").withDescription(\"Brightness of LED 1\").withValueMin(1).withValueMax(100),\n\n            e.binary(\"led_switch\", ea.ALL, \"ON\", \"OFF\").withEndpoint(\"l2\").withDescription(\"Switch of LED 2\"),\n            e.numeric(\"led_warm\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Color temperature of LED 2\").withValueMin(1).withValueMax(100),\n            e.numeric(\"led_bright\", ea.STATE_SET).withEndpoint(\"l2\").withDescription(\"Brightness of LED 2\").withValueMin(1).withValueMax(100),\n\n            e.binary(\"led_switch\", ea.ALL, \"ON\", \"OFF\").withEndpoint(\"l3\").withDescription(\"Switch of LED 3\"),\n            e.numeric(\"led_warm\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Color temperature of LED 3\").withValueMin(1).withValueMax(100),\n            e.numeric(\"led_bright\", ea.STATE_SET).withEndpoint(\"l3\").withDescription(\"Brightness of LED 3\").withValueMin(1).withValueMax(100),\n\n            e.binary(\"led_switch\", ea.ALL, \"ON\", \"OFF\").withEndpoint(\"l4\").withDescription(\"Switch of LED 4\"),\n            e.numeric(\"led_warm\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Color temperature of LED 4\").withValueMin(1).withValueMax(100),\n            e.numeric(\"led_bright\", ea.STATE_SET).withEndpoint(\"l4\").withDescription(\"Brightness of LED 4\").withValueMin(1).withValueMax(100),\n\n            e.enum(\"cover_state\", ea.STATE_SET, [\"open\", \"stop\", \"close\"]).withEndpoint(\"l1\").withDescription(\"State of Cover 1\"),\n            e\n                .numeric(\"cover_position\", ea.STATE_SET)\n                .withEndpoint(\"l1\")\n                .withDescription(\"Position of Cover 1\")\n                .withUnit(\"%\")\n                .withValueMin(0)\n                .withValueMax(100),\n\n            e.enum(\"cover_state\", ea.STATE_SET, [\"open\", \"stop\", \"close\"]).withEndpoint(\"l2\").withDescription(\"State of Cover 2\"),\n            e\n                .numeric(\"cover_position\", ea.STATE_SET)\n                .withEndpoint(\"l2\")\n                .withDescription(\"Position of Cover 2\")\n                .withUnit(\"%\")\n                .withValueMin(0)\n                .withValueMax(100),\n\n            e.enum(\"cover_state\", ea.STATE_SET, [\"open\", \"stop\", \"close\"]).withEndpoint(\"l3\").withDescription(\"State of Cover 3\"),\n            e\n                .numeric(\"cover_position\", ea.STATE_SET)\n                .withEndpoint(\"l3\")\n                .withDescription(\"Position of Cover 3\")\n                .withUnit(\"%\")\n                .withValueMin(0)\n                .withValueMax(100),\n\n            e.enum(\"cover_state\", ea.STATE_SET, [\"open\", \"stop\", \"close\"]).withEndpoint(\"l4\").withDescription(\"State of Cover 4\"),\n            e\n                .numeric(\"cover_position\", ea.STATE_SET)\n                .withEndpoint(\"l4\")\n                .withDescription(\"Position of Cover 4\")\n                .withUnit(\"%\")\n                .withValueMin(0)\n                .withValueMax(100),\n        ],\n\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"action\", tuya.valueConverter.static(\"scene_1\")],\n                [2, \"action\", tuya.valueConverter.static(\"scene_2\")],\n                [3, \"action\", tuya.valueConverter.static(\"scene_3\")],\n                [4, \"action\", tuya.valueConverter.static(\"scene_4\")],\n                [5, \"action\", tuya.valueConverter.static(\"scene_5\")],\n                [6, \"action\", tuya.valueConverter.static(\"scene_6\")],\n                [7, \"action\", tuya.valueConverter.static(\"scene_7\")],\n                [8, \"action\", tuya.valueConverter.static(\"scene_8\")],\n\n                [102, \"led_bright_l1\", tuya.valueConverter.raw],\n                [103, \"led_bright_l2\", tuya.valueConverter.raw],\n                [105, \"led_bright_l3\", tuya.valueConverter.raw],\n                [107, \"led_bright_l4\", tuya.valueConverter.raw],\n\n                [109, \"led_warm_l1\", tuya.valueConverter.raw],\n                [110, \"led_warm_l2\", tuya.valueConverter.raw],\n                [111, \"led_warm_l3\", tuya.valueConverter.raw],\n                [112, \"led_warm_l4\", tuya.valueConverter.raw],\n\n                [113, \"cover_position_l1\", tuya.valueConverter.raw],\n                [114, \"cover_position_l2\", tuya.valueConverter.raw],\n                [115, \"cover_position_l3\", tuya.valueConverter.raw],\n                [116, \"cover_position_l4\", tuya.valueConverter.raw],\n\n                [117, \"led_switch_l1\", tuya.valueConverter.onOff],\n                [118, \"led_switch_l2\", tuya.valueConverter.onOff],\n                [119, \"led_switch_l3\", tuya.valueConverter.onOff],\n                [120, \"led_switch_l4\", tuya.valueConverter.onOff],\n\n                [121, \"state_l1\", tuya.valueConverter.onOff],\n                [122, \"state_l2\", tuya.valueConverter.onOff],\n                [123, \"state_l3\", tuya.valueConverter.onOff],\n                [124, \"state_l4\", tuya.valueConverter.onOff],\n\n                [125, \"led_switch_name_l1\", tuya.valueConverter.utf16BEHexString],\n                [126, \"led_switch_name_l2\", tuya.valueConverter.utf16BEHexString],\n                [127, \"led_switch_name_l3\", tuya.valueConverter.utf16BEHexString],\n                [128, \"led_switch_name_l4\", tuya.valueConverter.utf16BEHexString],\n\n                [129, \"cover_name_l1\", tuya.valueConverter.utf16BEHexString],\n                [130, \"cover_name_l2\", tuya.valueConverter.utf16BEHexString],\n                [131, \"cover_name_l3\", tuya.valueConverter.utf16BEHexString],\n                [132, \"cover_name_l4\", tuya.valueConverter.utf16BEHexString],\n\n                [133, \"cover_state_l1\", tuya.valueConverterBasic.lookup({open: tuya.enum(0), stop: tuya.enum(1), close: tuya.enum(2)})],\n                [134, \"cover_state_l2\", tuya.valueConverterBasic.lookup({open: tuya.enum(0), stop: tuya.enum(1), close: tuya.enum(2)})],\n                [135, \"cover_state_l3\", tuya.valueConverterBasic.lookup({open: tuya.enum(0), stop: tuya.enum(1), close: tuya.enum(2)})],\n                [136, \"cover_state_l4\", tuya.valueConverterBasic.lookup({open: tuya.enum(0), stop: tuya.enum(1), close: tuya.enum(2)})],\n\n                [137, \"switch_name_l1\", tuya.valueConverter.utf16BEHexString],\n                [138, \"switch_name_l2\", tuya.valueConverter.utf16BEHexString],\n                [139, \"switch_name_l3\", tuya.valueConverter.utf16BEHexString],\n                [140, \"switch_name_l4\", tuya.valueConverter.utf16BEHexString],\n\n                [141, \"scene_name_l1\", tuya.valueConverter.utf16BEHexString],\n                [142, \"scene_name_l2\", tuya.valueConverter.utf16BEHexString],\n                [143, \"scene_name_l3\", tuya.valueConverter.utf16BEHexString],\n                [144, \"scene_name_l4\", tuya.valueConverter.utf16BEHexString],\n                [145, \"scene_name_l5\", tuya.valueConverter.utf16BEHexString],\n                [146, \"scene_name_l6\", tuya.valueConverter.utf16BEHexString],\n                [147, \"scene_name_l7\", tuya.valueConverter.utf16BEHexString],\n                [148, \"scene_name_l8\", tuya.valueConverter.utf16BEHexString],\n\n                [149, \"backlight_switch\", tuya.valueConverter.onOff],\n            ],\n        },\n    },\n    {\n        fingerprint: tuya.fingerprint(\"TS0601\", [\"_TZE204_mvtclclq\"]),\n        model: \"DS-1450WN\",\n        vendor: \"Tuya\",\n        description: \"Smart Zigbee Switch with Power Monitoring\",\n        extend: [tuya.modernExtend.tuyaBase({dp: true})],\n\n        exposes: [\n            e.switch().withEndpoint(\"usb_a\"),\n            e.switch().withEndpoint(\"usb_c\"),\n            e.switch().withEndpoint(\"plug_1\"),\n            e.switch().withEndpoint(\"plug_2\"),\n            e\n                .numeric(\"countdown_usb_a\", ea.STATE_SET)\n                .withLabel(\"USB A Countdown\")\n                .withValueMin(0)\n                .withValueMax(86400)\n                .withValueStep(1)\n                .withDescription(\"Countdown timer for USB A\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"countdown_usb_c\", ea.STATE_SET)\n                .withLabel(\"USB C Countdown\")\n                .withValueMin(0)\n                .withValueMax(86400)\n                .withValueStep(1)\n                .withDescription(\"Countdown timer for USB C\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"countdown_plug_1\", ea.STATE_SET)\n                .withLabel(\"Plug 1 Countdown\")\n                .withValueMin(0)\n                .withValueMax(86400)\n                .withValueStep(1)\n                .withDescription(\"Countdown timer for Plug 1\")\n                .withUnit(\"s\"),\n            e\n                .numeric(\"countdown_plug_2\", ea.STATE_SET)\n                .withLabel(\"Plug 2 Countdown\")\n                .withValueMin(0)\n                .withValueMax(86400)\n                .withValueStep(1)\n                .withDescription(\"Countdown timer for Plug 2\")\n                .withUnit(\"s\"),\n            e.enum(\"relay_status\", ea.STATE_SET, [\"memory\", \"on\", \"off\"]).withLabel(\"Relay Status\").withDescription(\"Set the Relay Status\"),\n            e\n                .binary(\"switch_backlight\", ea.STATE_SET, \"ON\", \"OFF\")\n                .withLabel(\"Switch Backlight\")\n                .withDescription(\"Enables/disables backlight indicator\"),\n            e.current(),\n            e.power(),\n            e.voltage(),\n            e.produced_energy(),\n            e.child_lock(),\n        ],\n        endpoint: (_) => ({\n            default: 1,\n            usb_a: 1,\n            usb_c: 1,\n            plug_1: 1,\n            plug_2: 1,\n        }),\n        meta: {\n            multiEndpoint: true,\n            tuyaDatapoints: [\n                [1, \"state_usb_a\", tuya.valueConverter.onOff],\n                [2, \"state_usb_c\", tuya.valueConverter.onOff],\n                [3, \"state_plug_1\", tuya.valueConverter.onOff],\n                [4, \"state_plug_2\", tuya.valueConverter.onOff],\n                [7, \"countdown_usb_a\", tuya.valueConverter.countdown],\n                [8, \"countdown_usb_c\", tuya.valueConverter.countdown],\n                [9, \"countdown_plug_1\", tuya.valueConverter.countdown],\n                [10, \"countdown_plug_2\", tuya.valueConverter.countdown],\n                [14, \"relay_status\", tuya.valueConverterBasic.lookup({memory: tuya.enum(0), on: tuya.enum(1), off: tuya.enum(2)})],\n                [16, \"switch_backlight\", tuya.valueConverter.onOff],\n                [21, \"current\", tuya.valueConverter.divideBy10],\n                [22, \"power\", tuya.valueConverter.divideBy10],\n                [23, \"voltage\", tuya.valueConverter.divideBy10],\n                [105, \"produced_energy\", tuya.valueConverter.divideBy10],\n                [106, \"child_lock\", tuya.valueConverter.lockUnlock],\n            ],\n        },\n    },\n];\n"