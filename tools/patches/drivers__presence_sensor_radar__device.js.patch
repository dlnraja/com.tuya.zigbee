--- drivers\presence_sensor_radar\device.js
+++ drivers\presence_sensor_radar\device.js (patched)

--- original ---
'use strict';

const BaseHybridDevice = require('../../lib/BaseHybridDevice');

/**
 * PresenceSensorRadarDevice - Unified Hybrid Driver
 * Auto-detects power source: AC/DC/Battery (CR2032/CR2450/AAA/AA)
 * Dynamically manages capabilities based on power source
 */
class PresenceSensorRadarDevice extends BaseHybridDevice {

  async onNodeInit() {
    // Critical: Attribute reporting for data transmission
    await super.onNodeInit().catch(err => this.error(err));
    
    // THEN setup (zclNode now exists)
    await this.setupAttributeReporting();

    this.log('PresenceSensorRadarDevice initializing...');
    
    // Initialize base (auto power detection + dynamic capabilities)
    

    // Setup IAS Zone (SDK3 - based on Peter's success patterns)
    await this.setupIASZone();

    // Setup sensor capabilities (SDK3)
    await this.setupLuminanceSensor();
    
    this.log('PresenceSensorRadarDevice initialized - Power source:', this.powerSource || 'unknown');
  }

  
  /**
   * Setup measure_luminance capability (SDK3)
   * Cluster 1024 - measuredValue
   */
  async setupLuminanceSensor() {
    if (!this.hasCapability('measure_luminance')) {
      return;
    }
    
    this.log('🌡️  Setting up measure_luminance (cluster 1024)...');
    
    const endpoint = this.zclNode.endpoints[1];
    if (!endpoint?.clusters[1024]) {
      this.log('⚠️  Cluster 1024 not available');
      return;
    }
    
    try {
      this.registerCapability('measure_luminance', 1024, {
        get: 'measuredValue',
        report: 'measuredValue',
        reportParser: value => Math.pow(10, (value - 1) / 10000),
        reportOpts: {
          configureAttributeReporting: {
            minInterval: 60,
            maxInterval: 3600,
            minChange: 100
          }
        },
        getOpts: {
          getOnStart: true
        }
      });
      
      this.log('✅ measure_luminance configured (cluster 1024)');
    } catch (err) {
      this.error('measure_luminance setup failed:', err);
    }
  }

  
  /**
   * Setup IAS Zone for Motion detection (SDK3 Compliant)
   * 
   * Based on Peter's successful diagnostic patterns:
   * - Temperature/Humidity/Lux work via standard clusters ✅
   * - IAS Zone requires special SDK3 enrollment method
   * 
   * Cluster 1280 (IASZone) - Motion/Alarm detection
   */
  /**
   * Setup IAS Zone (SDK3 - Based on IASZoneEnroller_SIMPLE_v4.0.6.js)
   * Version la plus récente du projet (2025-10-21)
   */
  async setupIASZone() {
    this.log('🔐 Setting up IAS Zone (SDK3 latest method)...');
    
    const endpoint = this.zclNode.endpoints[1];
    
    if (!endpoint?.clusters?.iasZone) {
      this.log('ℹ️  IAS Zone cluster not available');
      return;
    }
    
    try {
      // Step 1: Setup Zone Enroll Request listener (SYNCHRONOUS - property assignment)
      // SDK3: Use property assignment, NOT .on() event listener
      endpoint.clusters.iasZone.onZoneEnrollRequest = async () => {
        this.log('📨 Zone Enroll Request received');
        
        try {
          // Send response IMMEDIATELY
          await endpoint.clusters.iasZone.zoneEnrollResponse({
            enrollResponseCode: 0, // 0 = Success
            zoneId: 10
          });
          
          this.log('✅ Zone Enroll Response sent (zoneId: 10)');
        } catch (err) {
          this.error('Failed to send Zone Enroll Response:', err.message);
        }
      };
      
      this.log('✅ Zone Enroll Request listener configured');
      
      // Step 2: Send proactive Zone Enroll Response (SDK3 official method)
      // Per Homey docs: "driver could send Zone Enroll Response when initializing
      // regardless of having received Zone Enroll Request"
      this.log('📤 Sending proactive Zone Enroll Response...');
      
      try {
        await endpoint.clusters.iasZone.zoneEnrollResponse({
          enrollResponseCode: 0,
          zoneId: 10
        });
        
        this.log('✅ Proactive Zone Enroll Response sent');
      } catch (err) {
        this.log('⚠️  Proactive response failed (normal if device not ready):', err.message);
      }
      
      // Step 3: Setup Zone Status Change listener (property assignment)
      // SDK3: Use .onZoneStatusChangeNotification property, NOT .on() event
      endpoint.clusters.iasZone.onZoneStatusChangeNotification = (payload) => {
        this.log('📨 Zone notification received:', payload);
        
        if (payload && payload.zoneStatus !== undefined) {
          // Convert Bitmap to value if needed
          let status = payload.zoneStatus;
          if (status && typeof status.valueOf === 'function') {
            status = status.valueOf();
          }
          
          // Check alarm1 bit (motion/alarm detected)
          const alarm = (status & 0x01) !== 0;
          
          this.setCapabilityValue('alarm_motion', alarm).catch(this.error);
          this.log(`${alarm ? '🚨' : '✅'} Alarm: ${alarm ? 'TRIGGERED' : 'cleared'}`);
        }
      };
      
      this.log('✅ Zone Status listener configured');
      
      // Step 4: Setup Zone Status attribute listener (property assignment)
      // Alternative listener for attribute reports
      endpoint.clusters.iasZone.onZoneStatus = (zoneStatus) => {
        this.log('📊 Zone attribute report:', zoneStatus);
        
        let status = zoneStatus;
        if (status && typeof status.valueOf === 'function') {
          status = status.valueOf();
        }
        
        const alarm = (status & 0x01) !== 0;
        this.setCapabilityValue('alarm_motion', alarm).catch(this.error);
      };
      
      this.log('✅ IAS Zone configured successfully (SDK3 latest method)');
      
    } catch (err) {
      this.error('IAS Zone setup failed:', err);
    }
  }

  async onDeleted() {
    this.log('PresenceSensorRadarDevice deleted');
    await super.onDeleted().catch(err => this.error(err));
  }
  /**
   * Setup Attribute Reporting for Presence Sensor
   * Temperature, Humidity, Battery, Illuminance, Motion
   */
  async setupAttributeReporting() {
    try {
      this.log('📊 Setting up attribute reporting...');
      
      const endpoint = this.zclNode.endpoints[1];
      
      // Setup cluster listeners FIRST (before configureAttributeReporting)
      
      // Temperature listener (cluster 1026)
      if (endpoint?.clusters?.msTemperatureMeasurement) {
        endpoint.clusters.msTemperatureMeasurement.on('attr.measuredValue', async (value) => {
          const temperature = value / 100;
          this.log('🌡️ Temperature:', temperature);
          await this.setCapabilityValue('measure_temperature', temperature).catch(this.error);
        });
      }
      
      // Humidity listener (cluster 1029)
      if (endpoint?.clusters?.msRelativeHumidity) {
        endpoint.clusters.msRelativeHumidity.on('attr.measuredValue', async (value) => {
          const humidity = value / 100;
          this.log('💧 Humidity:', humidity);
          await this.setCapabilityValue('measure_humidity', humidity).catch(this.error);
        });
      }
      
      // Battery listener (cluster 1)
      if (endpoint?.clusters?.genPowerCfg) {
        endpoint.clusters.genPowerCfg.on('attr.batteryPercentageRemaining', async (value) => {
          const battery = value / 2;
          this.log('🔋 Battery:', battery, '%');
          await this.setCapabilityValue('measure_battery', battery).catch(this.error);
        });
      }
      
      // Illuminance listener (cluster 1024)
      if (endpoint?.clusters?.msIlluminanceMeasurement) {
        endpoint.clusters.msIlluminanceMeasurement.on('attr.measuredValue', async (value) => {
          const lux = Math.pow(10, (value - 1) / 10000);
          this.log('💡 Illuminance:', lux, 'lux');
          await this.setCapabilityValue('measure_luminance', lux).catch(this.error);
        });
      }
      
      // Motion detection via IAS Zone (cluster 1280)
      if (endpoint?.clusters?.iasZone) {
        // Enroll IAS Zone first - use ZigbeeHelpers for robust IEEE address retrieval
        try {
          const ieeeAddress = await this.getIeeeAddress();
          if (ieeeAddress) {
            await endpoint.clusters.iasZone.writeAttributes({
              iasCieAddr: ieeeAddress
            }).catch(err => this.log('IAS enrollment (non-critical):', err.message));
            this.log('✅ IAS Zone enrolled with IEEE:', ieeeAddress);
          } else {
            this.log('⚠️  IAS enrollment skipped: IEEE address not available');
          }
        } catch (err) {
          this.log('IAS enrollment error:', err.message);
        }
        
        // Zone notifications (motion detection)
        endpoint.clusters.iasZone.onZoneStatusChangeNotification = (data) => {
          this.log('🚶 Motion detected:', data);
          const motion = !!(data.zoneStatus & 1);
          this.setCapabilityValue('alarm_motion', motion).catch(this.error);
        };
        
        // Attribute listener (backup)
        endpoint.clusters.iasZone.onZoneStatus = (value) => {
          this.log('🚶 Motion status:', value);
          const motion = !!(value & 1);
          this.setCapabilityValue('alarm_motion', motion).catch(this.error);
        };
      }
      
      // Configure reporting intervals (numbers only)
      await this.configureAttributeReporting([
        { endpointId: 1, cluster: 1026, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 50 },
        { endpointId: 1, cluster: 1029, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 50 },
        { endpointId: 1, cluster: 1, attributeName: 'batteryPercentageRemaining', minInterval: 3600, maxInterval: 43200, minChange: 2 },
        { endpointId: 1, cluster: 1024, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 100 }
      ]).catch(err => this.log('Configure reporting (non-critical):', err.message));
      
      this.log('✅ Attribute reporting configured');
      
    } catch (err) {
      this.error('Attribute reporting setup failed:', err);
    }
  }

}

module.exports = PresenceSensorRadarDevice;

--- patched ---
'use strict';

const BaseHybridDevice = require('../../lib/BaseHybridDevice');

/**
 * PresenceSensorRadarDevice - Unified Hybrid Driver
 * Auto-detects power source: AC/DC/Battery (CR2032/CR2450/AAA/AA)
 * Dynamically manages capabilities based on power source
 */
class PresenceSensorRadarDevice extends BaseHybridDevice {

  async onNodeInit() {
    // Critical: Attribute reporting for data transmission
    await super.onNodeInit().catch(err => this.error(err));
    
    // THEN setup (zclNode now exists)
    await this.setupAttributeReporting();

    this.log('PresenceSensorRadarDevice initializing...');
    
    // Initialize base (auto power detection + dynamic capabilities)
    

    // Setup IAS Zone (SDK3 - based on Peter's success patterns)
    await this.setupIASZone();

    // Setup sensor capabilities (SDK3)
    await this.setupLuminanceSensor();
    
    this.log('PresenceSensorRadarDevice initialized - Power source:', this.powerSource || 'unknown');
  }

  
  /**
   * Setup measure_luminance capability (SDK3)
   * Cluster 1024 - measuredValue
   */
  async setupLuminanceSensor() {
    if (!this.hasCapability('measure_luminance')) {
      return;
    }
    
    this.log('🌡️  Setting up measure_luminance (cluster 1024)...');
    
    const endpoint = this.zclNode.endpoints[1];
    if (!endpoint?.clusters[1024]) {
      this.log('⚠️  Cluster 1024 not available');
      return;
    }
    
    try {
      /* REFACTOR: registerCapability deprecated with cluster spec.
   Original: this.registerCapability('measure_luminance', 1024,
   Replace with SDK3 pattern - see ZigbeeDevice docs
   Capability: 'measure_luminance', Cluster: 1024
*/
// this.registerCapability('measure_luminance', 1024, {
        get: 'measuredValue',
        report: 'measuredValue',
        reportParser: value => Math.pow(10, (value - 1) / 10000),
        reportOpts: {
          configureAttributeReporting: {
            minInterval: 60,
            maxInterval: 3600,
            minChange: 100
          }
        },
        getOpts: {
          getOnStart: true
        }
      });
      
      this.log('✅ measure_luminance configured (cluster 1024)');
    } catch (err) {
      this.error('measure_luminance setup failed:', err);
    }
  }

  
  /**
   * Setup IAS Zone for Motion detection (SDK3 Compliant)
   * 
   * Based on Peter's successful diagnostic patterns:
   * - Temperature/Humidity/Lux work via standard clusters ✅
   * - IAS Zone requires special SDK3 enrollment method
   * 
   * Cluster 1280 (IASZone) - Motion/Alarm detection
   */
  /**
   * Setup IAS Zone (SDK3 - Based on IASZoneEnroller_SIMPLE_v4.0.6.js)
   * Version la plus récente du projet (2025-10-21)
   */
  async setupIASZone() {
    this.log('🔐 Setting up IAS Zone (SDK3 latest method)...');
    
    const endpoint = this.zclNode.endpoints[1];
    
    if (!endpoint?.clusters?.iasZone) {
      this.log('ℹ️  IAS Zone cluster not available');
      return;
    }
    
    try {
      // Step 1: Setup Zone Enroll Request listener (SYNCHRONOUS - property assignment)
      // SDK3: Use property assignment, NOT .on() event listener
      endpoint.clusters.iasZone.onZoneEnrollRequest = async () => {
        this.log('📨 Zone Enroll Request received');
        
        try {
          // Send response IMMEDIATELY
          await endpoint.clusters.iasZone.zoneEnrollResponse({
            enrollResponseCode: 0, // 0 = Success
            zoneId: 10
          });
          
          this.log('✅ Zone Enroll Response sent (zoneId: 10)');
        } catch (err) {
          this.error('Failed to send Zone Enroll Response:', err.message);
        }
      };
      
      this.log('✅ Zone Enroll Request listener configured');
      
      // Step 2: Send proactive Zone Enroll Response (SDK3 official method)
      // Per Homey docs: "driver could send Zone Enroll Response when initializing
      // regardless of having received Zone Enroll Request"
      this.log('📤 Sending proactive Zone Enroll Response...');
      
      try {
        await endpoint.clusters.iasZone.zoneEnrollResponse({
          enrollResponseCode: 0,
          zoneId: 10
        });
        
        this.log('✅ Proactive Zone Enroll Response sent');
      } catch (err) {
        this.log('⚠️  Proactive response failed (normal if device not ready):', err.message);
      }
      
      // Step 3: Setup Zone Status Change listener (property assignment)
      // SDK3: Use .onZoneStatusChangeNotification property, NOT .on() event
      endpoint.clusters.iasZone.onZoneStatusChangeNotification = (payload) => {
        this.log('📨 Zone notification received:', payload);
        
        if (payload && payload.zoneStatus !== undefined) {
          // Convert Bitmap to value if needed
          let status = payload.zoneStatus;
          if (status && typeof status.valueOf === 'function') {
            status = status.valueOf();
          }
          
          // Check alarm1 bit (motion/alarm detected)
          const alarm = (status & 0x01) !== 0;
          
          await this.setCapabilityValue('alarm_motion', alarm).catch(this.error);
          this.log(`${alarm ? '🚨' : '✅'} Alarm: ${alarm ? 'TRIGGERED' : 'cleared'}`);
        }
      };
      
      this.log('✅ Zone Status listener configured');
      
      // Step 4: Setup Zone Status attribute listener (property assignment)
      // Alternative listener for attribute reports
      endpoint.clusters.iasZone.onZoneStatus = (zoneStatus) => {
        this.log('📊 Zone attribute report:', zoneStatus);
        
        let status = zoneStatus;
        if (status && typeof status.valueOf === 'function') {
          status = status.valueOf();
        }
        
        const alarm = (status & 0x01) !== 0;
        await this.setCapabilityValue('alarm_motion', alarm).catch(this.error);
      };
      
      this.log('✅ IAS Zone configured successfully (SDK3 latest method)');
      
    } catch (err) {
      this.error('IAS Zone setup failed:', err);
    }
  }

  async onDeleted() {
    this.log('PresenceSensorRadarDevice deleted');
    await super.onDeleted().catch(err => this.error(err));
  }
  /**
   * Setup Attribute Reporting for Presence Sensor
   * Temperature, Humidity, Battery, Illuminance, Motion
   */
  async setupAttributeReporting() {
    try {
      this.log('📊 Setting up attribute reporting...');
      
      const endpoint = this.zclNode.endpoints[1];
      
      // Setup cluster listeners FIRST (before configureAttributeReporting)
      
      // Temperature listener (cluster 1026)
      if (endpoint?.clusters?.msTemperatureMeasurement) {
        endpoint.clusters.msTemperatureMeasurement.on('attr.measuredValue', async (value) => {
          const temperature = value / 100;
          this.log('🌡️ Temperature:', temperature);
          await this.setCapabilityValue('measure_temperature', temperature).catch(this.error);
        });
      }
      
      // Humidity listener (cluster 1029)
      if (endpoint?.clusters?.msRelativeHumidity) {
        endpoint.clusters.msRelativeHumidity.on('attr.measuredValue', async (value) => {
          const humidity = value / 100;
          this.log('💧 Humidity:', humidity);
          await this.setCapabilityValue('measure_humidity', humidity).catch(this.error);
        });
      }
      
      // Battery listener (cluster 1)
      if (endpoint?.clusters?.genPowerCfg) {
        endpoint.clusters.genPowerCfg.on('attr.batteryPercentageRemaining', async (value) => {
          const battery = value / 2;
          this.log('🔋 Battery:', battery, '%');
          await this.setCapabilityValue('measure_battery', battery).catch(this.error);
        });
      }
      
      // Illuminance listener (cluster 1024)
      if (endpoint?.clusters?.msIlluminanceMeasurement) {
        endpoint.clusters.msIlluminanceMeasurement.on('attr.measuredValue', async (value) => {
          const lux = Math.pow(10, (value - 1) / 10000);
          this.log('💡 Illuminance:', lux, 'lux');
          await this.setCapabilityValue('measure_luminance', lux).catch(this.error);
        });
      }
      
      // Motion detection via IAS Zone (cluster 1280)
      if (endpoint?.clusters?.iasZone) {
        // Enroll IAS Zone first - use ZigbeeHelpers for robust IEEE address retrieval
        try {
          const ieeeAddress = await this.getIeeeAddress();
          if (ieeeAddress) {
            await endpoint.clusters.iasZone.writeAttributes({
              iasCieAddr: ieeeAddress
            }).catch(err => this.log('IAS enrollment (non-critical):', err.message));
            this.log('✅ IAS Zone enrolled with IEEE:', ieeeAddress);
          } else {
            this.log('⚠️  IAS enrollment skipped: IEEE address not available');
          }
        } catch (err) {
          this.log('IAS enrollment error:', err.message);
        }
        
        // Zone notifications (motion detection)
        endpoint.clusters.iasZone.onZoneStatusChangeNotification = (data) => {
          this.log('🚶 Motion detected:', data);
          const motion = !!(data.zoneStatus & 1);
          await this.setCapabilityValue('alarm_motion', motion).catch(this.error);
        };
        
        // Attribute listener (backup)
        endpoint.clusters.iasZone.onZoneStatus = (value) => {
          this.log('🚶 Motion status:', value);
          const motion = !!(value & 1);
          await this.setCapabilityValue('alarm_motion', motion).catch(this.error);
        };
      }
      
      // Configure reporting intervals (numbers only)
      await this.configureAttributeReporting([
        { endpointId: 1, cluster: 1026, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 50 },
        { endpointId: 1, cluster: 1029, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 50 },
        { endpointId: 1, cluster: 1, attributeName: 'batteryPercentageRemaining', minInterval: 3600, maxInterval: 43200, minChange: 2 },
        { endpointId: 1, cluster: 1024, attributeName: 'measuredValue', minInterval: 60, maxInterval: 3600, minChange: 100 }
      ]).catch(err => this.log('Configure reporting (non-critical):', err.message));
      
      this.log('✅ Attribute reporting configured');
      
    } catch (err) {
      this.error('Attribute reporting setup failed:', err);
    }
  }

}

module.exports = PresenceSensorRadarDevice;
