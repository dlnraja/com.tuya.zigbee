const fs = require("fs"); const path = require("path"); console.log("üîß TUYA OVERLAYS - Cr√©ation des overlays Tuya..."); function createTuyaOverlays() { const driversPath = path.join(process.cwd(), "drivers"); const overlaysPath = path.join(process.cwd(), "overlays"); if (!fs.existsSync(driversPath)) { console.error("‚ùå Dossier drivers non trouv√©"); return { created: 0, skipped: 0 }; } safeMkdir(overlaysPath); const driverDirs = fs.readdirSync(driversPath, { withFileTypes: true }).filter(d => d.isDirectory()).map(d => d.name); console.log(`üìÅ Trouv√© ${driverDirs.length} drivers pour cr√©er des overlays`); let created = 0; let skipped = 0; for (const driverDir of driverDirs) { const driverPath = path.join(driversPath, driverDir); const overlayPath = path.join(overlaysPath, driverDir); if (fs.existsSync(overlayPath)) { console.log(`  ‚è≠Ô∏è  ${driverDir} - overlay existe d√©j√†`); skipped++; continue; } try { const composePath = path.join(driverPath, "driver.compose.json"); if (fs.existsSync(composePath)) { const compose = JSON.parse(fs.readFileSync(composePath, "utf8")); const overlay = { id: compose.id, name: compose.name, class: compose.class, capabilities: compose.capabilities, images: compose.images, zigbee: compose.zigbee, tuya: { local: true, api: false, version: "1.0.0" } }; safeMkdir(overlayPath); const overlayPathFile = path.join(overlayPath, "overlay.json"); if (safeWriteFile(overlayPathFile, JSON.stringify(overlay, null, 2))) { console.log(`  ‚úÖ ${driverDir} - overlay cr√©√©`); created++; } } } catch (error) { console.error(`  ‚ùå ${driverDir} - erreur:`, error.message); } } return { created, skipped }; } function safeMkdir(dirPath) { if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true }); } function safeWriteFile(filePath, content) { try { fs.writeFileSync(filePath, content, "utf8"); return true; } catch (error) { console.error("‚ùå Erreur √©criture " + filePath + ":", error.message); return false; } } try { const { created, skipped } = createTuyaOverlays(); console.log(`\nüéâ CR√âATION DES OVERLAYS TERMIN√âE !`); console.log(`‚úÖ Overlays cr√©√©s: ${created}`); console.log(`‚è≠Ô∏è  Overlays ignor√©s: ${skipped}`); console.log(`üìä Total: ${created + skipped}`); console.log("::END::TUYA_OVERLAYS::OK"); process.exit(0); } catch (error) { console.error("üí• Erreur fatale:", error); console.log("::END::TUYA_OVERLAYS::FAIL"); process.exit(1); }
