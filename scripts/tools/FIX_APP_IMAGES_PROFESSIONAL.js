#!/usr/bin/env node
'use strict';

/**
 * FIX APP IMAGES PROFESSIONAL
 * G√©n√®re des images professionnelles pour l'app avec design moderne
 */

const fs = require('fs');
const path = require('path');
const { createCanvas, loadImage } = require('canvas');

const ROOT = path.join(__dirname, '..', '..');

class FixAppImagesProfessional {
  constructor() {
    this.fixed = [];
  }

  log(msg, icon = 'üé®') {
    console.log(`${icon} ${msg}`);
  }

  // Cr√©er image large.png professionnelle
  async createLargePNG() {
    this.log('Cr√©ation large.png (500x350)...');

    const canvas = createCanvas(500, 350);
    const ctx = canvas.getContext('2d');

    // Fond d√©grad√© moderne
    const gradient = ctx.createLinearGradient(0, 0, 500, 350);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 500, 350);

    // Design avec formes g√©om√©triques
    ctx.globalAlpha = 0.1;
    ctx.fillStyle = '#ffffff';
    
    // Cercles d√©coratifs
    ctx.beginPath();
    ctx.arc(450, 50, 80, 0, Math.PI * 2);
    ctx.fill();
    
    ctx.beginPath();
    ctx.arc(50, 300, 100, 0, Math.PI * 2);
    ctx.fill();
    
    ctx.globalAlpha = 1;

    // Logo Zigbee stylis√©
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 80px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('‚ö°', 250, 120);

    // Titre principal
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Tuya Zigbee', 250, 180);

    // Sous-titre
    ctx.font = '24px Arial';
    ctx.fillText('550+ Devices', 250, 220);

    // Badge features
    ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
    ctx.fillRect(100, 250, 300, 50);
    
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 18px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('100% Local ‚Ä¢ Battery Intelligence ‚Ä¢ 183 Drivers', 250, 280);

    // Sauvegarder
    const outputPath = path.join(ROOT, 'assets', 'images', 'large.png');
    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(outputPath, buffer);
    
    this.fixed.push('large.png');
    this.log('large.png cr√©√©!', '  ‚úÖ');
  }

  // Cr√©er image small.png
  async createSmallPNG() {
    this.log('Cr√©ation small.png (250x175)...');

    const canvas = createCanvas(250, 175);
    const ctx = canvas.getContext('2d');

    // Fond d√©grad√©
    const gradient = ctx.createLinearGradient(0, 0, 250, 175);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 250, 175);

    // Logo
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 50px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('‚ö°', 125, 80);

    // Texte
    ctx.font = 'bold 28px Arial';
    ctx.fillText('Tuya', 125, 120);
    
    ctx.font = '16px Arial';
    ctx.fillText('Zigbee Hub', 125, 145);

    // Sauvegarder
    const outputPath = path.join(ROOT, 'assets', 'images', 'small.png');
    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(outputPath, buffer);
    
    this.fixed.push('small.png');
    this.log('small.png cr√©√©!', '  ‚úÖ');
  }

  // Cr√©er xlarge.png
  async createXLargePNG() {
    this.log('Cr√©ation xlarge.png (1000x700)...');

    const canvas = createCanvas(1000, 700);
    const ctx = canvas.getContext('2d');

    // Fond d√©grad√©
    const gradient = ctx.createLinearGradient(0, 0, 1000, 700);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(0.5, '#764ba2');
    gradient.addColorStop(1, '#f093fb');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 1000, 700);

    // Motif d√©coratif
    ctx.globalAlpha = 0.08;
    ctx.fillStyle = '#ffffff';
    for (let i = 0; i < 5; i++) {
      ctx.beginPath();
      ctx.arc(900, 100 + i * 150, 120, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.beginPath();
      ctx.arc(100, 150 + i * 140, 100, 0, Math.PI * 2);
      ctx.fill();
    }
    ctx.globalAlpha = 1;

    // Logo central
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 180px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('‚ö°', 500, 240);

    // Titre
    ctx.font = 'bold 96px Arial';
    ctx.fillText('Tuya Zigbee', 500, 360);

    // Sous-titre
    ctx.font = '42px Arial';
    ctx.fillText('Universal Homey Integration', 500, 420);

    // Features box
    ctx.fillStyle = 'rgba(255, 255, 255, 0.15)';
    ctx.fillRect(150, 480, 700, 150);
    
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('550+ Devices ‚Ä¢ 183 Drivers ‚Ä¢ 100% Local', 500, 530);
    ctx.font = '28px Arial';
    ctx.fillText('Battery Intelligence ‚Ä¢ Flow Automation', 500, 575);
    ctx.fillText('Real-time Monitoring ‚Ä¢ Professional Support', 500, 615);

    // Sauvegarder
    const outputPath = path.join(ROOT, 'assets', 'images', 'xlarge.png');
    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(outputPath, buffer);
    
    this.fixed.push('xlarge.png');
    this.log('xlarge.png cr√©√©!', '  ‚úÖ');
  }

  // V√©rifier images drivers probl√©matiques
  async checkDriverImages() {
    this.log('V√©rification images drivers...', 'üîç');

    const driversPath = path.join(ROOT, 'drivers');
    const problematic = [];

    if (!fs.existsSync(driversPath)) return problematic;

    const drivers = fs.readdirSync(driversPath);
    
    for (const driver of drivers) {
      const driverPath = path.join(driversPath, driver);
      if (!fs.statSync(driverPath).isDirectory()) continue;

      const assetsPath = path.join(driverPath, 'assets');
      if (!fs.existsSync(assetsPath)) {
        problematic.push({ driver, issue: 'no_assets_folder' });
        continue;
      }

      // V√©rifier images requises
      const required = ['icon.svg', 'images/large.png', 'images/small.png'];
      const missing = [];

      for (const img of required) {
        const imgPath = path.join(assetsPath, img);
        if (!fs.existsSync(imgPath)) {
          missing.push(img);
        }
      }

      if (missing.length > 0) {
        problematic.push({ driver, issue: 'missing_images', missing });
      }
    }

    this.log(`${problematic.length} drivers avec probl√®mes`, problematic.length > 0 ? '‚ö†Ô∏è' : '‚úÖ');
    
    return problematic;
  }

  // G√©n√©rer rapport
  generateReport(problematic) {
    const report = {
      timestamp: new Date().toISOString(),
      fixed: {
        app_images: this.fixed,
        count: this.fixed.length
      },
      problematic_drivers: {
        list: problematic.slice(0, 20), // Premiers 20
        count: problematic.length
      }
    };

    const reportPath = path.join(ROOT, 'reports', 'FIX_APP_IMAGES_REPORT.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    return report;
  }

  // Ex√©cution
  async run() {
    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                                                                    ‚ïë');
    console.log('‚ïë     FIX APP IMAGES - DESIGN PROFESSIONNEL                          ‚ïë');
    console.log('‚ïë                                                                    ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    const startTime = Date.now();

    // Cr√©er images app
    console.log('‚ïê'.repeat(70));
    this.log('Images App Store', 'üé®');
    console.log('‚ïê'.repeat(70));
    
    await this.createSmallPNG();
    await this.createLargePNG();
    await this.createXLargePNG();

    // V√©rifier drivers
    console.log('\n' + '‚ïê'.repeat(70));
    const problematic = await this.checkDriverImages();

    // Rapport
    const report = this.generateReport(problematic);
    const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);

    // R√©sum√©
    console.log('\n' + '‚ïê'.repeat(70));
    console.log('üìä R√âSUM√â');
    console.log('‚ïê'.repeat(70));
    console.log(`\n‚è±Ô∏è  Temps: ${totalTime}s`);
    console.log(`‚úÖ Images app fix√©es: ${report.fixed.count}`);
    console.log(`‚ö†Ô∏è  Drivers probl√©matiques: ${report.problematic_drivers.count}`);

    if (report.problematic_drivers.count > 0) {
      console.log('\nüîç Premiers drivers probl√©matiques:');
      report.problematic_drivers.list.slice(0, 5).forEach(p => {
        console.log(`   - ${p.driver}: ${p.issue}`);
      });
    }

    console.log('\n' + '‚ïê'.repeat(70));
    console.log('‚úÖ IMAGES APP FIX√âES - DESIGN PROFESSIONNEL');
    console.log('‚ïê'.repeat(70) + '\n');

    return report;
  }
}

// Ex√©cuter
if (require.main === module) {
  const fixer = new FixAppImagesProfessional();
  fixer.run().catch(err => {
    console.error('Erreur fatale:', err);
    process.exit(1);
  });
}

module.exports = FixAppImagesProfessional;
