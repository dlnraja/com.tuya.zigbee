# Script de configuration de l'environnement pour le projet Tuya Zigbee
Write-Host "=== Configuration de l'environnement ===" -ForegroundColor Cyan

# Vérifier les droits d'administration
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "Ce script nécessite des privilèges d'administrateur. Relancez en tant qu'administrateur." -ForegroundColor Red
    exit 1
}

# Vérifier Node.js et npm
$nodeVersion = node --version
$npmVersion = npm --version
Write-Host "- Node.js $nodeVersion"
Write-Host "- npm $npmVersion"

# Aller dans le dossier scripts
Set-Location -Path "$PSScriptRoot\scripts" -ErrorAction Stop

# Créer un package.json minimal s'il n'existe pas
if (-not (Test-Path "package.json")) {
    Write-Host "Création d'un fichier package.json minimal..."
    @{
        "name" = "tuya-zigbee-scripts"
        "version" = "1.0.0"
        "private" = $true
        "type" = "module"
    } | ConvertTo-Json | Set-Content -Path "package.json"
}

# Nettoyer le cache npm
Write-Host "Nettoyage du cache npm..."
npm cache clean --force

# Installer les dépendances une par une
$dependencies = @("uuid@9.0.0", "axios@1.6.2", "chalk@5.3.0", "fs-extra@11.1.1", "glob@10.3.3")

foreach ($dep in $dependencies) {
    $package = $dep -replace '@.*', ''
    Write-Host "Installation de $dep..."
    
    # Installer le package localement
    $installResult = npm install $dep --save --no-package-lock --no-shrinkwrap --no-fund --no-audit --prefer-offline --verbose
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "Échec de l'installation de $dep. Tentative avec --force..." -ForegroundColor Yellow
        $installResult = npm install $dep --save --no-package-lock --no-shrinkwrap --no-fund --no-audit --prefer-offline --force --verbose
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ Échec critique de l'installation de $dep" -ForegroundColor Red
            Write-Host "Détails de l'erreur:"
            $installResult | Select-Object -Last 20
            exit 1
        }
    }
    
    Write-Host "✅ $package installé avec succès" -ForegroundColor Green
}

# Vérifier l'installation des dépendances
Write-Host "`nVérification des dépendances installées..."
$installed = npm list --depth=0
Write-Host $installed

# Tester l'importation des modules
Write-Host "`nTest d'importation des modules..."
try {
    $testScript = @'
    import fs from 'fs-extra';
    import axios from 'axios';
    import { v4 as uuidv4 } from 'uuid';
    import chalk from 'chalk';
    import { glob } from 'glob';
    
    console.log(chalk.green('Tous les modules ont été importés avec succès !'));
    console.log('Version de uuid:', uuidv4());
'@

    $testFile = "$env:TEMP\test-imports.mjs"
    $testScript | Out-File -FilePath $testFile -Encoding utf8
    
    Write-Host "Exécution du test d'importation..."
    node $testFile
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Tous les tests d'importation ont réussi" -ForegroundColor Green
    } else {
        Write-Host "❌ Échec des tests d'importation" -ForegroundColor Red
    }
    
    Remove-Item $testFile -ErrorAction SilentlyContinue
} catch {
    Write-Host "❌ Erreur lors du test d'importation: $_" -ForegroundColor Red
}

# Exécuter le script principal
Write-Host "`n=== Exécution du script principal ===" -ForegroundColor Cyan
try {
    node update-drivers.js
    if ($LASTEXITCODE -ne 0) {
        throw "Le script a échoué avec le code $LASTEXITCODE"
    }
    Write-Host "✅ Script exécuté avec succès" -ForegroundColor Green
} catch {
    Write-Host "❌ Erreur lors de l'exécution du script: $_" -ForegroundColor Red
    Write-Host "Essayez d'exécuter 'npm install' manuellement dans le dossier scripts/"
}

Write-Host "`n=== Configuration terminée ===" -ForegroundColor Cyan
