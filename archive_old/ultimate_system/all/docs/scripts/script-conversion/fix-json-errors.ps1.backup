# Script de correction des erreurs de parsing JSON dans les drivers
# Corrige les probl√®mes de duplication de cl√©s et de syntaxe JSON
# 
# @author Dylan Rajasekaram (dlrnaja)
# @version 3.5.1
# @date 2025-08-16

param(
    [string]$DriversPath = "drivers"
)

Write-Host "üîß CORRECTION DES ERREURS DE PARSING JSON..." -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Variables de suivi
$fixedFiles = @()
$errors = @()
$stats = @{
    total = 0
    fixed = 0
    errors = 0
}

# Fonction pour corriger les probl√®mes JSON courants
function Fix-JSONContent {
    param([string]$content)
    
    $fixed = $content
    
    # 1. Supprimer les cl√©s productId dupliqu√©es
    if ($fixed -match '("productId":\s*\[[^\]]+\],\s*)+') {
        Write-Host "  üîß Suppression des cl√©s productId dupliqu√©es" -ForegroundColor Yellow
        $firstMatch = [regex]::Match($fixed, '"productId":\s*\[[^\]]+\]').Value
        $fixed = $fixed -replace '("productId":\s*\[[^\]]+\],\s*)+', "$firstMatch,"
    }
    
    # 2. Corriger les virgules trailing
    $fixed = $fixed -replace ',(\s*[}\]])', '$1'
    
    # 3. Nettoyer les caract√®res invisibles
    $fixed = $fixed -replace '[\x00-\x1F\x7F-\x9F]', ''
    
    return $fixed
}

# Fonction pour traiter un driver
function Process-Driver {
    param([string]$driverName)
    
    $driverPath = Join-Path $DriversPath $driverName
    $composePath = Join-Path $driverPath "driver.compose.json"
    
    if (-not (Test-Path $composePath)) {
        Write-Host "‚ö†Ô∏è  $driverName`: driver.compose.json manquant" -ForegroundColor Yellow
        return
    }
    
    try {
        Write-Host "`nüîß Traitement de $driverName..." -ForegroundColor Green
        
        # Lire le fichier
        $content = Get-Content $composePath -Raw -Encoding UTF8
        
        # V√©rifier si c'est du JSON valide
        try {
            $null = $content | ConvertFrom-Json
            Write-Host "‚úÖ $driverName`: JSON d√©j√† valide" -ForegroundColor Green
            return
        } catch {
            Write-Host "‚ùå $driverName`: Erreur de parsing d√©tect√©e" -ForegroundColor Red
        }
        
        # Corriger le contenu
        $fixedContent = Fix-JSONContent -content $content
        
        # V√©rifier √† nouveau
        try {
            $null = $fixedContent | ConvertFrom-Json
            Write-Host "‚úÖ $driverName`: JSON corrig√© avec succ√®s" -ForegroundColor Green
            
            # Sauvegarder
            Set-Content -Path $composePath -Value $fixedContent -Encoding UTF8
            $fixedFiles += @{
                driver = $driverName
                path = $composePath
                originalSize = $content.Length
                fixedSize = $fixedContent.Length
            }
            $stats.fixed++
            
        } catch {
            Write-Host "‚ùå $driverName`: Impossible de corriger - $($_.Exception.Message)" -ForegroundColor Red
            $errors += @{
                driver = $driverName
                error = $_.Exception.Message
                path = $composePath
            }
            $stats.errors++
        }
        
    } catch {
        Write-Host "‚ùå $driverName`: Erreur lors du traitement - $($_.Exception.Message)" -ForegroundColor Red
        $errors += @{
            driver = $driverName
            error = $_.Exception.Message
            path = $composePath
        }
        $stats.errors++
    }
}

# Traitement principal
try {
    if (-not (Test-Path $DriversPath)) {
        Write-Host "‚ùå Dossier $DriversPath non trouv√©" -ForegroundColor Red
        exit 1
    }
    
    $drivers = Get-ChildItem -Path $DriversPath -Directory | Select-Object -ExpandProperty Name
    $stats.total = $drivers.Count
    
    Write-Host "üìÅ $($stats.total) drivers √† traiter" -ForegroundColor Cyan
    
    foreach ($driver in $drivers) {
        Process-Driver -driverName $driver
    }
    
    # G√©n√©ration du rapport
    Write-Host "`nüìä RAPPORT DE CORRECTION JSON" -ForegroundColor Cyan
    Write-Host "==============================" -ForegroundColor Cyan
    Write-Host "Total drivers: $($stats.total)" -ForegroundColor White
    Write-Host "Fichiers corrig√©s: $($stats.fixed)" -ForegroundColor Green
    Write-Host "Erreurs persistantes: $($stats.errors)" -ForegroundColor Red
    Write-Host "Taux de succ√®s: $([math]::Round(($stats.fixed / $stats.total) * 100, 1))%" -ForegroundColor Cyan
    
    if ($fixedFiles.Count -gt 0) {
        Write-Host "`n‚úÖ FICHIERS CORRIG√âS:" -ForegroundColor Green
        foreach ($file in $fixedFiles) {
            Write-Host "  - $($file.driver): $($file.originalSize) ‚Üí $($file.fixedSize) bytes" -ForegroundColor White
        }
    }
    
    if ($errors.Count -gt 0) {
        Write-Host "`n‚ùå ERREURS PERSISTANTES:" -ForegroundColor Red
        foreach ($error in $errors) {
            Write-Host "  - $($error.driver): $($error.error)" -ForegroundColor White
        }
    }
    
    # Sauvegarder le rapport
    $report = @{
        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        stats = $stats
        fixedFiles = $fixedFiles
        errors = $errors
    }
    
    $reportPath = "JSON_PARSING_FIX_REPORT.json"
    $report | ConvertTo-Json -Depth 10 | Set-Content $reportPath -Encoding UTF8
    Write-Host "`nüìÑ Rapport sauvegard√©: $reportPath" -ForegroundColor Cyan
    
    Write-Host "`nüéâ CORRECTION TERMIN√âE !" -ForegroundColor Green
    Write-Host "Prochaine √©tape: validation avec homey app validate" -ForegroundColor Yellow
    
} catch {
    Write-Host "‚ùå ERREUR CRITIQUE: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
