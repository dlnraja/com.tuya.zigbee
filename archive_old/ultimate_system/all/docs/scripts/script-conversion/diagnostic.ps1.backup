# üîç DIAGNOSTIC SIMPLE
# =====================

Write-Host "üîç DIAGNOSTIC SIMPLE" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan

# Configuration des chemins
$projectRoot = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)
$driversPath = Join-Path $projectRoot "drivers"
$appJsonPath = Join-Path $projectRoot "app.json"

Write-Host "üìÅ R√©pertoire projet: $projectRoot" -ForegroundColor Green
Write-Host "üìÅ R√©pertoire drivers: $driversPath" -ForegroundColor Green

# V√©rifier app.json
Write-Host "`nüîç V√©rification de app.json..." -ForegroundColor Yellow

if (Test-Path $appJsonPath) {
    try {
        $appContent = Get-Content $appJsonPath -Raw
        $appConfig = $appContent | ConvertFrom-Json
        
        Write-Host "‚úÖ app.json trouv√©" -ForegroundColor Green
        Write-Host "   - ID: $($appConfig.id)" -ForegroundColor White
        Write-Host "   - Platforms: $($appConfig.platforms)" -ForegroundColor White
        Write-Host "   - Nombre de drivers: $($appConfig.drivers.Count)" -ForegroundColor White
        
        # V√©rifier le premier driver pour la structure Zigbee
        if ($appConfig.drivers.Count -gt 0) {
            $firstDriver = $appConfig.drivers[0]
            Write-Host "`nüîç Premier driver analys√©: $($firstDriver.id)" -ForegroundColor Yellow
            
            if ($firstDriver.zigbee) {
                Write-Host "   ‚úÖ Configuration Zigbee trouv√©e:" -ForegroundColor Green
                Write-Host "      - manufacturerName: $($firstDriver.zigbee.manufacturerName)" -ForegroundColor White
                Write-Host "      - productId: $($firstDriver.zigbee.productId)" -ForegroundColor White
                Write-Host "      - endpoints: $($firstDriver.zigbee.endpoints.Count) endpoint(s)" -ForegroundColor White
            } else {
                Write-Host "   ‚ùå Configuration Zigbee manquante" -ForegroundColor Red
            }
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors de la lecture de app.json: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå app.json non trouv√©" -ForegroundColor Red
}

# V√©rifier les drivers
Write-Host "`nüîç V√©rification des drivers..." -ForegroundColor Yellow

$driverDirs = Get-ChildItem -Path $driversPath -Directory | Select-Object -ExpandProperty Name
Write-Host "üìä Trouv√© $($driverDirs.Count) dossiers de drivers" -ForegroundColor White

foreach ($driverDir in $driverDirs) {
    $composePath = Join-Path $driversPath $driverDir "driver.compose.json"
    
    if (Test-Path $composePath) {
        try {
            $content = Get-Content $composePath -Raw
            $driverConfig = $content | ConvertFrom-Json
            
            if ($driverConfig.zigbee) {
                Write-Host "   ‚úÖ $driverDir : Zigbee configur√©" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå $driverDir : Zigbee manquant" -ForegroundColor Red
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è  $driverDir : Erreur de lecture" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  $driverDir : driver.compose.json manquant" -ForegroundColor Yellow
    }
}

Write-Host "`nüéâ Diagnostic termin√© !" -ForegroundColor Cyan
