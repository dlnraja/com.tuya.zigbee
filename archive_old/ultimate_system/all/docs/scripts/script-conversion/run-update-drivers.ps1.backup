# Script pour exécuter update-drivers.js avec journalisation
$logFile = "$PSScriptRoot\update-drivers.log"
$errorLogFile = "$PSScriptRoot\update-drivers-error.log"

# Nettoyer les anciens fichiers de log
Remove-Item -Path $logFile -ErrorAction SilentlyContinue
Remove-Item -Path $errorLogFile -ErrorAction SilentlyContinue

Write-Host "=== Démarrage de l'exécution de update-drivers.js ===" -ForegroundColor Green
Write-Host "Journalisation dans: $logFile"
Write-Host "Journal des erreurs dans: $errorLogFile"

# Fonction pour écrire dans le log
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    Add-Content -Path $logFile -Value $logMessage
    Write-Host $logMessage
}

try {
    # Vérifier si Node.js est disponible
    $nodeVersion = node --version 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "Node.js n'est pas correctement installé ou configuré"
    }
    
    Write-Log "Node.js version: $nodeVersion"
    
    # Vérifier que le fichier source existe
    $scriptPath = "$PSScriptRoot\scripts\update-drivers.js"
    if (-not (Test-Path $scriptPath)) {
        throw "Le fichier $scriptPath est introuvable"
    }
    
    Write-Log "Script trouvé: $scriptPath"
    
    # Créer le répertoire des logs s'il n'existe pas
    $logsDir = "$PSScriptRoot\logs"
    if (-not (Test-Path $logsDir)) {
        New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
        Write-Log "Répertoire de logs créé: $logsDir"
    }
    
    # Exécuter le script avec journalisation
    $startTime = Get-Date
    Write-Log "Démarrage de l'exécution à: $startTime"
    
    # Exécuter le script et capturer la sortie et les erreurs
    $process = Start-Process -FilePath "node" -ArgumentList "`"$scriptPath`"" `
        -NoNewWindow -PassThru -RedirectStandardOutput $logFile -RedirectStandardError $errorLogFile
    
    # Attendre la fin de l'exécution avec un timeout
    $timeout = 300 # 5 minutes
    $process | Wait-Process -Timeout $timeout -ErrorAction SilentlyContinue
    
    if (-not $process.HasExited) {
        $process | Stop-Process -Force
        throw "Le script a dépassé le délai d'attente de $timeout secondes"
    }
    
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    Write-Log "Exécution terminée à: $endTime"
    Write-Log "Durée: $($duration.TotalSeconds) secondes"
    Write-Log "Code de sortie: $($process.ExitCode)"
    
    # Vérifier s'il y a des erreurs
    if (Test-Path $errorLogFile -and (Get-Item $errorLogFile).Length -gt 0) {
        $errors = Get-Content $errorLogFile -Raw
        if ($errors.Trim().Length -gt 0) {
            Write-Log "=== ERREURS DÉTECTÉES ===" -Level "ERROR"
            Write-Log $errors -Level "ERROR"
        }
    }
    
    # Afficher les dernières lignes du log
    if (Test-Path $logFile) {
        $logContent = Get-Content $logFile -Tail 20 -ErrorAction SilentlyContinue
        if ($logContent) {
            Write-Log "=== DERNIÈRES LIGNES DU JOURNAL ==="
            $logContent | ForEach-Object { Write-Log $_ }
        }
    }
    
} catch {
    $errorMessage = "ERREUR: $_"
    Write-Host $errorMessage -ForegroundColor Red
    $errorMessage | Out-File -FilePath $errorLogFile -Append
    $_.ScriptStackTrace | Out-File -FilePath $errorLogFile -Append
} finally {
    if (Test-Path $logFile) {
        Write-Host "`nConsultez le fichier de log complet: $logFile" -ForegroundColor Cyan
    }
    if (Test-Path $errorLogFile -and (Get-Item $errorLogFile).Length -gt 0) {
        Write-Host "Des erreurs ont été enregistrées dans: $errorLogFile" -ForegroundColor Red
    }
}
