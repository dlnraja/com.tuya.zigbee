# Script de diagnostic complet pour l'environnement de développement

# Fonction pour afficher les en-têtes de section
function Write-Section {
    param([string]$title)
    $separator = '=' * 50
    Write-Host "`n$separator" -ForegroundColor Cyan
    Write-Host $title -ForegroundColor Cyan
    Write-Host $separator -ForegroundColor Cyan
}

# Démarrer le diagnostic
Write-Host "=== DIAGNOSTIC DU SYSTÈME ===" -ForegroundColor Green
Write-Host "Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
Write-Host "Répertoire: $(Get-Location)"

# 1. Informations système
Write-Section "1. INFORMATIONS SYSTÈME"
try {
    $os = Get-CimInstance -ClassName Win32_OperatingSystem
    $cpu = Get-CimInstance -ClassName Win32_Processor
    $memory = Get-CimInstance -ClassName Win32_ComputerSystem
    
    Write-Host "Système d'exploitation: $($os.Caption) ($($os.Version))"
    Write-Host "Processeur: $($cpu.Name.Trim())"
    Write-Host "Mémoire: $([math]::Round($memory.TotalPhysicalMemory / 1GB, 2)) Go"
    Write-Host "Utilisateur: $env:USERNAME@$env:COMPUTERNAME"
} catch {
    Write-Host "❌ Impossible de récupérer les informations système: $_" -ForegroundColor Red
}

# 2. Vérification de Node.js
Write-Section "2. VÉRIFICATION DE NODE.JS"
try {
    $nodePath = Get-Command node -ErrorAction Stop
    $nodeVersion = node --version 2>&1
    
    Write-Host "✅ Node.js est installé" -ForegroundColor Green
    Write-Host "   Chemin: $($nodePath.Source)"
    Write-Host "   Version: $nodeVersion"
    
    # Vérifier la version minimale requise
    $requiredVersion = [System.Version]"14.0.0"
    $currentVersion = [System.Version]($nodeVersion -replace '^v|\s')
    
    if ($currentVersion -ge $requiredVersion) {
        Write-Host "   ✅ Version compatible (>= $requiredVersion)" -ForegroundColor Green
    } else {
        Write-Host "   ⚠️  Version obsolète (requise: >= $requiredVersion)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "❌ Node.js n'est pas installé ou n'est pas dans le PATH" -ForegroundColor Red
    Write-Host "   Téléchargez Node.js depuis: https://nodejs.org/"
}

# 3. Vérification de npm
Write-Section "3. VÉRIFICATION DE NPM"
try {
    $npmPath = Get-Command npm -ErrorAction Stop
    $npmVersion = npm --version 2>&1
    
    Write-Host "✅ npm est installé" -ForegroundColor Green
    Write-Host "   Chemin: $($npmPath.Source)"
    Write-Host "   Version: $npmVersion"
} catch {
    Write-Host "❌ npm n'est pas installé ou n'est pas dans le PATH" -ForegroundColor Red
}

# 4. Vérification de l'accès au système de fichiers
Write-Section "4. ACCÈS AU SYSTÈME DE FICHIERS"
try {
    $testDir = Join-Path -Path $PSScriptRoot -ChildPath "test-dir-$(Get-Date -Format 'yyyyMMddHHmmss')"
    $testFile = Join-Path -Path $testDir -ChildPath "test-file.txt"
    $testContent = "Test d'écriture - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    
    # Tester la création de répertoire
    New-Item -ItemType Directory -Path $testDir -Force | Out-Null
    if (Test-Path -Path $testDir) {
        Write-Host "✅ Création de répertoire: OK" -ForegroundColor Green
        
        # Tester l'écriture de fichier
        $testContent | Out-File -FilePath $testFile -Encoding UTF8 -Force
        if (Test-Path -Path $testFile) {
            Write-Host "✅ Écriture de fichier: OK" -ForegroundColor Green
            
            # Tester la lecture de fichier
            $content = Get-Content -Path $testFile -Raw
            if ($content -match [regex]::Escape($testContent)) {
                Write-Host "✅ Lecture de fichier: OK" -ForegroundColor Green
            } else {
                Write-Host "❌ Lecture de fichier: Échec" -ForegroundColor Red
            }
        } else {
            Write-Host "❌ Écriture de fichier: Échec" -ForegroundColor Red
        }
    } else {
        Write-Host "❌ Création de répertoire: Échec" -ForegroundColor Red
    }
    
    # Nettoyage
    if (Test-Path -Path $testFile) { Remove-Item -Path $testFile -Force }
    if (Test-Path -Path $testDir) { Remove-Item -Path $testDir -Force }
    
} catch {
    Write-Host "❌ Erreur lors des tests de système de fichiers: $_" -ForegroundColor Red
}

# 5. Vérification des fichiers du projet
Write-Section "5. FICHIERS DU PROJET"
$requiredFiles = @(
    "package.json",
    "app.json",
    "scripts/scout.js",
    "scripts/architect.js",
    "scripts/optimizer.js",
    "scripts/validator.js"
)

$missingFiles = @()

foreach ($file in $requiredFiles) {
    $filePath = Join-Path -Path $PSScriptRoot -ChildPath $file
    if (Test-Path -Path $filePath) {
        $fileInfo = Get-Item -Path $filePath
        Write-Host "✅ $file" -ForegroundColor Green
        Write-Host "   Taille: $([math]::Round($fileInfo.Length / 1KB, 2)) Ko"
        Write-Host "   Dernière modification: $($fileInfo.LastWriteTime)"
    } else {
        Write-Host "❌ $file (MANQUANT)" -ForegroundColor Red
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host "`n⚠️  Fichiers manquants: $($missingFiles.Count)" -ForegroundColor Yellow
    $missingFiles | ForEach-Object { Write-Host "   - $_" }
}

# 6. Vérification des dépendances
Write-Section "6. DÉPENDANCES"
if (Test-Path -Path "package.json") {
    try {
        $packageJson = Get-Content -Path "package.json" -Raw | ConvertFrom-Json
        Write-Host "✅ package.json valide" -ForegroundColor Green
        
        # Vérifier les dépendances
        if ($packageJson.dependencies -or $packageJson.devDependencies) {
            $depsCount = if ($packageJson.dependencies) { $packageJson.dependencies.PSObject.Properties.Count } else { 0 }
            $devDepsCount = if ($packageJson.devDependencies) { $packageJson.devDependencies.PSObject.Properties.Count } else { 0 }
            
            Write-Host "   Dependencies: $depsCount"
            Write-Host "   Dev Dependencies: $devDepsCount"
            
            # Vérifier si node_modules existe
            $nodeModulesPath = Join-Path -Path $PSScriptRoot -ChildPath "node_modules"
            if (Test-Path -Path $nodeModulesPath) {
                $nodeModulesSize = (Get-ChildItem -Path $nodeModulesPath -Recurse -File | Measure-Object -Property Length -Sum).Sum
                $nodeModulesSizeMB = [math]::Round($nodeModulesSize / 1MB, 2)
                Write-Host "✅ node_modules existe ($nodeModulesSizeMB Mo)" -ForegroundColor Green
            } else {
                Write-Host "⚠️  node_modules n'existe pas. Exécutez 'npm install' pour installer les dépendances." -ForegroundColor Yellow
            }
        } else {
            Write-Host "ℹ️  Aucune dépendance définie dans package.json" -ForegroundColor Gray
        }
    } catch {
        Write-Host "❌ Erreur lors de la lecture du package.json: $_" -ForegroundColor Red
    }
}

# 7. Test d'exécution d'un script Node.js
Write-Section "7. TEST D'EXÉCUTION NODE.JS"
$testScript = @"
// Script de test Node.js
console.log('=== TEST NODE.JS ===');
console.log('Node.js version:', process.version);
console.log('Platform:', process.platform, process.arch);
console.log('Current directory:', process.cwd());

// Test de fonctionnalités
const fs = require('fs');
const path = require('path');

// Test de lecture de fichier
try {
  const files = fs.readdirSync('.');
  console.log('\nContenu du répertoire (premiers 5 éléments):');
  files.slice(0, 5).forEach((file, index) => {
    const stats = fs.statSync(file);
    console.log(`  ${index + 1}. ${file} (${stats.isDirectory() ? 'dossier' : 'fichier'})`);
  });
  if (files.length > 5) console.log(`  ...et ${files.length - 5} autres`);
} catch (error) {
  console.error('Erreur lors de la lecture du répertoire:', error.message);
}

console.log('\n=== FIN DU TEST ===');
"@

try {
    $testScriptPath = Join-Path -Path $PSScriptRoot -ChildPath "node-test-script.js"
    $testOutputPath = Join-Path -Path $PSScriptRoot -ChildPath "node-test-output.txt"
    
    # Écrire le script de test
    $testScript | Out-File -FilePath $testScriptPath -Encoding UTF8 -Force
    
    # Exécuter le script
    Write-Host "Exécution du script de test..."
    $process = Start-Process -FilePath "node" -ArgumentList "`"$testScriptPath`"" -NoNewWindow -Wait -PassThru -RedirectStandardOutput $testOutputPath -RedirectStandardError "$testOutputPath.errors"
    
    # Afficher les résultats
    if (Test-Path -Path $testOutputPath) {
        $output = Get-Content -Path $testOutputPath -Raw
        Write-Host "✅ Script exécuté avec le code de sortie: $($process.ExitCode)" -ForegroundColor Green
        Write-Host "`nSortie du script:"
        Write-Host "-------------"
        $output
        Write-Host "-------------"
    } else {
        Write-Host "❌ Aucune sortie générée par le script" -ForegroundColor Red
    }
    
    # Vérifier les erreurs
    if (Test-Path -Path "$testOutputPath.errors") {
        $errors = Get-Content -Path "$testOutputPath.errors" -Raw
        if ($errors.Trim()) {
            Write-Host "❌ Des erreurs se sont produites:" -ForegroundColor Red
            Write-Host $errors
        }
    }
    
} catch {
    Write-Host "❌ Erreur lors de l'exécution du script de test: $_" -ForegroundColor Red
} finally {
    # Nettoyage
    if (Test-Path -Path $testScriptPath) { Remove-Item -Path $testScriptPath -Force -ErrorAction SilentlyContinue }
    if (Test-Path -Path $testOutputPath) { Remove-Item -Path $testOutputPath -Force -ErrorAction SilentlyContinue }
    if (Test-Path -Path "$testOutputPath.errors") { Remove-Item -Path "$testOutputPath.errors" -Force -ErrorAction SilentlyContinue }
}

# 8. Recommandations
Write-Section "8. RECOMMANDATIONS"
$recommendations = @()

# Vérifier si Node.js est installé
if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
    $recommendations += "- Installez Node.js depuis https://nodejs.org/"
}

# Vérifier si npm est installé
if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
    $recommendations += "- Installez npm (généralement inclus avec Node.js)"
}

# Vérifier si les fichiers requis sont manquants
if ($missingFiles.Count -gt 0) {
    $recommendations += "- Les fichiers suivants sont manquants et doivent être restaurés:"
    $missingFiles | ForEach-Object { $recommendations += "    - $_" }
}

# Vérifier si les dépendances sont installées
$nodeModulesPath = Join-Path -Path $PSScriptRoot -ChildPath "node_modules"
if (-not (Test-Path -Path $nodeModulesPath)) {
    $recommendations += "- Exécutez 'npm install' pour installer les dépendances du projet"
}

# Afficher les recommandations
if ($recommendations.Count -gt 0) {
    Write-Host "⚠️  Recommandations:" -ForegroundColor Yellow
    $recommendations | ForEach-Object { Write-Host "  $_" }
} else {
    Write-Host "✅ Aucun problème critique détecté" -ForegroundColor Green
}

# 9. Résumé
Write-Section "9. RÉSUMÉ"
$summary = @{
    "Système" = "$($os.Caption) ($($os.Version))"
    "Node.js" = if (Get-Command node -ErrorAction SilentlyContinue) { node --version } else { "NON INSTALLÉ" }
    "npm" = if (Get-Command npm -ErrorAction SilentlyContinue) { npm --version } else { "NON INSTALLÉ" }
    "Fichiers manquants" = $missingFiles.Count
    "Dépendances installées" = if (Test-Path -Path $nodeModulesPath) { "OUI" } else { "NON" }
}

$summary.GetEnumerator() | ForEach-Object {
    Write-Host "$($_.Key.PadRight(25)): $($_.Value)"
}

# Terminer
Write-Host "`n=== DIAGNOSTIC TERMINÉ ===" -ForegroundColor Green
Write-Host "Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

# Ouvrir le rapport dans l'éditeur par défaut
$reportPath = Join-Path -Path $PSScriptRoot -ChildPath "diagnostic-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
$summaryText = @"
=== RAPPORT DE DIAGNOSTIC ===
Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Répertoire: $PSScriptRoot

INFORMATIONS SYSTÈME
------------------
Système d'exploitation: $($os.Caption) ($($os.Version))
Processeur: $($cpu.Name.Trim())
Mémoire: $([math]::Round($memory.TotalPhysicalMemory / 1GB, 2)) Go
Utilisateur: $env:USERNAME@$env:COMPUTERNAME

NODE.JS ET NPM
--------------
Node.js: $(if (Get-Command node -ErrorAction SilentlyContinue) { node --version } else { "NON INSTALLÉ" })
npm: $(if (Get-Command npm -ErrorAction SilentlyContinue) { npm --version } else { "NON INSTALLÉ" })

FICHIERS DU PROJET
------------------
$($requiredFiles | ForEach-Object { 
    $status = if (Test-Path -Path (Join-Path -Path $PSScriptRoot -ChildPath $_)) { "✅" } else { "❌" }
    "$status $_"
} -join "`n")

RÉCAPITULATIF
------------
$($summary.GetEnumerator() | ForEach-Object { "$($_.Key.PadRight(25)): $($_.Value)" } -join "`n")

RECOMMANDATIONS
--------------
$($recommendations -join "`n")
"@

$summaryText | Out-File -FilePath $reportPath -Encoding UTF8
Write-Host "`nRapport complet enregistré dans: $reportPath" -ForegroundColor Cyan

# Demander si l'utilisateur souhaite ouvrir le rapport
$openReport = Read-Host "`nVoulez-vous ouvrir le rapport maintenant ? (O/N)"
if ($openReport -eq 'O' -or $openReport -eq 'o') {
    Start-Process -FilePath $reportPath
}
