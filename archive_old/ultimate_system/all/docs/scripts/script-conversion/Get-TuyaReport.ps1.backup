# Script PowerShell pour g√©n√©rer un rapport d'int√©gration Tuya Zigbee

# Configuration
$reportPath = Join-Path -Path $PSScriptRoot -ChildPath "reports\tuya-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"
$driversPath = Join-Path -Path $PSScriptRoot -ChildPath "drivers"

# Cr√©er le dossier des rapports si n√©cessaire
$reportsDir = Split-Path -Path $reportPath -Parent
if (-not (Test-Path -Path $reportsDir)) {
    New-Item -ItemType Directory -Path $reportsDir | Out-Null
}

# V√©rifier si le dossier des drivers existe
if (-not (Test-Path -Path $driversPath)) {
    "# Erreur: Le dossier des drivers n'existe pas" | Out-File -FilePath $reportPath -Encoding utf8
    "Le dossier sp√©cifi√© n'existe pas: $driversPath" | Out-File -FilePath $reportPath -Append -Encoding utf8
    exit 1
}

# Initialiser le rapport
$report = @"
# Rapport d'Int√©gration Tuya Zigbee

**Date de g√©n√©ration:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')  
**Dossier analys√©:** $driversPath

## üìä R√©sum√©

"@

# Analyser les dossiers de drivers
$driverDirs = Get-ChildItem -Path $driversPath -Directory
$totalDrivers = $driverDirs.Count
$validDrivers = 0
$invalidDrivers = 0
$driversWithIcons = 0

$report += "- **Nombre total de drivers:** $totalDrivers`n"

# D√©tails des drivers
$report += "`n## üìã D√©tails des Drivers`n`n"
$report += "| Nom du Driver | Statut | Fichier Config | Ic√¥nes | Probl√®mes |`n"
$report += "|--------------|--------|----------------|--------|-----------|`n"

foreach ($dir in $driverDirs) {
    $driverName = $dir.Name
    $hasConfig = $false
    $hasIcons = $false
    $issues = @()
    
    # V√©rifier le fichier de configuration
    $configFile = Join-Path -Path $dir.FullName -ChildPath "driver.compose.json"
    if (Test-Path -Path $configFile) {
        $hasConfig = $true
        
        # V√©rifier les ic√¥nes
        $iconFiles = Get-ChildItem -Path $dir.FullName -Filter "*.png"
        if ($iconFiles.Count -gt 0) {
            $hasIcons = $true
            $driversWithIcons++
        } else {
            $issues += "Aucune ic√¥ne PNG trouv√©e"
        }
        
        # V√©rifier le contenu du fichier de configuration
        try {
            $config = Get-Content -Path $configFile -Raw | ConvertFrom-Json
            
            # V√©rifier les champs obligatoires
            $requiredFields = @('id', 'class', 'name')
            foreach ($field in $requiredFields) {
                if (-not $config.PSObject.Properties.Name.Contains($field)) {
                    $issues += "Champ obligatoire manquant: $field"
                }
            }
            
            # V√©rifier les images
            if (-not $config.images) {
                $issues += "Section 'images' manquante dans la configuration"
            }
            
        } catch {
            $issues += "Erreur de lecture du fichier de configuration: $_"
        }
        
    } else {
        $issues += "Fichier de configuration manquant"
    }
    
    # Mettre √† jour les compteurs
    if ($hasConfig -and $issues.Count -eq 0) {
        $validDrivers++
        $status = "‚úÖ Valide"
    } else {
        $invalidDrivers++
        $status = "‚ùå Probl√®mes ($($issues.Count))"
    }
    
    # Ajouter une ligne au rapport
    $iconStatus = if ($hasIcons) { "‚úÖ" } else { "‚ùå" }
    $configStatus = if ($hasConfig) { "‚úÖ" } else { "‚ùå" }
    $issuesText = if ($issues.Count -gt 0) { ($issues -join "; ") } else { "Aucun" }
    
    $report += "| $driverName | $status | $configStatus | $iconStatus | $issuesText |`n"
}

# G√©n√©rer le r√©sum√©
$report += "`n## üìä Statistiques`n`n"
$report += "- **Drivers valides:** $validDrivers/$totalDrivers ($([math]::Round(($validDrivers / $totalDrivers) * 100, 2))%)`n"
$report += "- **Drivers avec probl√®mes:** $invalidDrivers`n"
$report += "- **Drivers avec ic√¥nes:** $driversWithIcons/$totalDrivers`n"

# Ajouter des recommandations
$report += @"

## üöÄ Recommandations

1. **Corriger les probl√®mes critiques**
   - $invalidDrivers drivers n√©cessitent une attention imm√©diate
   - Mettre √† jour les configurations manquantes ou invalides

2. **Gestion des ic√¥nes**
   - $($totalDrivers - $driversWithIcons) drivers n'ont pas d'ic√¥nes
   - Standardiser le format des ic√¥nes (PNG recommand√©)

3. **Validation des drivers**
   - Impl√©menter des tests automatis√©s
   - V√©rifier la compatibilit√© avec les appareils cibles

4. **Documentation**
   - Mettre √† jour la documentation pour refl√©ter les changements
   - Documenter les exigences pour les nouveaux drivers

---
*Rapport g√©n√©r√© automatiquement - Tuya Zigbee Integration*
"@

# Enregistrer le rapport
$report | Out-File -FilePath $reportPath -Encoding utf8

# Afficher un r√©sum√© dans la console
Write-Host "`n‚úÖ Rapport g√©n√©r√© avec succ√®s: $reportPath" -ForegroundColor Green
Write-Host "- Nombre total de drivers: $totalDrivers"
Write-Host "- Drivers valides: $validDrivers"
Write-Host "- Drivers avec probl√®mes: $invalidDrivers"
Write-Host "- Drivers avec ic√¥nes: $driversWithIcons"

# Ouvrir le rapport dans l'√©diteur par d√©faut
Start-Process $reportPath
