# Script PowerShell pour g√©n√©rer un rapport d'int√©gration complet

# Configuration
$rootDir = $PSScriptRoot
$reportsDir = Join-Path $rootDir "reports"
$driversDir = Join-Path $rootDir "drivers"
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$reportFile = Join-Path $reportsDir "integration-report-$timestamp.md"

# Cr√©er le dossier des rapports s'il n'existe pas
if (-not (Test-Path $reportsDir)) {
    New-Item -ItemType Directory -Path $reportsDir | Out-Null
}

# Fonction pour obtenir des informations sur un driver
function Get-DriverInfo {
    param (
        [string]$driverPath
    )
    
    $driverName = Split-Path $driverPath -Leaf
    $configPath = Join-Path $driverPath "driver.compose.json"
    
    $driverInfo = [PSCustomObject]@{
        Name = $driverName
        Valid = $false
        HasConfig = $false
        HasIcons = $false
        Issues = @()
        Class = ""
        Capabilities = @()
        Manufacturer = ""
        ProductId = ""
        Clusters = @()
    }
    
    # V√©rifier le fichier de configuration
    if (Test-Path $configPath) {
        try {
            $config = Get-Content $configPath -Raw | ConvertFrom-Json
            $driverInfo.HasConfig = $true
            
            # Extraire les informations de base
            $driverInfo.Class = $config.class
            if ($config.capabilities) {
                $driverInfo.Capabilities = $config.capabilities
            }
            
            # Extraire les informations Zigbee
            if ($config.zigbee) {
                $driverInfo.Manufacturer = if ($config.zigbee.manufacturerName) { $config.zigbee.manufacturerName[0] } else { "" }
                $driverInfo.ProductId = if ($config.zigbee.productId) { $config.zigbee.productId[0] } else { "" }
                
                if ($config.zigbee.endpoints) {
                    $driverInfo.Clusters = $config.zigbee.endpoints.PSObject.Properties.Value.clusters | 
                        Select-Object -Unique | 
                        ForEach-Object { if ($_ -is [array]) { $_ } else { @($_) } } | 
                        Select-Object -Unique
                }
            }
            
            # V√©rifier les ic√¥nes
            if ($config.images) {
                $smallIcon = Join-Path $driverPath $config.images.small
                $largeIcon = Join-Path $driverPath $config.images.large
                
                $hasSmallIcon = Test-Path $smallIcon
                $hasLargeIcon = Test-Path $largeIcon
                
                if ($hasSmallIcon -and $hasLargeIcon) {
                    $driverInfo.HasIcons = $true
                } else {
                    if (-not $hasSmallIcon) { $driverInfo.Issues += "Ic√¥ne manquante: $($config.images.small)" }
                    if (-not $hasLargeIcon) { $driverInfo.Issues += "Ic√¥ne manquante: $($config.images.large)" }
                }
            } else {
                $driverInfo.Issues += "Section 'images' manquante dans la configuration"
            }
            
            # V√©rifier les champs obligatoires
            $requiredFields = @('id', 'class', 'name')
            foreach ($field in $requiredFields) {
                if (-not $config.PSObject.Properties.Name.Contains($field)) {
                    $driverInfo.Issues += "Champ obligatoire manquant: $field"
                }
            }
            
            $driverInfo.Valid = $driverInfo.Issues.Count -eq 0
            
        } catch {
            $driverInfo.Issues += "Erreur de lecture du fichier de configuration: $_"
        }
    } else {
        $driverInfo.Issues += "Fichier de configuration manquant"
    }
    
    return $driverInfo
}

# D√©marrer le rapport
$report = @"
# üìä Rapport d'Int√©gration Tuya Zigbee

**Date de g√©n√©ration:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")  
**D√©p√¥t:** [dlnraja/com.tuya.zigbee](https://github.com/dlnraja/com.tuya.zigbee)

## üìã R√©sum√© du Projet

Ce rapport fournit une vue d'ensemble de l'√©tat d'int√©gration des drivers Tuya Zigbee.

"@

# Analyser les drivers
$driverDirs = Get-ChildItem -Path $driversDir -Directory
$driverInfos = @()
$validCount = 0
$missingIconsCount = 0
$missingConfigCount = 0

Write-Host "Analyse de $($driverDirs.Count) drivers..." -ForegroundColor Cyan

foreach ($dir in $driverDirs) {
    Write-Host "- $($dir.Name)" -ForegroundColor Gray
    $driverInfo = Get-DriverInfo -driverPath $dir.FullName
    $driverInfos += $driverInfo
    
    if ($driverInfo.Valid) { $validCount++ }
    if (-not $driverInfo.HasIcons) { $missingIconsCount++ }
    if (-not $driverInfo.HasConfig) { $missingConfigCount++ }
}

# G√©n√©rer les statistiques
$report += "## üìä Statistiques Globales
"
$report += "- **Nombre total de drivers:** $($driverDirs.Count)"
$report += "- **Drivers valides:** $validCount ($([math]::Round(($validCount / $driverDirs.Count) * 100))%)"
$report += "- **Drivers avec ic√¥nes manquantes:** $missingIconsCount"
$report += "- **Drivers sans configuration valide:** $missingConfigCount"

# Ajouter la matrice des appareils
$report += "
## üìã Matrice des Appareils
"
$report += "| Nom | Fabricant | ID Produit | Classe | Clusters | Capabilit√©s | Statut |"
$report += "|-----|-----------|------------|--------|----------|-------------|---------|"

foreach ($driver in $driverInfos | Sort-Object Name) {
    $status = if ($driver.Valid) { "‚úÖ Valide" } else { "‚ùå Probl√®mes ($($driver.Issues.Count))" }
    $clusters = $driver.Clusters -join ", "
    if ([string]::IsNullOrEmpty($clusters)) { $clusters = "-" }
    
    $capabilities = $driver.Capabilities -join ", "
    if ([string]::IsNullOrEmpty($capabilities)) { $capabilities = "-" }
    
    $report += "| $($driver.Name) | $($driver.Manufacturer) | $($driver.ProductId) | $($driver.Class) | $clusters | $capabilities | $status |"
}

# Ajouter la section des probl√®mes
$problemDrivers = $driverInfos | Where-Object { $_.Issues.Count -gt 0 }

if ($problemDrivers.Count -gt 0) {
    $report += "
## ‚ö†Ô∏è Probl√®mes Identifi√©s ($($problemDrivers.Count) drivers)"
    
    foreach ($driver in $problemDrivers | Sort-Object Name) {
        $report += "
### $($driver.Name)"
        $report += "- **Classe:** $($driver.Class)"
        $report += "- **Fabricant:** $($driver.Manufacturer)"
        $report += "- **ID Produit:** $($driver.ProductId)"
        $report += "**Probl√®mes:**"
        $report += $driver.Issues | ForEach-Object { "  - $_" }
    }
}

# Ajouter les recommandations
$report += @"

## üöÄ Recommandations

1. **Corriger les probl√®mes critiques**
   - $($problemDrivers.Count) drivers n√©cessitent une attention imm√©diate
   - Mettre √† jour les configurations manquantes ou invalides

2. **Gestion des ic√¥nes**
   - $missingIconsCount drivers ont des ic√¥nes manquantes
   - Standardiser le format des ic√¥nes (PNG recommand√©)
   - S'assurer que les chemins dans la configuration sont corrects

3. **Validation des drivers**
   - Impl√©menter des tests automatis√©s
   - V√©rifier la compatibilit√© avec les appareils cibles

4. **Documentation**
   - Mettre √† jour la documentation pour refl√©ter les changements
   - Documenter les exigences pour les nouveaux drivers

## Prochaines √âtapes

1. Examiner les drivers avec probl√®mes et apporter les corrections n√©cessaires
2. Valider les fonctionnalit√©s des drivers modifi√©s
3. Mettre √† jour la documentation utilisateur
4. Tester l'int√©gration avec des appareils physiques

---
*Rapport g√©n√©r√© automatiquement - Tuya Zigbee Integration*
"@

# Enregistrer le rapport
$report | Out-File -FilePath $reportFile -Encoding utf8

# Afficher le chemin du rapport
Write-Host "`n‚úÖ Rapport g√©n√©r√© avec succ√®s: $reportFile" -ForegroundColor Green

# Ouvrir le rapport dans l'√©diteur par d√©faut
Start-Process $reportFile
