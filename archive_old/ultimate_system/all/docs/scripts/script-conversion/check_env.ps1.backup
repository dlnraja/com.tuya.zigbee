Write-Host "=== Environment Check ===" -ForegroundColor Cyan

# Check Node.js and npm
$nodeVersion = node --version
$npmVersion = npm --version

Write-Host "`n[Node.js]" -ForegroundColor Green
Write-Host "Version: $nodeVersion"
Write-Host "Path: $(Get-Command node | Select-Object -ExpandProperty Source)"

Write-Host "`n[npm]" -ForegroundColor Green
Write-Host "Version: $npmVersion"
Write-Host "Path: $(Get-Command npm | Select-Object -ExpandProperty Source)"

# Check project files
Write-Host "`n[Project Files]" -ForegroundColor Green
$requiredFiles = @('package.json', 'app.json', 'README.md')

foreach ($file in $requiredFiles) {
    $exists = Test-Path $file
    $status = if ($exists) { "FOUND" } else { "MISSING" }
    $color = if ($exists) { "Green" } else { "Red" }
    Write-Host "$status`: $file" -ForegroundColor $color
}

# Check package.json
if (Test-Path 'package.json') {
    try {
        $packageJson = Get-Content 'package.json' -Raw | ConvertFrom-Json
        Write-Host "`n[Package Info]" -ForegroundColor Green
        Write-Host "Name: $($packageJson.name)"
        Write-Host "Version: $($packageJson.version)"
        
        # Check required scripts
        $requiredScripts = @('start', 'build', 'test')
        $missingScripts = $requiredScripts | Where-Object { -not $packageJson.scripts.PSObject.Properties[$_] }
        
        if ($missingScripts) {
            Write-Host "`n[WARNING] Missing recommended scripts: $($missingScripts -join ', ')" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "`n[ERROR] Failed to parse package.json: $_" -ForegroundColor Red
    }
}

# Check directories
Write-Host "`n[Project Directories]" -ForegroundColor Green
$directories = @('drivers', 'scripts', 'assets', 'test')

foreach ($dir in $directories) {
    $exists = Test-Path $dir
    $status = if ($exists) { "FOUND" } else { "MISSING" }
    $color = if ($exists) { "Green" } else { "Yellow" }
    
    if ($exists) {
        $itemCount = (Get-ChildItem -Path $dir -Recurse -File -ErrorAction SilentlyContinue).Count
        Write-Host "$status`: $dir/ ($itemCount files)" -ForegroundColor $color
    } else {
        Write-Host "$status`: $dir/" -ForegroundColor $color
    }
}

# Check node_modules
$nodeModulesExists = Test-Path 'node_modules'
Write-Host "`n[Node Modules]" -ForegroundColor Green
if ($nodeModulesExists) {
    $moduleCount = (Get-ChildItem -Path 'node_modules' -Directory).Count
    Write-Host "FOUND: node_modules/ ($moduleCount packages)" -ForegroundColor Green
} else {
    Write-Host "MISSING: node_modules/ - Run 'npm install' to install dependencies" -ForegroundColor Red
}

Write-Host "`n=== Check Complete ===" -ForegroundColor Cyan
