const axios = require('axios');
const fs = require('fs');
const path = require('path');

const OUTPUT_FILE = path.join(__dirname, '..', 'resources', 'blakadder-devices.json');
const BLAKADDER_URL = 'https://raw.githubusercontent.com/Koenkk/zigbee-herdsman-converters/master/devices.js';

async function fetchBlakadderDevices() {
  try {
    console.log('üåê Fetching devices from Blakadder database...');
    
    // Fetch the devices file
    const response = await axios.get(BLAKADDER_URL);
    
    // The file is a JavaScript module, we'll extract the devices array
    const jsContent = response.data;
    
    // Extract the devices array using a regex
    const devicesMatch = jsContent.match(/const\s+devices\s*=\s*(\[\s*\{[\s\S]*?\}\s*\])/m);
    
    if (!devicesMatch || !devicesMatch[1]) {
      throw new Error('Could not find devices array in the source');
    }
    
    // Evaluate the devices array (this is safe because we control the source)
    const devices = eval(`(${devicesMatch[1]})`);
    
    // Process and clean up the devices
    const processedDevices = devices.map(device => ({
      model: device.model,
      vendor: device.vendor,
      description: device.description,
      supports: device.supports,
      fromZigbee: device.fromZigbee ? Object.keys(device.fromZigbee) : [],
      toZigbee: device.toZigbee ? Object.keys(device.toZigbee) : [],
      exposes: device.exposes ? device.exposes.map(e => e.type || e.name) : [],
      source: 'blakadder',
      timestamp: new Date().toISOString()
    }));
    
    // Save to file
    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(processedDevices, null, 2));
    console.log(`‚úÖ Saved ${processedDevices.length} devices to ${OUTPUT_FILE}`);
    
    return processedDevices;
  } catch (error) {
    console.error('‚ùå Error fetching Blakadder devices:', error.message);
    
    // If we have a previous version, return that instead of failing
    if (fs.existsSync(OUTPUT_FILE)) {
      console.log('Using cached version instead');
      return JSON.parse(fs.readFileSync(OUTPUT_FILE, 'utf8'));
    }
    
    throw error;
  }
}

// Run the function if this file is executed directly
if (require.main === module) {
  fetchBlakadderDevices().catch(console.error);
}

module.exports = fetchBlakadderDevices;
