### 🧠 CURSOR MEGA PROMPT – Projet principal `com.tuya.zigbee`---### 🎯 Objectif globalReconstruire, corriger, optimiser et finaliser le projet `com.tuya.zigbee` avec les objectifs suivants :- Une base **fonctionnelle, cohérente, complète** (Homey SDK3)- Des fichiers valides, traduits, interconnectés intelligemment- Des commits propres, lisibles, non pollués par des erreurs d’environnement- Des workflows GitHub enrichis, stables et cohérents- Un dashboard, une documentation et des drivers **à jour et testés**- Un lien clair avec la version fallback `tuya-light` sans duplication inutile- Aucune dépendance inutile (pas de techno farfelue, rester strictement sur **Tuya Zigbee**) ✅---### ✅ PHASE 0 — REPRISE TOTALE DES TÂCHES ET RÉPARATION- Reprendre **toutes les tâches précédentes interrompues**, y compris celles bloquées par PowerShell (`pwsh`) qui a crashé- Simuler les actions nécessaires pour forcer l'exécution complète (ex: appui sur "Entrée" forcé pour débloquer Cursor)- Supprimer **toute trace de logs de crash, activation YOLO ou hack** de contournement du runtime- Interdire toute référence à la configuration machine locale dans le code, les scripts, les logs ou les commits- Nettoyer l'historique Git des mentions de bugs locaux, crashs Cursor, activation du mode YOLO, etc.- Tous les commits doivent être : - Rédigés **d'abord en anglais**, - Puis traduits **juste après en français** (EN → FR)---### ✅ PHASE 1 — Nettoyage & refactorisation Git- Réécrire tous les commits contenant : - Bugs liés à la machine de développement - Références à Cursor, scripts de debug, erreurs manuelles ou environnement local - "YOLO mode", "test", "crash fix", "retry", etc.- Format de commit : `[type]: English description // FR: Traduction française````bashfeat(driver): Add TS0201 temperature sensor // FR: Ajout du capteur de température TS0201fix(workflow): Correct dashboard path // FR: Correction du chemin du dashboard```---### ✅ PHASE 2 — Vérification complète fichier par fichier- Vérifier et corriger chaque fichier (`.json`, `.js`, `.md`, `.yml`, etc.) individuellement- Aucun fichier ne doit référencer ou dépendre de la machine locale, ni de chemin durcodé- Tous les fichiers doivent être utilisables en environnement autonome standard Homey SDK3---### ✅ PHASE 3 — README multilingue structuré- Générer deux fichiers `README.md` (projet principal et tuya-light) au format :```markdown# ENGLISH(All sections in English: intro, install, features, drivers...)# FRANÇAIS(Toutes les sections en français, sans ligne à ligne intercalée)# NEDERLANDS(Volledige secties in het Nederlands, volledig)# தமிழ்(தமிழில் அனைத்து பகுதிகளும் தனித்தனியாக)```- Ne jamais mixer les langues par ligne : chaque langue doit être traitée en bloc complet, dans l’ordre EN > FR > NL > TA- Utiliser un fichier source `readme_base.en.md` comme référence principale- Générer les autres blocs via traduction IA locale ou API avec fallback manuel---### ✅ PHASE 4 — Automatisation complète par GitHub Actions- Tout ce qui suit doit être **automatisé intelligemment** sans dégradation : - Génération et mise à jour du `README.md` multilingue - Génération du `CHANGELOG.md` à chaque commit - Traduction automatique (via IA intégrée ou script localisé) - Nettoyage des commits erronés, YOLO, debug, crash, mentions Cursor - Traduction automatique des messages de commit (EN → FR) - Synchronisation des fichiers et drivers entre `master`, `tuya-light`, et `tuya-light-repo` - Publication automatique des releases `.zip` valides - Vérification automatique SDK (`homey app validate`, `homey app install`)- Suggestion de GitHub Action à créer : `.github/workflows/update-docs-and-sync.yml````yamlon: push: branches: [ master ] schedule: - cron: '0 4 1 * *'jobs: update-docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - run: node tools/generate-readme.js - run: node tools/update-changelog.js - run: npm install -g homey && homey app validate - uses: stefanzweifel/git-auto-commit-action@v5 with: commit_message: "docs: Auto-update README and changelog // FR: MAJ auto de la doc et changelog"```---### ✅ PHASE 5 — Release propre- Création automatique d'une release GitHub stable après validation SDK- Export `.zip` propre, sans trace de logs ou d’erreurs (`tuya-zigbee-YYYY-MM.zip`)- Vérification intégrale des fichiers, compatibilité Homey- Suppression automatique des fichiers parasites (`.log`, `.bak`, `cursor_temp*`, etc.)> Ce prompt est exclusivement basé sur Tuya Zigbee — sans dépendance tierce, sans scripts farfelus, sans technos parasites. L’objectif est une release maintenable, traduite, exploitable immédiatement et totalement documentée.