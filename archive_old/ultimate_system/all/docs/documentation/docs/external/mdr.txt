Tr√®s bien ! Voici le **texte final enrichi**, pr√™t √† √™tre coll√© dans **Cursor** ou int√©gr√© dans ton projet pour documenter et guider compl√®tement la pipeline. Il int√®gre :* Le **rangement automatique** des drivers dans `drivers/tuya/` ou `drivers/zigbee/`* Le comportement unitaire et tol√©rant aux erreurs* L‚Äôenrichissement automatique + fallback* Le fonctionnement m√™me sans token/API---## üß† Contexte global ‚Äì Projet Tuya Zigbee `com.tuya.zigbee`Ce projet vise √† automatiser **l‚Äôenrichissement, la compl√©tion, la r√©paration et la synchronisation** de l‚Äôensemble des drivers Zigbee pour Homey, notamment ceux issus de Tuya ou de fabricants compatibles.Tout doit fonctionner sans intervention humaine, en mode **full autonome**, avec une **r√©silience int√©gr√©e**, une **am√©lioration continue**, et **une organisation claire du code source**.---## üèóÔ∏è Pipeline GitHub ‚Äì Enrichissement + R√©silience + AutomatisationLa pipeline `.github/workflows/mega-pipeline.yml` a pour mission de :1. **Analyser tous les drivers du projet**2. **V√©rifier** les erreurs, champs manquants, ou incoh√©rences3. **Compl√©ter et enrichir** automatiquement les drivers √† partir de toutes les sources4. **Scraper** les sources officielles et communautaires (Tuya, Homey Apps, forum Homey‚Ä¶)5. **Ranger automatiquement les drivers g√©n√©r√©s** dans les bons dossiers : * `drivers/tuya/<device-id>` * `drivers/zigbee/<device-id>` * `drivers/generic/<device-id>` (si inconnu)6. **Traiter les TODO devices** pour les convertir en drivers fonctionnels7. **R√©cup√©rer et croiser automatiquement** toutes les issues et PR des repos GitHub cit√©s dans le projet8. **Mettre √† jour les fichiers suivants** automatiquement : * `drivers.json` * `driver.compose.json` * `README.md` * `CHANGELOG.md` * `drivers-matrix.md`9. **Commiter uniquement les modifications unitaires** * Chaque modification ne touche **que le fichier ou dossier concern√©** * En cas d‚Äôerreur dans un fichier, il est isol√© et la pipeline continue10. **Appliquer une am√©lioration continue** * Chaque ex√©cution am√©liore la compl√©tude et la structure du projet * Les enrichissements sont cumul√©s √† chaque passage11. **G√©rer un fallback automatique** * Si une partie √©choue, cr√©ation d'une PR `rescue/<date>` * Possibilit√© de rollback sur `git tag stable` ou branche `tuya-light`---## ‚öôÔ∏è Fr√©quence recommand√©e d'ex√©cution```yamlcron: '0 2 * * 1,4' # Tous les lundis et jeudis √† 2h UTC```Aussi ex√©cutable manuellement (`workflow_dispatch`) ou √† chaque `push` sur `test`.---## üìÅ Organisation automatique des driversChaque driver est analys√© puis d√©plac√© (ou cr√©√©) automatiquement dans un dossier d√©di√© :| Source d√©tect√©e | Dossier cible || ------------------------------------------------------ | ----------------------------------------- || Appareil Tuya reconnu | `drivers/tuya/<device-id>` || Appareil Zigbee g√©n√©rique (non-Tuya) | `drivers/zigbee/<device-id>` || Appareil inconnu, partiellement connu, ou sans cluster | `drivers/generic/<device-id>` || En cours de traitement | `drivers/todo-<device-id>` *(temporaire)* |Les chemins sont harmonis√©s et v√©rifi√©s dans `drivers.json` et `driver.compose.json`.---## üìú Fonctionnement unitaire des scriptsTous les scripts dans `scripts/` fonctionnent en mode :* **Tol√©rant aux erreurs*** **Granulaire** (ils ne modifient que les fichiers impact√©s)* **Auto-validant** et int√©grables √† chaque ex√©cution| Script | But | Comportement || ------------------------------ | --------------------------------------------- | -------------------------------------------- || `verify-all-drivers.js` | Valide syntaxe et fichiers de chaque driver | Ignore en erreur mais log || `fetch-new-devices.js` | Scrape Tuya, Homey Apps, JSON externes | Cr√©e `drivers/tuya/` ou `drivers/zigbee/` || `ai-enrich-drivers.js` | Compl√®te les comportements avec OpenAI | Skipp√© si `OPENAI_API_KEY` absent || `scrape-homey-community.js` | R√©cup√®re des devices communautaires | Ajoute ou compl√®te les drivers || `fetch-issues-pullrequests.js` | R√©cup√®re issues/PR GitHub li√©s | Utilise token si dispo, sinon skip || `resolve-todo-devices.js` | Convertit les `todo-devices` en vrais drivers | Pr√©dit comportements + enrichit || `generate-docs.js` | Met √† jour la doc du projet | Compl√®te automatiquement README et changelog || `auto-repair.js` | Fallback + d√©sactivation partielle si besoin | Cr√©e une PR de r√©paration si blocage |---## ‚úÖ R√©silience sans cl√© API| Cl√©/API | Utilisation | Requis ? || ---------------------- | --------------------------------------- | -------- || `OPENAI_API_KEY` | Deviner comportement cluster/capability | ‚ùå Non || `GITHUB_TOKEN` | Commit auto, PR/issues GitHub | ‚ùå Non || `HOMEBRIDGE_CLI_TOKEN` | Tests CLI Homey (optionnels) | ‚ùå Non |Chaque script ou √©tape doit pouvoir **s‚Äôex√©cuter m√™me sans cl√©**, avec logs indiquant que la partie est skipp√©e.Aucune √©tape n‚Äôest bloquante : **la pipeline va jusqu‚Äôau bout quoi qu‚Äôil arrive.**---## üéØ R√©sultat attendu√Ä chaque passage, la pipeline doit :* V√©rifier et enrichir tous les drivers* Classer et structurer automatiquement tous les fichiers dans le bon dossier* Traiter les appareils inconnus ou g√©n√©riques* Compl√©ter automatiquement la documentation* S‚Äôauto-r√©parer ou proposer une PR si une erreur bloque une partie* S‚Äôam√©liorer √† chaque ex√©cution (auto-learning / auto-fill)---Si tu veux, je peux maintenant te g√©n√©rer un **template Cursor pr√©-rempli pour chaque script**, ou te proposer un `setup.sh` pour cr√©er tous les squelettes automatiquement dans `scripts/`.Souhaites-tu que je t‚Äôenvoie √ßa aussi ?