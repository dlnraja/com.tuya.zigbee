#!/usr/bin/env node
/* Resource_Pictogram_Fixer.js
 * - Normalize driver manifests to ensure image paths exist and are correct
 * - Create missing ./assets/small.png and ./assets/large.png by copying root app images
 * - Write a small report with metrics
 */
const fs = require('fs');
const path = require('path');

const ROOT = path.resolve(__dirname, '../../..');
const DRIVERS_DIR = path.join(ROOT, 'drivers');
const STATE_DIR = path.join(ROOT, 'ultimate_system', 'orchestration', 'state');
// Note: do not copy app-level images into drivers to avoid wrong sizes.
// Actual driver images (75x75, 500x500) are generated by fix_all_driver_assets.js

function ensureDir(d){ if(!fs.existsSync(d)) fs.mkdirSync(d,{recursive:true}); }
function readJson(p){ try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch { return null; } }
function writeJson(p,o){ ensureDir(path.dirname(p)); fs.writeFileSync(p, JSON.stringify(o,null,2),'utf8'); }

function fixOneDriver(dir){
  const manifestPath = path.join(dir, 'driver.compose.json');
  const assetsDir = path.join(dir, 'assets');
  const smallPath = path.join(assetsDir, 'small.png');
  const largePath = path.join(assetsDir, 'large.png');
  let created = 0, updated = 0;
  const m = readJson(manifestPath); if (!m) return { created, updated, touched:false };
  ensureDir(assetsDir);
  // Do not copy from app images; leave creation to the asset generator. Just ensure paths are correct.
  m.images = m.images || {};
  if (m.images.small !== './assets/small.png') { m.images.small = './assets/small.png'; updated++; }
  if (m.images.large !== './assets/large.png') { m.images.large = './assets/large.png'; updated++; }
  if (created>0 || updated>0) fs.writeFileSync(manifestPath, JSON.stringify(m,null,2),'utf8');
  return { created, updated, touched: (created>0||updated>0) };
}

function main(){
  let drivers = 0, totalCreated = 0, totalUpdated = 0, touched = 0;
  if (!fs.existsSync(DRIVERS_DIR)) return;
  for (const name of fs.readdirSync(DRIVERS_DIR)){
    const dir = path.join(DRIVERS_DIR, name);
    if (!fs.statSync(dir).isDirectory()) continue;
    const res = fixOneDriver(dir);
    if (res.touched) touched++;
    totalCreated += res.created; totalUpdated += res.updated; drivers++;
  }
  writeJson(path.join(STATE_DIR,'picto_fixer_report.json'), {
    generatedAt: new Date().toISOString(), drivers, touched, created: totalCreated, updated: totalUpdated
  });
  console.log(`✅ Resource pictograms normalized • drivers=${drivers} • touched=${touched} • created=${totalCreated} • updated=${totalUpdated}`);
}

if (require.main===module) main();
