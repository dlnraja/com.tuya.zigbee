#!/usr/bin/env node
'use strict';
const { spawnSync } = require('child_process');
const fs = require('fs');

const MODE = process.env.MODE || 'FAST';
const OFFLINE = process.env.OFFLINE === '1';

function run(cmd, args, options = {}) {
  console.log('‚ñ∂', cmd, args.join(' '));
  const result = spawnSync(cmd, args, { stdio: 'inherit', ...options });
  if (result.status !== 0) {
    throw new Error(`${cmd} failed with status ${result.status}`);
  }
  return result;
}

function tryRun(cmd, args, options = {}) {
  console.log('‚ñ∂', cmd, args.join(' '));
  const result = spawnSync(cmd, args, { stdio: 'inherit', ...options });
  return result.status === 0;
}

try {
  console.log('üöÄ Orchestrateur simplifi√© - Mode:', MODE, 'Offline:', OFFLINE);
  
  // 0) Nettoyage JSON cibl√© (ignore les backups)
  console.log('\nüßπ √âtape 0: Nettoyage JSON cibl√©...');
  run('node', ['tools/clean-json-only.js']);
  
  // 1) Activation Compose
  console.log('\nüîß √âtape 1: Activation Homey Compose...');
  run('node', ['tools/enable-compose.js']);
  
  // 2) V√©rification des drivers
  console.log('\nüìã √âtape 2: V√©rification des drivers...');
  if (tryRun('node', ['tools/check-drivers.js'])) {
    console.log('‚úÖ V√©rification des drivers OK');
  } else {
    console.log('‚ö†Ô∏è  Probl√®mes d√©tect√©s dans les drivers');
  }
  
  // 3) G√©n√©ration des matrices
  console.log('\nüìä √âtape 3: G√©n√©ration des matrices...');
  if (tryRun('node', ['tools/matrix-build.js'])) {
    console.log('‚úÖ Matrices g√©n√©r√©es');
  } else {
    console.log('‚ö†Ô∏è  Erreur lors de la g√©n√©ration des matrices');
  }
  
  // 4) G√©n√©ration des r√©f√©rences
  console.log('\nüîç √âtape 4: G√©n√©ration des r√©f√©rences...');
  if (tryRun('node', ['tools/build-references.js'])) {
    console.log('‚úÖ R√©f√©rences g√©n√©r√©es');
  } else {
    console.log('‚ö†Ô∏è  Erreur lors de la g√©n√©ration des r√©f√©rences');
  }
  
  // 5) Construction du dashboard
  console.log('\nüé® √âtape 5: Construction du dashboard...');
  if (tryRun('node', ['tools/build-dashboard.js'])) {
    console.log('‚úÖ Dashboard construit');
  } else {
    console.log('‚ö†Ô∏è  Erreur lors de la construction du dashboard');
  }
  
  // 6) Enrichissement heuristique (mode FAST uniquement)
  if (MODE === 'FAST') {
    console.log('\nüß† √âtape 6: Enrichissement heuristique...');
    if (tryRun('node', ['tools/enrich-heuristics.js'])) {
      console.log('‚úÖ Enrichissement heuristique termin√©');
    } else {
      console.log('‚ö†Ô∏è  Erreur lors de l\'enrichissement heuristique');
    }
  }
  
  // 7) Validation finale (si Homey CLI disponible)
  console.log('\n‚úÖ √âtape 7: Validation finale...');
  if (tryRun('homey', ['--version'])) {
    console.log('üîç Lancement de la validation Homey...');
    if (tryRun('homey', ['app', 'validate', '-l', 'debug'])) {
      console.log('‚úÖ Validation Homey OK');
    } else {
      console.log('‚ö†Ô∏è  Validation Homey √©chou√©e');
    }
  } else {
    console.log('‚ÑπÔ∏è  Homey CLI non disponible, validation ignor√©e');
  }
  
  console.log('\nüéâ Orchestrateur termin√© avec succ√®s !');
  console.log('üìÅ Dashboard disponible: docs/index.html');
  console.log('üìä Matrices: matrices/driver_matrix.json');
  console.log('üîç R√©f√©rences: references/driver_search_queries.json');
  
} catch (error) {
  console.error('\n‚ùå Erreur dans l\'orchestrateur:', error.message);
  process.exit(1);
}
