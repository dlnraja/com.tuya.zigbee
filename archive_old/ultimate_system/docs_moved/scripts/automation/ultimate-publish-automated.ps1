# üéØ ULTIMATE HOMEY PUBLISH AUTOMATION v1.0.36+
# Gestion automatique des prompts interactifs avec retry

param(
    [string]$MaxRetries = "10",
    [string]$RetryDelay = "30"
)

Write-Host "üöÄ D√âBUT PUBLICATION AUTOMATIS√âE Ultimate Zigbee Hub v1.0.36+" -ForegroundColor Green

# Variables
$LogFile = "project-data\ultimate-publish-$(Get-Date -Format 'yyyy-MM-dd-HH-mm-ss').log"
$ErrorCount = 0
$SuccessFlag = $false

for ($i = 1; $i -le [int]$MaxRetries; $i++) {
    Write-Host "üîÑ TENTATIVE $i/$MaxRetries" -ForegroundColor Yellow
    
    # √âtape 1: Nettoyage et commit
    try {
        Write-Host "üì¶ Git add et commit..." -ForegroundColor Cyan
        git add -A
        $commitMsg = "üéØ AUTO-PUBLISH v1.0.3$((Get-Random -Min 6 -Max 9)) - Tentative $i"
        git commit -m $commitMsg 2>&1 | Out-Null
        
        Write-Host "üì§ Git push..." -ForegroundColor Cyan  
        git push origin master 2>&1 | Out-Null
    }
    catch {
        Write-Host "‚ö†Ô∏è Git operations skipped" -ForegroundColor Yellow
    }
    
    # √âtape 2: Publication avec automation des r√©ponses
    try {
        Write-Host "üéØ Homey App Publish avec automation..." -ForegroundColor Cyan
        
        # Cr√©er processus avec input automation
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = "homey"
        $psi.Arguments = "app publish"
        $psi.UseShellExecute = $false
        $psi.RedirectStandardInput = $true
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.WorkingDirectory = $PWD
        
        $process = [System.Diagnostics.Process]::Start($psi)
        
        # Automation des r√©ponses apr√®s d√©lai
        Start-Sleep -Seconds 2
        $process.StandardInput.WriteLine("y")  # Continue with uncommitted changes
        Start-Sleep -Seconds 1
        $process.StandardInput.WriteLine("y")  # Update version number
        Start-Sleep -Seconds 1
        $process.StandardInput.WriteLine("")   # Patch version (default)
        
        # Attendre completion avec timeout
        if ($process.WaitForExit(300000)) { # 5 minutes timeout
            $output = $process.StandardOutput.ReadToEnd()
            $errors = $process.StandardError.ReadToEnd()
            
            if ($process.ExitCode -eq 0 -and $output -match "Successfully published") {
                Write-Host "‚úÖ PUBLICATION R√âUSSIE !" -ForegroundColor Green
                $SuccessFlag = $true
                break
            }
            else {
                Write-Host "‚ùå Erreur publication: $errors" -ForegroundColor Red
                $ErrorCount++
            }
        }
        else {
            Write-Host "‚è∞ Timeout publication" -ForegroundColor Red
            $process.Kill()
            $ErrorCount++
        }
    }
    catch {
        Write-Host "‚ùå Exception: $($_.Exception.Message)" -ForegroundColor Red
        $ErrorCount++
    }
    
    if (-not $SuccessFlag -and $i -lt [int]$MaxRetries) {
        Write-Host "‚è≥ Attente $RetryDelay secondes avant retry..." -ForegroundColor Yellow
        Start-Sleep -Seconds [int]$RetryDelay
    }
}

# R√©sultat final
if ($SuccessFlag) {
    Write-Host "üéâ SUCC√àS TOTAL ! Publication Ultimate Zigbee Hub termin√©e" -ForegroundColor Green
    exit 0
}
else {
    Write-Host "üí• √âCHEC apr√®s $MaxRetries tentatives. Erreurs: $ErrorCount" -ForegroundColor Red
    exit 1
}
