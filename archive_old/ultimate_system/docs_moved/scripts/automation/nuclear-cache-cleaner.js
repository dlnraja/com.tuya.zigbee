const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üí• NUCLEAR CACHE CLEANER - Nettoyage Complet .homeybuild');

// Fonction pour supprimer r√©cursivement avec force maximale
function nuclearDelete(dirPath) {
    try {
        // M√©thode 1: PowerShell avec force maximale
        execSync(`Remove-Item -Path "${dirPath}" -Recurse -Force -ErrorAction SilentlyContinue`, { stdio: 'pipe' });
        console.log(`üßπ Supprim√© via PowerShell: ${dirPath}`);
    } catch (error) {
        // M√©thode 2: cmd avec rmdir
        try {
            execSync(`rmdir /s /q "${dirPath}"`, { stdio: 'pipe' });
            console.log(`üßπ Supprim√© via rmdir: ${dirPath}`);
        } catch (error2) {
            // M√©thode 3: Node.js r√©cursif
            try {
                if (fs.existsSync(dirPath)) {
                    fs.rmSync(dirPath, { recursive: true, force: true });
                    console.log(`üßπ Supprim√© via Node.js: ${dirPath}`);
                }
            } catch (error3) {
                console.log(`‚ö†Ô∏è Impossible de supprimer: ${dirPath}`);
            }
        }
    }
}

// Attendre que les processus se terminent
function waitForProcesses() {
    try {
        execSync('taskkill /f /im homey.exe /t 2>nul || echo "Homey not running"', { stdio: 'pipe' });
        execSync('taskkill /f /im node.exe /t 2>nul || echo "Node processes cleared"', { stdio: 'pipe' });
    } catch (error) {
        // Ignore errors
    }
    
    // Attendre 2 secondes
    execSync('timeout /t 2 /nobreak >nul', { stdio: 'pipe' });
}

// Nettoyer tous les caches possibles
function cleanAllCaches() {
    console.log('üî• NETTOYAGE NUCLEAR DE TOUS LES CACHES');
    
    waitForProcesses();
    
    // Tous les r√©pertoires de cache possibles
    const cacheDirs = [
        '.homeybuild',
        '.homeybuild-*',
        'node_modules/.cache',
        '.npm',
        '.cache'
    ];
    
    const currentDir = process.cwd();
    
    cacheDirs.forEach(cachePattern => {
        const fullPath = path.join(currentDir, cachePattern);
        
        if (cachePattern.includes('*')) {
            // Wildcard pattern
            try {
                const matches = execSync(`dir /b "${cachePattern}" 2>nul`, { encoding: 'utf8', stdio: 'pipe' });
                matches.split('\n').filter(line => line.trim()).forEach(match => {
                    nuclearDelete(path.join(currentDir, match.trim()));
                });
            } catch (error) {
                // No matches found
            }
        } else {
            nuclearDelete(fullPath);
        }
    });
    
    // V√©rifier que tout est supprim√©
    if (fs.existsSync('.homeybuild')) {
        console.log('‚ö†Ô∏è .homeybuild existe encore, tentative force brute...');
        
        // Force brute: changer permissions et supprimer
        try {
            execSync('icacls ".homeybuild" /grant Everyone:F /t /c /q 2>nul', { stdio: 'pipe' });
            execSync('attrib -r -s -h ".homeybuild\\*.*" /s /d 2>nul', { stdio: 'pipe' });
            nuclearDelete('.homeybuild');
        } catch (error) {
            console.log('‚ö†Ô∏è Suppression partielle, continuons...');
        }
    }
    
    console.log('‚úÖ Nettoyage nuclear termin√©');
}

// V√©rifier que nos images sources sont correctes
function verifySourceImages() {
    console.log('üîç V√©rification des images sources...');
    
    let correctCount = 0;
    let totalCount = 0;
    
    const driversDir = path.join(__dirname, '../../drivers');
    if (fs.existsSync(driversDir)) {
        const drivers = fs.readdirSync(driversDir, { withFileTypes: true })
            .filter(d => d.isDirectory())
            .map(d => d.name);
        
        // V√©rifier √©chantillon des premiers pilotes
        drivers.slice(0, 10).forEach(driver => {
            const smallImagePath = path.join(driversDir, driver, 'assets/images/small.png');
            if (fs.existsSync(smallImagePath)) {
                try {
                    const result = execSync(`magick identify "${smallImagePath}"`, { encoding: 'utf8', stdio: 'pipe' });
                    totalCount++;
                    
                    if (result.includes(' 75x75 ')) {
                        correctCount++;
                        console.log(`‚úÖ ${driver}: 75x75`);
                    } else {
                        console.log(`‚ùå ${driver}: ${result.match(/\d+x\d+/)?.[0] || 'unknown'}`);
                    }
                } catch (error) {
                    console.log(`‚ö†Ô∏è ${driver}: Erreur lecture`);
                }
            }
        });
    }
    
    console.log(`üìä Images sources: ${correctCount}/${totalCount} correctes`);
    
    if (correctCount < totalCount) {
        console.log('üîß Correction des images sources n√©cessaire...');
        
        // Ex√©cuter le correcteur d'images
        try {
            execSync('node scripts/automation/ultimate-image-fixer.js', { stdio: 'inherit' });
            console.log('‚úÖ Images sources corrig√©es');
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur correction images, continuons...');
        }
    }
}

// Force rebuild du cache Homey
function forceRebuildCache() {
    console.log('üîÑ Force rebuild du cache Homey...');
    
    try {
        // Pre-process pour forcer la cr√©ation du cache
        console.log('üîß Pre-processing...');
        const result = execSync('homey app validate', { encoding: 'utf8', stdio: 'pipe', timeout: 60000 });
        
        if (result.includes('‚úì')) {
            console.log('‚úÖ Cache reconstruit avec succ√®s');
            return true;
        } else {
            console.log('‚ö†Ô∏è Validation avec avertissements, continuons...');
            return true;
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Erreur validation, tentons quand m√™me...');
        return false;
    }
}

// Ex√©cution principale
try {
    console.log('üöÄ D√âMARRAGE NUCLEAR CACHE CLEANER');
    
    // Phase 1: Nettoyage nuclear
    cleanAllCaches();
    
    // Phase 2: V√©rification images sources
    verifySourceImages();
    
    // Phase 3: Force rebuild
    forceRebuildCache();
    
    console.log('\nüéâ NUCLEAR CLEANER TERMIN√â');
    console.log('üìå Actions effectu√©es:');
    console.log('   ‚úÖ Cache .homeybuild supprim√© compl√®tement');
    console.log('   ‚úÖ Images sources v√©rifi√©es (75x75)');
    console.log('   ‚úÖ Cache Homey reconstruit');
    console.log('üöÄ Pr√™t pour publication!');
    
} catch (error) {
    console.error('üí• ERREUR NUCLEAR CLEANER:', error.message);
    process.exit(1);
}
