# Homey Validation Script PowerShell
# Validation alternative sans CLI Homey

Write-Host "üîç D√©marrage de la validation Homey..." -ForegroundColor Blue

$stats = @{
    drivers_validated = 0
    errors_found = 0
    warnings = 0
    images_valid = 0
    images_missing = 0
}

$errors = @()
$warnings = @()

# Validation de la structure de l'app
Write-Host "üè† Validation de la structure de l'app..." -ForegroundColor Blue

$requiredFiles = @(
    "app.json",
    "package.json",
    ".homeycompose/compose.json"
)

$requiredAssets = @(
    "assets/small.png",
    "assets/large.png",
    "assets/icon.png"
)

# Validation des fichiers requis
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ Fichier trouv√©: $file" -ForegroundColor Green
    } else {
        $errorMsg = "Fichier requis manquant: $file"
        $errors += $errorMsg
        $stats.errors_found++
        Write-Host "‚ùå $errorMsg" -ForegroundColor Red
    }
}

# Validation des assets
foreach ($asset in $requiredAssets) {
    if (Test-Path $asset) {
        Write-Host "‚úÖ Asset trouv√©: $asset" -ForegroundColor Green
        $stats.images_valid++
    } else {
        $errorMsg = "Asset requis manquant: $asset"
        $errors += $errorMsg
        $stats.images_missing++
        Write-Host "‚ùå $errorMsg" -ForegroundColor Red
    }
}

# Validation des drivers
Write-Host "üîç Validation de tous les drivers..." -ForegroundColor Blue

$driversDir = "drivers"
if (Test-Path $driversDir) {
    $driverDirs = Get-ChildItem -Path $driversDir -Directory
    Write-Host "üìÅ $($driverDirs.Count) drivers trouv√©s" -ForegroundColor Yellow
    
    foreach ($driverDir in $driverDirs) {
        $driverPath = $driverDir.FullName
        $driverName = $driverDir.Name
        $driverComposePath = Join-Path $driverPath "driver.compose.json"
        
        if (Test-Path $driverComposePath) {
            try {
                $driverData = Get-Content $driverComposePath | ConvertFrom-Json
                $driverValid = $true
                
                # Validation de la classe
                if ($driverData.class) {
                    $validClasses = @(
                        "light", "switch", "sensor", "thermostat", "cover", "climate",
                        "button", "remote", "lock", "alarm", "fan", "heater", "curtain"
                    )
                    
                    if ($validClasses -notcontains $driverData.class) {
                        $warningMsg = "Driver $driverName : classe `"$($driverData.class)`" non standard"
                        $warnings += $warningMsg
                        $stats.warnings++
                        Write-Host "‚ö†Ô∏è  $warningMsg" -ForegroundColor Yellow
                    }
                } else {
                    $errorMsg = "Driver $driverName : classe manquante"
                    $errors += $errorMsg
                    $stats.errors_found++
                    $driverValid = $false
                    Write-Host "‚ùå $errorMsg" -ForegroundColor Red
                }
                
                # Validation des images
                if ($driverData.images) {
                    if ($driverData.images.small) {
                        $smallImagePath = Join-Path $driverPath $driverData.images.small
                        if (Test-Path $smallImagePath) {
                            $stats.images_valid++
                        } else {
                            $errorMsg = "Driver $driverName : image small manquante: $($driverData.images.small)"
                            $errors += $errorMsg
                            $stats.images_missing++
                            $driverValid = $false
                            Write-Host "‚ùå $errorMsg" -ForegroundColor Red
                        }
                    }
                    
                    if ($driverData.images.large) {
                        $largeImagePath = Join-Path $driverPath $driverData.images.large
                        if (Test-Path $largeImagePath) {
                            $stats.images_valid++
                        } else {
                            $errorMsg = "Driver $driverName : image large manquante: $($driverData.images.large)"
                            $errors += $errorMsg
                            $stats.images_missing++
                            $driverValid = $false
                            Write-Host "‚ùå $errorMsg" -ForegroundColor Red
                        }
                    }
                } else {
                    $warningMsg = "Driver $driverName : section images manquante"
                    $warnings += $warningMsg
                    $stats.warnings++
                    Write-Host "‚ö†Ô∏è  $warningMsg" -ForegroundColor Yellow
                }
                
                if ($driverValid) {
                    $stats.drivers_validated++
                }
                
            } catch {
                $parseErrorMsg = "Driver $driverName : erreur de parsing: $($_.Exception.Message)"
                $errors += $parseErrorMsg
                $stats.errors_found++
                Write-Host "‚ùå $parseErrorMsg" -ForegroundColor Red
            }
        } else {
            $errorMsg = "Driver $driverName : driver.compose.json manquant"
            $errors += $errorMsg
            $stats.errors_found++
            Write-Host "‚ùå $errorMsg" -ForegroundColor Red
        }
    }
} else {
    $errorMsg = "Dossier drivers non trouv√©"
    $errors += $errorMsg
    $stats.errors_found++
    Write-Host "‚ùå $errorMsg" -ForegroundColor Red
}

# Affichage du rapport
Write-Host ""
Write-Host "üìä RAPPORT DE VALIDATION HOMEY" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host "Drivers valid√©s: $($stats.drivers_validated)" -ForegroundColor Blue
Write-Host "Images valides: $($stats.images_valid)" -ForegroundColor Green
Write-Host "Images manquantes: $($stats.images_missing)" -ForegroundColor Red
Write-Host "Erreurs: $($stats.errors_found)" -ForegroundColor Red
Write-Host "Avertissements: $($stats.warnings)" -ForegroundColor Yellow

if ($errors.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ùå ERREURS TROUV√âES:" -ForegroundColor Red
    foreach ($errorItem in $errors) {
        Write-Host "  ‚Ä¢ $errorItem" -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  AVERTISSEMENTS:" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "  ‚Ä¢ $warning" -ForegroundColor Yellow
    }
}

if ($stats.errors_found -eq 0) {
    Write-Host ""
    Write-Host "üéâ Validation r√©ussie ! Aucune erreur critique trouv√©e." -ForegroundColor Green
    exit 0
} else {
    Write-Host ""
    Write-Host "üí• Validation √©chou√©e avec $($stats.errors_found) erreur(s)." -ForegroundColor Red
    exit 1
}
