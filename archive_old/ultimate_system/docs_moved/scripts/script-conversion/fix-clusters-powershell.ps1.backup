# Fix Clusters to Numbers - PowerShell Script
Write-Host "üîß CONVERSION CLUSTERS VERS NUM√âROS" -ForegroundColor Green
Write-Host "===================================" -ForegroundColor Green

# Mapping des clusters
$clusterIds = @{
    'genBasic' = 0
    'genPowerCfg' = 1
    'genOnOff' = 6
    'genLevelCtrl' = 8
    'genScenes' = 5
    'genGroups' = 4
    'genAlarms' = 9
    'genTime' = 10
    'genElectricalMeasurement' = 2820
    'genMetering' = 1794
    'genTemperatureMeasurement' = 1026
    'genHumidityMeasurement' = 1029
    'genOccupancySensing' = 1030
    'genColorCtrl' = 768
    'genFanControl' = 514
    'genDoorLock' = 257
    'genThermostat' = 513
    'genWindowCovering' = 258
}

# Lire app.json
$appJsonPath = Join-Path $PSScriptRoot "..\..\app.json"
Write-Host "üìÇ Lecture de app.json..." -ForegroundColor Yellow

if (-not (Test-Path $appJsonPath)) {
    Write-Host "‚ùå app.json non trouv√© !" -ForegroundColor Red
    exit 1
}

try {
    $content = Get-Content $appJsonPath -Raw -Encoding UTF8
    $appConfig = $content | ConvertFrom-Json
    
    if (-not $appConfig.drivers -or $appConfig.drivers.Count -eq 0) {
        Write-Host "‚ùå Aucun driver trouv√© dans app.json !" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "üìä Trouv√© $($appConfig.drivers.Count) drivers" -ForegroundColor Yellow
    
    $correctedCount = 0
    
    foreach ($driver in $appConfig.drivers) {
        if (-not $driver.zigbee -or -not $driver.zigbee.endpoints) {
            continue
        }
        
        $driverModified = $false
        
        foreach ($endpointId in $driver.zigbee.endpoints.PSObject.Properties.Name) {
            $endpoint = $driver.zigbee.endpoints.$endpointId
            
            if ($endpoint.clusters -and $endpoint.clusters -is [array]) {
                $numericClusters = @()
                
                foreach ($cluster in $endpoint.clusters) {
                    if ($cluster -is [string] -and $clusterIds.ContainsKey($cluster)) {
                        $numericClusters += $clusterIds[$cluster]
                    } else {
                        $numericClusters += $cluster
                    }
                }
                
                $endpoint.clusters = $numericClusters
                $driverModified = $true
            }
        }
        
        if ($driverModified) {
            $correctedCount++
            Write-Host "‚úÖ $($driver.id) - clusters convertis" -ForegroundColor Green
        }
    }
    
    # Sauvegarder le fichier corrig√©
    $updatedContent = $appConfig | ConvertTo-Json -Depth 10
    Set-Content -Path $appJsonPath -Value $updatedContent -Encoding UTF8
    
    Write-Host "`nüìä R√âSUM√â:" -ForegroundColor Cyan
    Write-Host "   - Drivers corrig√©s: $correctedCount" -ForegroundColor White
    Write-Host "   - Total drivers: $($appConfig.drivers.Count)" -ForegroundColor White
    
    if ($correctedCount -gt 0) {
        Write-Host "`nüéâ Conversion termin√©e !" -ForegroundColor Green
        Write-Host "üöÄ Pr√™t pour homey app validate" -ForegroundColor Green
    } else {
        Write-Host "`n‚ö†Ô∏è  Aucune conversion n√©cessaire" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
