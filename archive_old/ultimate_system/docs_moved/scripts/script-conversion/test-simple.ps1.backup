# Script de test simple pour Node.js et npm
Write-Host "=== Test d'environnement Node.js ===" -ForegroundColor Green

# 1. Vérifier Node.js
Write-Host "`n1. Vérification de Node.js..." -ForegroundColor Cyan
$nodeVersion = node --version 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "✅ Node.js est installé (version: $nodeVersion)" -ForegroundColor Green
} else {
    Write-Host "❌ Node.js n'est pas installé ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# 2. Vérifier npm
Write-Host "`n2. Vérification de npm..." -ForegroundColor Cyan
$npmVersion = npm --version 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "✅ npm est installé (version: $npmVersion)" -ForegroundColor Green
} else {
    Write-Host "❌ npm n'est pas installé ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# 3. Tester l'accès au système de fichiers
Write-Host "`n3. Test d'accès au système de fichiers..." -ForegroundColor Cyan
$testFile = "test-file-$(Get-Date -Format 'yyyyMMddHHmmss').txt"
try {
    "Test d'écriture" | Out-File -FilePath $testFile -Encoding utf8
    if (Test-Path $testFile) {
        Write-Host "✅ Écriture de fichier réussie" -ForegroundColor Green
        Remove-Item $testFile -Force
    } else {
        Write-Host "❌ Impossible d'écrire des fichiers" -ForegroundColor Red
    }
} catch {
    Write-Host "❌ Erreur lors de l'accès au système de fichiers: $_" -ForegroundColor Red
}

# 4. Tester l'exécution d'un script Node.js
Write-Host "`n4. Test d'exécution de script Node.js..." -ForegroundColor Cyan
$testScript = @"
console.log('Test d\'exécution réussi!');
console.log('Node.js version:', process.version);
console.log('Plateforme:', process.platform, process.arch);
"@

$testFile = "test-script-$(Get-Date -Format 'yyyyMMddHHmmss').js"
try {
    $testScript | Out-File -FilePath $testFile -Encoding utf8
    $output = node $testFile 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✅ Script exécuté avec succès:" -ForegroundColor Green
        $output | ForEach-Object { Write-Host "   $_" }
    } else {
        Write-Host "❌ Échec de l'exécution du script" -ForegroundColor Red
        $output | ForEach-Object { Write-Host "   $_" }
    }
    Remove-Item $testFile -Force -ErrorAction SilentlyContinue
} catch {
    Write-Host "❌ Erreur lors de l'exécution du script: $_" -ForegroundColor Red
    if (Test-Path $testFile) {
        Remove-Item $testFile -Force -ErrorAction SilentlyContinue
    }
}

# 5. Vérifier les fichiers du projet
Write-Host "`n5. Vérification des fichiers du projet..." -ForegroundColor Cyan
$requiredFiles = @("package.json", "app.json", "drivers")
$allFilesExist = $true

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        $type = (Get-Item $file).GetType().Name
        Write-Host "✅ $file trouvé ($type)" -ForegroundColor Green
    } else {
        Write-Host "❌ $file est manquant" -ForegroundColor Red
        $allFilesExist = $false
    }
}

# 6. Installer les dépendances si nécessaire
if ($allFilesExist) {
    Write-Host "`n6. Installation des dépendances..." -ForegroundColor Cyan
    if (Test-Path "node_modules") {
        Write-Host "   Le dossier node_modules existe déjà" -ForegroundColor Yellow
    } else {
        try {
            $output = npm install 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Dépendances installées avec succès" -ForegroundColor Green
            } else {
                Write-Host "❌ Erreur lors de l'installation des dépendances" -ForegroundColor Red
                $output | ForEach-Object { Write-Host "   $_" }
            }
        } catch {
            Write-Host "❌ Erreur lors de l'installation des dépendances: $_" -ForegroundColor Red
        }
    }
}

# Fin du script
Write-Host "`n=== Test terminé ===" -ForegroundColor Green
Write-Host "Appuyez sur une touche pour continuer..."
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
