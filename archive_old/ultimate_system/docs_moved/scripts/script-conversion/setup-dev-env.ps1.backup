# Script de configuration de l'environnement de développement
# Auteur: Assistant IA
# Date: 2025-09-01

# Fonction pour afficher les messages d'information
function Write-Info($message) {
    Write-Host "[INFO] $message" -ForegroundColor Cyan
}

# Fonction pour afficher les messages de succès
function Write-Success($message) {
    Write-Host "[SUCCÈS] $message" -ForegroundColor Green
}

# Fonction pour afficher les messages d'erreur
function Write-ErrorMsg($message) {
    Write-Host "[ERREUR] $message" -ForegroundColor Red
}

# Fonction pour vérifier si une commande existe
function Test-Command($command) {
    try {
        $null = Get-Command $command -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

# Début du script
Write-Host "=== Configuration de l'environnement de développement ===" -ForegroundColor Green
Write-Host "Ce script va configurer votre environnement pour exécuter les scripts de scan."
Write-Host "------------------------------------------------------"

# 1. Vérifier et installer Node.js
Write-Info "Vérification de Node.js..."
if (Test-Command "node") {
    $nodeVersion = (node --version).Trim()
    Write-Success "Node.js est installé (version $nodeVersion)"
    
    # Vérifier la version de Node.js
    $majorVersion = [int]($nodeVersion -replace '^v(\d+)\.\d+\.\d+$', '$1')
    if ($majorVersion -lt 14) {
        Write-ErrorMsg "Node.js version $nodeVersion est trop ancienne. Version 14 ou supérieure requise."
        Write-Host "Veuillez mettre à jour Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
        exit 1
    }
} else {
    Write-ErrorMsg "Node.js n'est pas installé ou n'est pas dans le PATH"
    Write-Host "Veuillez installer Node.js depuis https://nodejs.org/ et réessayer" -ForegroundColor Yellow
    exit 1
}

# 2. Vérifier et mettre à jour npm
Write-Info "Vérification de npm..."
if (Test-Command "npm") {
    $npmVersion = (npm --version).Trim()
    Write-Success "npm est installé (version $npmVersion)"
    
    # Mettre à jour npm
    Write-Info "Mise à jour de npm..."
    npm install -g npm@latest
    $npmVersion = (npm --version).Trim()
    Write-Success "npm a été mis à jour vers la version $npmVersion"
} else {
    Write-ErrorMsg "npm n'est pas installé ou n'est pas dans le PATH"
    exit 1
}

# 3. Installer les dépendances globales
Write-Info "Installation des dépendances globales..."
$globalDeps = @("yarn", "homey", "eslint", "prettier")

foreach ($dep in $globalDeps) {
    if (-not (Test-Command $dep)) {
        Write-Info "Installation de $dep..."
        npm install -g $dep
        if ($LASTEXITCODE -ne 0) {
            Write-ErrorMsg "Échec de l'installation de $dep"
        } else {
            Write-Success "$dep a été installé avec succès"
        }
    } else {
        Write-Success "$dep est déjà installé"
    }
}

# 4. Installer les dépendances du projet
Write-Info "Installation des dépendances du projet..."
Set-Location $PSScriptRoot

if (Test-Path "package.json") {
    # Sauvegarder le fichier package-lock.json existant
    if (Test-Path "package-lock.json") {
        $backupName = "package-lock.json.backup.$(Get-Date -Format 'yyyyMMddHHmmss')"
        Copy-Item "package-lock.json" $backupName
        Write-Info "Sauvegarde de package-lock.json créée: $backupName"
    }
    
    # Supprimer le dossier node_modules s'il existe
    if (Test-Path "node_modules") {
        Write-Info "Suppression de l'ancien dossier node_modules..."
        Remove-Item -Recurse -Force "node_modules"
    }
    
    # Installer les dépendances
    Write-Info "Installation des dépendances avec npm..."
    npm install
    
    if ($LASTEXITCODE -ne 0) {
        Write-ErrorMsg "Échec de l'installation des dépendances"
        exit 1
    }
    
    Write-Success "Les dépendances ont été installées avec succès"
} else {
    Write-ErrorMsg "Le fichier package.json est introuvable"
    exit 1
}

# 5. Vérifier la configuration du projet
Write-Info "Vérification de la configuration du projet..."

# Vérifier si le répertoire drivers existe
if (-not (Test-Path "drivers")) {
    Write-ErrorMsg "Le répertoire 'drivers' est introuvable"
    exit 1
}

# Vérifier si le fichier app.json existe
if (-not (Test-Path "app.json")) {
    Write-ErrorMsg "Le fichier 'app.json' est introuvable"
    exit 1
}

Write-Success "La configuration du projet est valide"

# 6. Exécuter un test simple
Write-Info "Exécution d'un test simple..."
$testFile = "test-simple.js"
@"
// Test simple de l'environnement Node.js
console.log('=== Test d\'environnement réussi ===');
console.log('Node.js version:', process.version);
console.log('Plateforme:', process.platform, process.arch);
console.log('Répertoire courant:', process.cwd());
console.log('Variables d\'environnement:');
console.log('- NODE_ENV:', process.env.NODE_ENV || 'non défini');
console.log('=== Fin du test ===');
"@ | Out-File -FilePath $testFile -Encoding utf8

node $testFile
Remove-Item $testFile

# Fin du script
Write-Host "\n=== Configuration terminée avec succès ===" -ForegroundColor Green
Write-Host "Vous pouvez maintenant exécuter les scripts de scan avec les commandes suivantes:"
Write-Host "- npm run scan:scout     # Pour l'analyse des datapoints"
Write-Host "- npm run scan:architect # Pour l'analyse de l'architecture"
Write-Host "- npm run scan:full      # Pour une analyse complète"
Write-Host "\nPour plus d'informations, consultez le fichier README.md"

# Ajouter une pause pour que l'utilisateur puisse voir les résultats
Write-Host "\nAppuyez sur une touche pour continuer..."
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
