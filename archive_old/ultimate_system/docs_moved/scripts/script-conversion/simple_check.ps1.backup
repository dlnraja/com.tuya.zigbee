# Simple Project Check Script
Write-Host "=== Tuya Zigbee Project Check ===" -ForegroundColor Cyan

# Basic system info
Write-Host "`n[System Info]" -ForegroundColor Green
Write-Host "OS: $([System.Environment]::OSVersion.VersionString)"
Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
Write-Host "Current Directory: $(Get-Location)"

# Check Node.js and npm
Write-Host "`n[Node.js Check]" -ForegroundColor Green
try {
    $nodeVersion = node --version
    $npmVersion = npm --version
    Write-Host "Node.js: $nodeVersion"
    Write-Host "npm: $npmVersion"
} catch {
    Write-Host "Node.js or npm not found. Please install Node.js from https://nodejs.org/" -ForegroundColor Red
    exit 1
}

# Check project structure
Write-Host "`n[Project Structure]" -ForegroundColor Green
$driversDir = Join-Path $PSScriptRoot "drivers"
if (Test-Path $driversDir) {
    $driverCount = (Get-ChildItem -Path $driversDir -Directory).Count
    Write-Host "Found $driverCount driver directories"
    
    # Check a sample of drivers
    $sampleDrivers = Get-ChildItem -Path $driversDir -Directory | Select-Object -First 5
    Write-Host "`nSample drivers:"
    foreach ($driver in $sampleDrivers) {
        $hasDeviceJs = Test-Path (Join-Path $driver.FullName "device.js")
        $hasDriverJs = Test-Path (Join-Path $driver.FullName "driver.js")
        $hasCompose = Test-Path (Join-Path $driver.FullName "driver.compose.json")
        Write-Host "- $($driver.Name): " -NoNewline
        Write-Host "device.js:$($hasDeviceJs) " -NoNewline -ForegroundColor $(if ($hasDeviceJs) { 'Green' } else { 'Red' })
        Write-Host "driver.js:$($hasDriverJs) " -NoNewline -ForegroundColor $(if ($hasDriverJs) { 'Green' } else { 'Red' })
        Write-Host "compose.json:$($hasCompose)" -ForegroundColor $(if ($hasCompose) { 'Green' } else { 'Red' })
    }
} else {
    Write-Host "Drivers directory not found at: $driversDir" -ForegroundColor Red
}

# Check package.json
Write-Host "`n[Package.json]" -ForegroundColor Green
$packageJsonPath = Join-Path $PSScriptRoot "package.json"
if (Test-Path $packageJsonPath) {
    $packageJson = Get-Content -Path $packageJsonPath -Raw | ConvertFrom-Json
    Write-Host "Name: $($packageJson.name)"
    Write-Host "Version: $($packageJson.version)"
    Write-Host "Dependencies: $(($packageJson.dependencies.PSObject.Properties | Measure-Object).Count)"
    Write-Host "Dev Dependencies: $(($packageJson.devDependencies.PSObject.Properties | Measure-Object).Count)"
    
    # List available scripts
    Write-Host "`nAvailable Scripts:"
    $packageJson.scripts.PSObject.Properties | ForEach-Object {
        Write-Host "- $($_.Name): $($_.Value)"
    }
} else {
    Write-Host "package.json not found" -ForegroundColor Red
}

# Check for CI/CD files
Write-Host "`n[CI/CD Configuration]" -ForegroundColor Green
$workflowsDir = Join-Path $PSScriptRoot ".github\workflows"
if (Test-Path $workflowsDir) {
    $workflows = Get-ChildItem -Path $workflowsDir -Filter "*.yml" -File
    Write-Host "Found $($workflows.Count) workflow files:"
    $workflows | ForEach-Object { Write-Host "- $($_.Name)" }
} else {
    Write-Host "No CI/CD workflow files found" -ForegroundColor Yellow
}

# Recommendations
Write-Host "`n[Recommendations]" -ForegroundColor Cyan
Write-Host "1. Run 'npm install' to install dependencies"
Write-Host "2. Run 'npm run build' to build the project"
Write-Host "3. Run 'npm test' to execute tests"
Write-Host "4. Check the README.md for project-specific instructions"

Write-Host "`n=== Check Complete ===" -ForegroundColor Cyan
