# Fix App.json Images Script PowerShell
# Corrige automatiquement les chemins d'images dans app.json

Write-Host "üîß Correction des chemins d'images dans app.json..." -ForegroundColor Blue

if (!(Test-Path "app.json")) {
    Write-Host "‚ùå app.json non trouv√©" -ForegroundColor Red
    exit 1
}

try {
    $appJson = Get-Content "app.json" | ConvertFrom-Json
    $updated = $false
    $imagesFixed = 0
    $driversProcessed = 0

    # Correction des images principales de l'app
    if ($appJson.images) {
        if ($appJson.images.small -and $appJson.images.small -eq "small.png") {
            $appJson.images.small = "assets/small.png"
            $updated = $true
            $imagesFixed++
            Write-Host "‚úÖ Image principale small corrig√©e" -ForegroundColor Green
        }
        if ($appJson.images.large -and $appJson.images.large -eq "large.png") {
            $appJson.images.large = "assets/large.png"
            $updated = $true
            $imagesFixed++
            Write-Host "‚úÖ Image principale large corrig√©e" -ForegroundColor Green
        }
    }

    # Correction des images des drivers
    if ($appJson.drivers -and $appJson.drivers.Count -gt 0) {
        Write-Host "üìÅ Traitement de $($appJson.drivers.Count) drivers..." -ForegroundColor Yellow
        
        for ($i = 0; $i -lt $appJson.drivers.Count; $i++) {
            $driver = $appJson.drivers[$i]
            if ($driver.images) {
                $driverUpdated = $false
                
                # Correction image small
                if ($driver.images.small -and $driver.images.small -eq "small.png") {
                    $driver.images.small = "small.png" # Garder le chemin relatif pour les drivers
                    $driverUpdated = $true
                }
                
                # Correction image large
                if ($driver.images.large -and $driver.images.large -eq "large.png") {
                    $driver.images.large = "large.png" # Garder le chemin relatif pour les drivers
                    $driverUpdated = $true
                }
                
                if ($driverUpdated) {
                    $imagesFixed++
                    $driversProcessed++
                }
            }
        }
        
        if ($driversProcessed -gt 0) {
            $updated = $true
            Write-Host "‚úÖ $driversProcessed drivers trait√©s" -ForegroundColor Green
        }
    }

    # Sauvegarder si modifi√©
    if ($updated) {
        $appJson | ConvertTo-Json -Depth 10 | Set-Content "app.json"
        Write-Host "‚úÖ app.json sauvegard√©" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Aucune correction n√©cessaire" -ForegroundColor Yellow
    }

    # V√©rification des images des drivers
    Write-Host "`nüîç V√©rification des images des drivers..." -ForegroundColor Blue
    
    $missingImages = 0
    if ($appJson.drivers -and $appJson.drivers.Count -gt 0) {
        for ($i = 0; $i -lt $appJson.drivers.Count; $i++) {
            $driver = $appJson.drivers[$i]
            if ($driver.images) {
                # V√©rifier image small
                if ($driver.images.small) {
                    $imagePath = Join-Path "drivers" ($driver.id ?? "driver-$i") $driver.images.small
                    if (!(Test-Path $imagePath)) {
                        $missingImages++
                        Write-Host "‚ùå Image manquante: $imagePath" -ForegroundColor Red
                    }
                }
                
                # V√©rifier image large
                if ($driver.images.large) {
                    $imagePath = Join-Path "drivers" ($driver.id ?? "driver-$i") $driver.images.large
                    if (!(Test-Path $imagePath)) {
                        $missingImages++
                        Write-Host "‚ùå Image manquante: $imagePath" -ForegroundColor Red
                    }
                }
            }
        }
    }

    if ($missingImages -eq 0) {
        Write-Host "‚úÖ Toutes les images des drivers sont pr√©sentes" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $missingImages image(s) manquante(s)" -ForegroundColor Red
    }

    # Affichage des statistiques
    Write-Host "`nüìä RAPPORT DE CORRECTION APP.JSON" -ForegroundColor Green
    Write-Host "==================================" -ForegroundColor Green
    Write-Host "Drivers trait√©s: $driversProcessed" -ForegroundColor Blue
    Write-Host "Images corrig√©es: $imagesFixed" -ForegroundColor Green
    Write-Host "Images manquantes: $missingImages" -ForegroundColor Red

    if ($missingImages -eq 0) {
        Write-Host "`nüéâ Correction des images app.json termin√©e avec succ√®s !" -ForegroundColor Green
        exit 0
    } else {
        Write-Host "`n‚ö†Ô∏è  Correction termin√©e avec des avertissements" -ForegroundColor Yellow
        exit 1
    }

} catch {
    Write-Host "‚ùå Erreur correction app.json: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
