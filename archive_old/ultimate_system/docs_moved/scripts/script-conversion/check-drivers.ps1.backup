# Script PowerShell pour v√©rifier la structure des drivers
Write-Host "=== V√âRIFICATION DES DRIVERS TUYA ZIGBEE ===`n" -ForegroundColor Cyan

# V√©rifier le dossier des drivers
$driversPath = Join-Path $PSScriptRoot "drivers"

if (-not (Test-Path $driversPath)) {
    Write-Host "‚ùå Le dossier des drivers est introuvable: $driversPath" -ForegroundColor Red
    exit 1
}

# Compter les dossiers de drivers
$driverDirs = Get-ChildItem -Path $driversPath -Directory
$driverCount = $driverDirs.Count

Write-Host "üì¶ $driverCount dossiers de drivers trouv√©s`n" -ForegroundColor Green

# Analyser les 5 premiers dossiers
Write-Host "üîç Analyse des 5 premiers dossiers de drivers :`n" -ForegroundColor Cyan

$driverDirs | Select-Object -First 5 | ForEach-Object {
    $driverName = $_.Name
    $driverPath = $_.FullName
    $configPath = Join-Path $driverPath "driver.compose.json"
    
    Write-Host "üìÇ $driverName" -ForegroundColor Yellow
    
    # V√©rifier le fichier de configuration
    if (Test-Path $configPath) {
        try {
            $config = Get-Content $configPath -Raw | ConvertFrom-Json
            
            # Afficher les informations de base
            $id = $config.id
            $name = if ($config.name) { $config.name.en } else { "Non d√©fini" }
            $class = $config.class
            
            Write-Host "   - ID: $id"
            Write-Host "   - Nom: $name"
            Write-Host "   - Classe: $class"
            
            # V√©rifier les ic√¥nes
            if ($config.images) {
                $smallIcon = Join-Path $driverPath $config.images.small
                $largeIcon = Join-Path $driverPath $config.images.large
                
                $smallExists = Test-Path $smallIcon
                $largeExists = Test-Path $largeIcon
                
                Write-Host "   - Ic√¥ne petite: $($smallExists ? '‚úÖ' : '‚ùå') $($config.images.small)"
                Write-Host "   - Ic√¥ne grande: $($largeExists ? '‚úÖ' : '‚ùå') $($config.images.large)"
            } else {
                Write-Host "   - Aucune ic√¥ne configur√©e" -ForegroundColor Yellow
            }
            
            # V√©rifier les capacit√©s
            if ($config.capabilities -and $config.capabilities.Count -gt 0) {
                Write-Host "   - Capacit√©s: $($config.capabilities -join ', ')"
            } else {
                Write-Host "   - Aucune capacit√© d√©finie" -ForegroundColor Yellow
            }
            
        } catch {
            Write-Host "   ‚ùå Erreur lors de la lecture du fichier de configuration: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "   ‚ùå Fichier de configuration introuvable" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Afficher un r√©sum√©
Write-Host "=== R√âSUM√â ===" -ForegroundColor Cyan
Write-Host "- Dossiers de drivers trouv√©s: $driverCount"
Write-Host "- Pour voir la liste compl√®te des dossiers, utilisez: Get-ChildItem -Path "$driversPath" -Directory"
Write-Host "- Pour analyser un driver sp√©cifique: .\check-driver.ps1 -DriverName 'nom_du_driver'"

Write-Host "`nV√©rification termin√©e." -ForegroundColor Green
