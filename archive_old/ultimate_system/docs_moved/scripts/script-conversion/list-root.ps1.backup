# Script pour lister le contenu du r√©pertoire racine
$root = Get-Item -Path "$PSScriptRoot"

Write-Host "Contenu du r√©pertoire racine ($($root.FullName)):" -ForegroundColor Cyan

# Afficher les dossiers
Write-Host "`nüìÅ SOUS-DOSSIERS:" -ForegroundColor Green
Get-ChildItem -Path $root.FullName -Directory | ForEach-Object {
    $size = (Get-ChildItem -Path $_.FullName -Recurse -File | Measure-Object -Property Length -Sum).Sum
    $sizeMB = if ($size) { [math]::Round($size / 1MB, 2) } else { 0 }
    $fileCount = (Get-ChildItem -Path $_.FullName -Recurse -File).Count
    Write-Host "- $($_.Name) ($fileCount fichiers, ${sizeMB} MB)"
}

# Afficher les fichiers
Write-Host "`nüìÑ FICHIERS RACINES:" -ForegroundColor Green
Get-ChildItem -Path $root.FullName -File | ForEach-Object {
    $sizeKB = [math]::Round($_.Length / 1KB, 2)
    Write-Host "- $($_.Name) (${sizeKB} KB)"
}

# V√©rifier la pr√©sence de dossiers cl√©s
Write-Host "`nüîç V√âRIFICATION DES DOSSIERS CL√âS:" -ForegroundColor Cyan

$requiredDirs = @('drivers', 'scripts', 'assets', 'docs')
foreach ($dir in $requiredDirs) {
    $path = Join-Path $root.FullName $dir
    if (Test-Path $path) {
        $itemCount = (Get-ChildItem -Path $path -Recurse -File).Count
        Write-Host "‚úÖ $dir trouv√© ($itemCount fichiers)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $dir manquant" -ForegroundColor Red
    }
}
