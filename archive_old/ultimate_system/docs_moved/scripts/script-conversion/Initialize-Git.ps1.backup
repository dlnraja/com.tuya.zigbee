# PowerShell script to initialize Git repository and make initial commit

# Configuration
$gitConfig = @{
    UserName = "dlnraja"
    UserEmail = "dylan.rajasekaram@gmail.com"
    RepositoryName = "tuya_repair"
    InitialCommitMessage = "Initial commit: Tuya Zigbee project setup"
}

# Function to write colored output
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Check if Git is installed
try {
    $gitVersion = git --version
    Write-Info "Git version: $gitVersion"
} catch {
    Write-Error "Git is not installed or not in PATH. Please install Git and try again."
    exit 1
}

# Set Git configuration
Write-Info "Configuring Git..."
try {
    git config --global user.name $gitConfig.UserName
    git config --global user.email $gitConfig.UserEmail
    Write-Success "Git global configuration set successfully"
} catch {
    Write-Error "Failed to set Git configuration: $_"
    exit 1
}

# Initialize Git repository if not already initialized
if (-not (Test-Path .git)) {
    Write-Info "Initializing new Git repository..."
    try {
        git init
        Write-Success "Git repository initialized successfully"
    } catch {
        Write-Error "Failed to initialize Git repository: $_"
        exit 1
    }
} else {
    Write-Info "Git repository already initialized"
}

# Add all files
Write-Info "Adding files to Git..."
try {
    git add .
    Write-Success "Files added to Git successfully"
} catch {
    Write-Error "Failed to add files to Git: $_"
    exit 1
}

# Create initial commit
Write-Info "Creating initial commit..."
try {
    git commit -m $gitConfig.InitialCommitMessage
    Write-Success "Initial commit created successfully"
} catch {
    Write-Error "Failed to create initial commit: $_"
    exit 1
}

# Show Git status
Write-Info "Current Git status:"
git status

# Show remote repositories
Write-Info "Remote repositories:"
git remote -v

Write-Host "\nNext steps:" -ForegroundColor Yellow
Write-Host "1. Create a new repository on GitHub"
Write-Host "2. Add the remote repository URL: git remote add origin <repository-url>"
Write-Host "3. Push your changes: git push -u origin main"

Write-Host "\nPress any key to exit..." -NoNewline
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
