# Script de Nettoyage Permanent - √Ä ex√©cuter avant chaque validation

Write-Host "üßπ NETTOYAGE COMPLET ENVIRONNEMENT HOMEY" -ForegroundColor Cyan
Write-Host "=" * 70

# 1. Arr√™ter processus (m√©thode agressive)
Write-Host "`n1. Arr√™t des processus..." -ForegroundColor Yellow
Get-Process | Where-Object {$_.ProcessName -like "*node*" -or $_.ProcessName -like "*homey*"} | Stop-Process -Force -ErrorAction SilentlyContinue
taskkill /F /IM node.exe /T 2>$null | Out-Null
taskkill /F /IM npm.exe /T 2>$null | Out-Null
Start-Sleep -Seconds 3
Write-Host "   ‚úÖ Processus arr√™t√©s" -ForegroundColor Green

# 2. Supprimer fichiers probl√©matiques
Write-Host "`n2. Suppression fichiers probl√©matiques..." -ForegroundColor Yellow
$placeholders = Get-ChildItem -Path "drivers" -Recurse -Filter "*.placeholder" -ErrorAction SilentlyContinue
$specs = Get-ChildItem -Path "drivers" -Recurse -Filter "*-spec.json" -ErrorAction SilentlyContinue
$svgs = Get-ChildItem -Path "drivers" -Recurse -Filter "*.svg" -File -ErrorAction SilentlyContinue | Where-Object { $_.Name -ne "icon.svg" }

$placeholders | Remove-Item -Force
$specs | Remove-Item -Force
$svgs | Remove-Item -Force

Write-Host "   ‚úÖ Supprim√©s: $($placeholders.Count) placeholders, $($specs.Count) specs, $($svgs.Count) SVG" -ForegroundColor Green

# 3. Nettoyer cache Homey (m√©thode Windows CMD)
Write-Host "`n3. Nettoyage cache Homey..." -ForegroundColor Yellow
if (Test-Path ".homeybuild") {
    # Utiliser rmdir Windows (plus robuste que PowerShell pour dossiers bloqu√©s)
    cmd /c "rmdir /s /q .homeybuild" 2>$null | Out-Null
    Start-Sleep -Seconds 2
}
if (Test-Path ".homeycompose") {
    cmd /c "rmdir /s /q .homeycompose" 2>$null | Out-Null
}
# V√©rification
if (-not (Test-Path ".homeybuild") -and -not (Test-Path ".homeycompose")) {
    Write-Host "   ‚úÖ Cache nettoy√© compl√®tement" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è Cache partiellement nettoy√© (peut causer erreurs)" -ForegroundColor Yellow
}
Write-Host "   ‚úÖ Cache nettoy√©" -ForegroundColor Green

# 4. Attendre stabilisation
Write-Host "`n4. Attente stabilisation..." -ForegroundColor Yellow
Start-Sleep -Seconds 3
Write-Host "   ‚úÖ Pr√™t" -ForegroundColor Green

# 5. Build
Write-Host "`n5. Build de l'app..." -ForegroundColor Yellow
homey app build
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Build r√©ussi" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Build √©chou√©" -ForegroundColor Red
    exit 1
}

# 6. Validation
Write-Host "`n6. Validation publish-level..." -ForegroundColor Yellow
homey app validate --level publish
if ($LASTEXITCODE -eq 0) {
    Write-Host "   ‚úÖ Validation r√©ussie" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå Validation √©chou√©e" -ForegroundColor Red
    exit 1
}

Write-Host "`n" + ("=" * 70)
Write-Host "‚úÖ NETTOYAGE ET VALIDATION TERMIN√âS" -ForegroundColor Green
Write-Host ""
Write-Host "Vous pouvez maintenant:" -ForegroundColor Cyan
Write-Host "  1. homey login" -ForegroundColor White
Write-Host "  2. homey app publish" -ForegroundColor White
