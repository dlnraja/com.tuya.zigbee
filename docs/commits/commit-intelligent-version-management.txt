ci: Intelligent version management - manual control with auto-publish

PHILOSOPHY: Manual version increments with intelligent automation

PROBLEM WITH OLD SYSTEM:
❌ Auto-increment caused version conflicts
❌ Generic "Automated release" changelogs
❌ No control over version numbers
❌ Risk of publishing unwanted versions
❌ Race conditions between workflows

NEW INTELLIGENT SYSTEM:
✅ Developer controls version numbers manually
✅ Workflow reads version from app.json
✅ Publishes THAT version without auto-increment
✅ Meaningful changelogs required
✅ No version conflicts
✅ Professional version control

WORKFLOW CHANGES:

OLD (Auto-increment):
```yaml
- name: Update version (Patch)
  uses: athombv/github-action-homey-app-version@master
  with:
    version: patch
    changelog: "Automated release"
```

NEW (Manual control):
```yaml
- name: Get version from app.json
  run: |
    VERSION=$(node -p "require('./app.json').version")
    echo "version=$VERSION" >> $GITHUB_OUTPUT
```

BENEFITS:
1. Full control over version numbers
2. Semantic versioning properly applied
3. Meaningful changelogs for every release
4. Predictable publication process
5. No surprise version increments
6. Professional release management

DOCUMENTATION:
Created comprehensive guide: docs/workflow/VERSION_MANAGEMENT.md
- How to release new versions
- Semantic versioning strategy
- Best practices
- Quick reference
- Examples from current session

RELEASE PROCESS (NEW):
1. Edit app.json → Increment version manually
2. Edit .homeychangelog.json → Add meaningful changelog
3. Commit & push
4. GitHub Actions reads version and publishes it
5. No auto-increment, no conflicts

EXAMPLE:
Version 3.1.9 will be published as-is, not auto-incremented to 3.1.10

WORKFLOW PIPELINE:
1. update-docs → Auto-update links, paths
2. validate → Validate at publish level
3. version → READ current version (no modification)
4. publish → Publish that exact version

SEMANTIC VERSIONING APPLIED:
- MAJOR (3.x.x): Breaking changes, SDK upgrades
- MINOR (x.1.x): New features, bulk drivers
- PATCH (x.x.9): Bug fixes, small improvements

RESULT:
✅ Professional version control
✅ Meaningful release notes
✅ No conflicts or race conditions
✅ Predictable and reliable
✅ Developer-friendly workflow

This approach gives us full control while maintaining automation benefits.
