{
  "timestamp": "2025-10-16T14:09:00.568Z",
  "stats": {
    "driversAnalyzed": 183,
    "flowCardsFound": 0,
    "issuesFound": 0,
    "issuesFixed": 0,
    "recommendations": []
  },
  "recommendations": [],
  "bestPractices": {
    "triggers": {
      "deviceSpecific": true,
      "requireTokens": [
        "button_pressed",
        "scene_activated",
        "alarm_triggered"
      ],
      "tokenFormat": {
        "id": "string_snake_case",
        "type": "string|number|boolean|image",
        "title": "object_multilang"
      }
    },
    "actions": {
      "requireListener": true,
      "commonArguments": [
        "duration",
        "value",
        "mode",
        "temperature"
      ],
      "returnType": "void"
    },
    "conditions": {
      "returnType": "boolean",
      "requireListener": true,
      "namingPattern": {}
    },
    "deviceCards": {
      "location": "drivers/<driver_id>/driver.flow.compose.json",
      "useFilters": true,
      "multiButton": {
        "tokens": [
          "button"
        ],
        "title": "Button [button] pressed"
      }
    }
  },
  "commonIssues": {
    "button_triggers": {
      "issue": "Button triggers sans token button ID",
      "fix": "Ajouter token { id: \"button\", type: \"string\", title: { en: \"Button\" } }",
      "example": {
        "wrong": {
          "id": "button_pressed",
          "title": {
            "en": "Button pressed"
          }
        },
        "correct": {
          "id": "button_pressed",
          "title": {
            "en": "Button pressed"
          },
          "tokens": [
            {
              "id": "button",
              "type": "string",
              "title": {
                "en": "Button"
              }
            },
            {
              "id": "action",
              "type": "string",
              "title": {
                "en": "Action"
              }
            }
          ]
        }
      }
    },
    "missing_listeners": {
      "issue": "Flow cards sans registerRunListener dans device.js",
      "fix": "Ajouter registerRunListener pour chaque card",
      "example": "\n// In driver.js or app.js\nconst buttonPressedTrigger = this.homey.flow.getDeviceTriggerCard('button_pressed');\n\n// In device.js\nthis.driver.buttonPressedTrigger\n  .trigger(this, { button: '1', action: 'single' })\n  .catch(this.error);\n"
    },
    "wrong_trigger_method": {
      "issue": "Utilisation getTriggerCard() au lieu de getDeviceTriggerCard()",
      "fix": "Use getDeviceTriggerCard() pour device-specific triggers",
      "example": "\n// WRONG\nconst trigger = this.homey.flow.getTriggerCard('button_pressed');\n\n// CORRECT\nconst trigger = this.homey.flow.getDeviceTriggerCard('button_pressed');\ntrigger.trigger(device, tokens, state);\n"
    },
    "missing_args_device": {
      "issue": "Device card sans args device filter",
      "fix": "Ajouter args avec device filter",
      "example": {
        "wrong": {
          "id": "set_mode",
          "title": {
            "en": "Set mode"
          }
        },
        "correct": {
          "id": "set_mode",
          "title": {
            "en": "Set mode"
          },
          "args": [
            {
              "name": "device",
              "type": "device",
              "filter": "driver_id=my_driver"
            },
            {
              "name": "mode",
              "type": "dropdown",
              "values": [
                {
                  "id": "auto",
                  "label": {
                    "en": "Auto"
                  }
                },
                {
                  "id": "manual",
                  "label": {
                    "en": "Manual"
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "condition_not_boolean": {
      "issue": "Condition card return non-boolean",
      "fix": "registerRunListener doit return true/false",
      "example": "\n// WRONG\nconditionCard.registerRunListener(async (args) => {\n  return 'yes'; // String, pas boolean!\n});\n\n// CORRECT\nconditionCard.registerRunListener(async (args) => {\n  const isOn = await args.device.getCapabilityValue('onoff');\n  return Boolean(isOn); // Boolean requis\n});\n"
    }
  }
}