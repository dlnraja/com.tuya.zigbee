{
  "working_patterns": [
    {
      "category": "Temperature Sensing",
      "cluster": 1026,
      "pattern": "registerCapability(measure_temperature, 1026) with reportParser: value => value / 100",
      "evidence": "Peter reports: Temperature 13.6°C → 14.6°C (working perfectly)",
      "status": "✅ WORKING"
    },
    {
      "category": "Humidity Sensing",
      "cluster": 1029,
      "pattern": "registerCapability(measure_humidity, 1029) with reportParser: value => value / 100",
      "evidence": "Peter reports: Humidity 91.6% → 89.1% (accurate measurements)",
      "status": "✅ WORKING"
    },
    {
      "category": "Illuminance Sensing",
      "cluster": 1024,
      "pattern": "registerCapability(measure_luminance, 1024) with proper lux calculation",
      "evidence": "Peter reports: Illuminance 2566 lux → 2692 lux (light sensor functional)",
      "status": "✅ WORKING"
    },
    {
      "category": "Battery Monitoring",
      "cluster": 1,
      "pattern": "registerCapability(measure_battery, 1) with reportParser: value => value / 2",
      "evidence": "Peter reports: Battery 100% → 75% (correct reading from 200 to 150 raw)",
      "status": "✅ WORKING"
    }
  ],
  "improvements_needed": [
    {
      "category": "IAS Zone Enrollment",
      "cluster": 1280,
      "issue": "Motion detection always false, SOS button not working",
      "root_cause": "endpoint.clusters.iasZone.write is not a function (SDK3 incompatibility)",
      "fix_required": "Use writeAttributes + zoneStatusChangeNotification listener",
      "priority": "🔴 CRITICAL",
      "status": "⚠️ NEEDS FIX"
    },
    {
      "category": "Device Images",
      "issue": "Black square icons instead of proper device images",
      "root_cause": "Image paths incorrect or images missing from assets/",
      "fix_required": "Verify all driver assets have small.png/large.png/xlarge.png",
      "priority": "🟡 MEDIUM",
      "status": "⚠️ NEEDS FIX"
    }
  ],
  "sdk3_best_practices": [
    {
      "practice": "Always use numeric cluster IDs (not CLUSTER constants)",
      "example": "registerCapability(\"measure_temperature\", 1026, {...})",
      "reason": "SDK3 requires numeric IDs, CLUSTER.* deprecated"
    },
    {
      "practice": "Configure attribute reporting with optimal intervals",
      "example": "reportOpts: { configureAttributeReporting: { minInterval: 60, maxInterval: 3600, minChange: 10 }}",
      "reason": "Ensures timely updates without battery drain"
    },
    {
      "practice": "Use proper reportParser for unit conversion",
      "example": "reportParser: value => value / 100 for temperature (centidegrees → celsius)",
      "reason": "Devices report raw values that need conversion"
    },
    {
      "practice": "Always add .catch() to promises in onNodeInit",
      "example": "await super.onNodeInit().catch(err => this.error(err))",
      "reason": "Prevents device becoming unavailable on errors"
    },
    {
      "practice": "Set getOnStart: true for immediate initial values",
      "example": "getOpts: { getOnStart: true }",
      "reason": "Shows data immediately after pairing, not after first report"
    }
  ],
  "critical_fixes": [
    {
      "title": "IAS Zone SDK3 Compatibility",
      "description": "Rewrite IAS Zone enrollment using SDK3 APIs",
      "implementation": "\n// Correct SDK3 IAS Zone enrollment\nasync setupIASZone() {\n  const endpoint = this.zclNode.endpoints[1];\n  \n  if (!endpoint?.clusters[1280]) return;\n  \n  try {\n    // 1. Write CIE Address\n    await endpoint.clusters[1280].writeAttributes({\n      iasCIEAddress: this.homey.zigbee.ieee\n    });\n    \n    // 2. Listen for zone status changes\n    endpoint.clusters[1280].on('zoneStatusChangeNotification', (notification) => {\n      const alarm = notification.zoneStatus.alarm1 === 1;\n      this.setCapabilityValue('alarm_motion', alarm).catch(this.error);\n    });\n    \n    // 3. Send zone enroll response\n    this.zclNode.endpoints[1].clusters[1280].onZoneEnrollRequest = () => {\n      return this.zclNode.endpoints[1].clusters[1280].zoneEnrollResponse({\n        enrollResponseCode: 0,\n        zoneId: 10\n      });\n    };\n    \n    // 4. Proactive enroll response (might miss request during pairing)\n    await endpoint.clusters[1280].zoneEnrollResponse({\n      enrollResponseCode: 0,\n      zoneId: 10\n    }).catch(() => {});\n    \n  } catch (err) {\n    this.error('IAS Zone setup failed:', err);\n  }\n}",
      "affected_drivers": [
        "motion_sensor_*",
        "sos_emergency_button",
        "smoke_detector_*",
        "gas_detector_*",
        "water_leak_sensor"
      ],
      "impact": "🔴 HIGH - Motion detection and alarm devices"
    },
    {
      "title": "Image Path Verification",
      "description": "Ensure all drivers have proper image assets",
      "implementation": "\n// Check and fix image paths\nconst requiredImages = ['small.png', 'large.png', 'xlarge.png'];\nconst assetsPath = path.join(driverPath, 'assets', 'images');\n\nfor (const image of requiredImages) {\n  const imagePath = path.join(assetsPath, image);\n  if (!fs.existsSync(imagePath)) {\n    console.error('Missing image:', imagePath);\n    // Generate placeholder or copy from template\n  }\n}",
      "affected_drivers": "ALL drivers with missing images",
      "impact": "🟡 MEDIUM - User interface quality"
    },
    {
      "title": "Battery Type Auto-Detection",
      "description": "Intelligent battery type detection from voltage",
      "implementation": "\nasync detectBatteryType() {\n  const voltage = await this.readBatteryVoltage();\n  \n  if (voltage >= 2800 && voltage <= 3200) {\n    return 'CR2032'; // 3V button cell\n  } else if (voltage >= 1300 && voltage <= 1600) {\n    return 'AA'; // 1.5V\n  } else if (voltage >= 1200 && voltage <= 1500) {\n    return 'AAA'; // 1.5V\n  }\n  \n  return 'UNKNOWN';\n}",
      "affected_drivers": "ALL battery-powered sensors",
      "impact": "🟢 LOW - Nice to have improvement"
    }
  ]
}