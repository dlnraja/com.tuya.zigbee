{
  "totalLogs": 5174,
  "totalErrors": 3613,
  "driversWithExcessiveLogs": [
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "logs": 31,
      "errors": 18
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "logs": 37,
      "errors": 13
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "logs": 32,
      "errors": 20
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "logs": 32,
      "errors": 20
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "logs": 32,
      "errors": 20
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "logs": 35,
      "errors": 12
    }
  ],
  "logsInListeners": [],
  "unconditionalLogs": [
    {
      "driver": "aqara_motion_sensor_pir_basic_ac",
      "line": 27,
      "content": "this.log('Presence Sensor FP2 (Zones) initialized');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 27,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 29,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 55,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 72,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 119,
      "content": "this.log('Motion sensor with illuminance initialized');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 133,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 139,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 148,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 155,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 167,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 205,
      "content": "this.log('Motion sensor with illuminance deleted');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 222,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 293,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 301,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 309,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 317,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 325,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_cr2450",
      "line": 332,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_other",
      "line": 27,
      "content": "this.log('Presence Sensor FP1 (Advanced) initialized');"
    },
    {
      "driver": "aqara_motion_sensor_pir_basic_other",
      "line": 33,
      "content": "this.log('Battery percentage:', percentage + '%');"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_smoke_detector_basic_cr123a",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_display_battery",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 52,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 54,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 80,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 97,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 144,
      "content": "this.log('temperature_humidity_sensor device initialized');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 156,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 167,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 178,
      "content": "this.log('✅ Humidity capability registered');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 187,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 192,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 244,
      "content": "this.log('✅ Attribute reporting configured');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 263,
      "content": "this.log(`🔋 Attempting battery read (attempt ${attempt}/${retries})...`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 272,
      "content": "this.log(`✅ Battery read successful: ${percentage}% (raw: ${rawValue})`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 276,
      "content": "this.log(`⚠️  Battery read attempt ${attempt} failed:`, error.message);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 283,
      "content": "this.log('❌ All battery read attempts failed - will retry on next report');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 294,
      "content": "this.log('temperature_humidity_sensor device deleted');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 311,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 498,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 521,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 524,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 536,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 547,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 569,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 577,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 585,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 593,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 601,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "aqara_temperature_humidity_sensor_battery",
      "line": 608,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 49,
      "content": "this.log('led_strip_controller_ac initialized');"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 104,
      "content": "this.log('led_strip_controller_ac deleted');"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_led_strip_basic_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 11,
      "content": "this.log('extension_plug device initialized');"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 27,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 44,
      "content": "this.log('extension_plug device deleted');"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 61,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 248,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 271,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 274,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 286,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 314,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 385,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 393,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 401,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 409,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 417,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_plug_basic_ac",
      "line": 424,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 29,
      "content": "this.log('smart_plug device initialized');"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 45,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 62,
      "content": "this.log('smart_plug device deleted');"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 79,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 266,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 289,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 292,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 304,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 315,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 332,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 403,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 411,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 419,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 427,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 435,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_ac",
      "line": 442,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_energy_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 38,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 55,
      "content": "this.log('smart_plug_power_meter_16a_ac initialized');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 56,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 67,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 87,
      "content": "this.log('✅ onoff registered');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 101,
      "content": "this.log('✅ measure_power registered');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 115,
      "content": "this.log('✅ measure_voltage registered');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 129,
      "content": "this.log('✅ measure_current registered');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 143,
      "content": "this.log('✅ meter_power registered');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 151,
      "content": "this.log('smart_plug_power_meter_16a_ac deleted');"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 164,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 235,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 243,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 251,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 259,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 267,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_smart_plug_power_meter_16a_ac",
      "line": 274,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 128,
      "content": "this.log('thermostat_hybrid initialized');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 128,
      "content": "this.log('thermostat_hybrid initialized');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 128,
      "content": "this.log('thermostat_hybrid initialized');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_hybrid",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 128,
      "content": "this.log('smart_thermostat_hybrid initialized');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "avatto_thermostat_smart_internal",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_contact_sensor_basic_cr2032",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "ikea_shortcut_button_other",
      "line": 27,
      "content": "this.log('Shortcut Button initialized');"
    },
    {
      "driver": "ikea_shortcut_button_other",
      "line": 33,
      "content": "this.log('Battery percentage:', percentage + '%');"
    },
    {
      "driver": "ikea_sound_controller_other",
      "line": 27,
      "content": "this.log('Sound Controller (IKEA) initialized');"
    },
    {
      "driver": "ikea_sound_controller_other",
      "line": 33,
      "content": "this.log('Battery percentage:', percentage + '%');"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "ikea_wireless_button_2gang_cr2032",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "ikea_wireless_switch_4button_other",
      "line": 13,
      "content": "this.log('Remote 4 Button (IKEA) initialized');"
    },
    {
      "driver": "ikea_wireless_switch_4button_other",
      "line": 19,
      "content": "this.log('Battery percentage:', percentage + '%');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 49,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 66,
      "content": "this.log('bulb_color_rgbcct_ac initialized');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 67,
      "content": "this.log('Manufacturer:', this.getData().manufacturerName);"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 68,
      "content": "this.log('Model:', this.getData().productId);"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 80,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 104,
      "content": "this.log('✅ onoff capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 118,
      "content": "this.log('✅ dim capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 132,
      "content": "this.log('✅ light_hue capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 146,
      "content": "this.log('✅ light_saturation capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 160,
      "content": "this.log('✅ light_temperature capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 173,
      "content": "this.log('✅ light_mode capability registered');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 184,
      "content": "this.log('bulb_color_rgbcct_ac deleted');"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 197,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 268,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 276,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 284,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 292,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 300,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_rgb_ac",
      "line": 307,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 49,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 66,
      "content": "this.log('bulb_white_ac initialized');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 67,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 78,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 98,
      "content": "this.log('✅ onoff registered');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 113,
      "content": "this.log('✅ dim registered');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 121,
      "content": "this.log('bulb_white_ac deleted');"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 134,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 205,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 213,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 221,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 229,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 237,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ac",
      "line": 244,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 38,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 55,
      "content": "this.log('bulb_white_ambiance_ac initialized');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 56,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 67,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 87,
      "content": "this.log('✅ onoff registered');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 102,
      "content": "this.log('✅ dim registered');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 117,
      "content": "this.log('✅ light_temperature registered');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 125,
      "content": "this.log('bulb_white_ambiance_ac deleted');"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 138,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 209,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 217,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 225,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 233,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 241,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_bulb_white_ambiance_ac",
      "line": 248,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "lsc_dimmer_wireless_cr2032",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 49,
      "content": "this.log('smart_bulb_tunable_ac initialized');"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 104,
      "content": "this.log('smart_bulb_tunable_ac deleted');"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_tunable_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 128,
      "content": "this.log('outdoor_light_controller_ac initialized');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 128,
      "content": "this.log('outdoor_light_controller_ac initialized');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_bulb_white_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 49,
      "content": "this.log('ceiling_fan_ac initialized');"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 104,
      "content": "this.log('ceiling_fan_ac deleted');"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_fan_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 49,
      "content": "this.log('ceiling_light_rgb_ac initialized');"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 104,
      "content": "this.log('ceiling_light_rgb_ac deleted');"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_ceiling_light_rgb_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 128,
      "content": "this.log('climate_monitor_cr2032 initialized');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 128,
      "content": "this.log('climate_monitor_cr2032 initialized');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_climate_monitor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 128,
      "content": "this.log('co2_temp_humidity_cr2032 initialized');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_co2_temp_humidity_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 31,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 90,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 129,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 316,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 339,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 342,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 354,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 365,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 382,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 453,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 461,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 469,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 477,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 485,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_ac",
      "line": 492,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_1gang_touch_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 25,
      "content": "this.log('dimmer device deleted');"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 42,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 229,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 252,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 255,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 267,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 278,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 295,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 366,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 374,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 382,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 390,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 398,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_ac",
      "line": 405,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_switch_timer_module_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 49,
      "content": "this.log('touch_dimmer_ac initialized');"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 104,
      "content": "this.log('touch_dimmer_ac deleted');"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_dimmer_touch_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 79,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 266,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 289,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 292,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 304,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 315,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 332,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 403,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 411,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 419,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 427,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 435,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_monitoring_plug_advanced_ac",
      "line": 442,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 49,
      "content": "this.log('energy_plug_advanced_ac initialized');"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 104,
      "content": "this.log('energy_plug_advanced_ac deleted');"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_energy_plug_advanced_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 49,
      "content": "this.log('led_strip_advanced_ac initialized');"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 104,
      "content": "this.log('led_strip_advanced_ac deleted');"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_advanced_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 49,
      "content": "this.log('led_strip_controller_pro_ac initialized');"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 104,
      "content": "this.log('led_strip_controller_pro_ac deleted');"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_led_strip_pro_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_mini_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_mini_ac",
      "line": 49,
      "content": "this.log('mini_ac initialized');"
    },
    {
      "driver": "moes_mini_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_mini_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_mini_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_mini_ac",
      "line": 104,
      "content": "this.log('mini_ac deleted');"
    },
    {
      "driver": "moes_mini_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_mini_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 16,
      "content": "this.log('Mini Switch device initialized');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 332,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 334,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 359,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 376,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 412,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 420,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 428,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 436,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_mini_switch_cr2032",
      "line": 443,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_motion_sensor_mmwave_basic_cr2450",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 128,
      "content": "this.log('outdoor_light_controller_ac initialized');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_outdoor_light_controller_ac",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 66,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 253,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 276,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 279,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 291,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 302,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 319,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 390,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 398,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 406,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 414,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 422,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_energy_monitor_ac",
      "line": 429,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_plug_smart_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_power_meter_socket_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 128,
      "content": "this.log('radiator_valve_hybrid initialized');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_radiator_valve_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 16,
      "content": "this.log('Remote Switch device initialized');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 53,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 240,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 263,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 266,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 278,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 289,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 326,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 328,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 353,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 370,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 406,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 414,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 422,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 430,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_remote_switch_cr2032",
      "line": 437,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 49,
      "content": "this.log('smart_bulb_dimmer_ac initialized');"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 104,
      "content": "this.log('smart_bulb_dimmer_ac deleted');"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_dimmer_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 49,
      "content": "this.log('smart_bulb_rgb_ac initialized');"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 104,
      "content": "this.log('smart_bulb_rgb_ac deleted');"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_rgb_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 49,
      "content": "this.log('smart_bulb_white_ac initialized');"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 104,
      "content": "this.log('smart_bulb_white_ac deleted');"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_bulb_white_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 49,
      "content": "this.log('smart_spot_ac initialized');"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 104,
      "content": "this.log('smart_spot_ac deleted');"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_spot_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 16,
      "content": "this.log('Mini Switch device initialized');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 332,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 334,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 359,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 376,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 412,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 420,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 428,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 436,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_aaa",
      "line": 443,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 16,
      "content": "this.log('Mini Switch device initialized');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 332,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 334,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 359,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 376,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 412,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 420,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 428,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 436,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_1gang_cr2032",
      "line": 443,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 11,
      "content": "this.log('smart_switch_2gang_hybrid device initialized');"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 42,
      "content": "this.log('smart_switch_2gang_hybrid device deleted');"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_2gang_hybrid",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 11,
      "content": "this.log('smart_switch_4gang_hybrid device initialized');"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 42,
      "content": "this.log('smart_switch_4gang_hybrid device deleted');"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_4gang_hybrid",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_6gang_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_smart_switch_8gang_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 159,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 161,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 173,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 178,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 184,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 191,
      "content": "this.log('🚨 Setting up SOS button IAS Zone...');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 201,
      "content": "this.log('🔔 SOS Button (attr):', alarmActive);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 216,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 222,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 237,
      "content": "this.log('📡 Homey IEEE:', ieeeAddress);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 243,
      "content": "this.log('✅ IAS CIE Address written (SDK3 method)');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 251,
      "content": "this.log('✅ SOS Button IAS Zone enrollment complete');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 255,
      "content": "this.log('⚠️ Trying IASZoneEnroller fallback...');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 266,
      "content": "this.log(`✅ SOS IAS Zone enrolled via fallback: ${method}`);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 269,
      "content": "this.log('⚠️ Device may auto-enroll');"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 275,
      "content": "this.log('🚨 SOS Button pressed! Alarm:', value);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 281,
      "content": "this.log(`✅ Flow triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 313,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 384,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 392,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 400,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 408,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 416,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_sos_emergency_button_cr2032",
      "line": 423,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_switch_2gang_hybrid",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 128,
      "content": "this.log('co2_temp_humidity_cr2032 initialized');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 128,
      "content": "this.log('co2_temp_humidity_cr2032 initialized');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_temp_humidity_sensor_basic_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 11,
      "content": "this.log('touch_switch_2gang device initialized');"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 42,
      "content": "this.log('touch_switch_2gang device deleted');"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_2gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 11,
      "content": "this.log('touch_switch_4gang device initialized');"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 42,
      "content": "this.log('touch_switch_4gang device deleted');"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_touch_switch_4gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 11,
      "content": "this.log('usb_outlet device initialized');"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 27,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 44,
      "content": "this.log('usb_outlet device deleted');"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 61,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 248,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 271,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 274,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 286,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 314,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 385,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 393,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 401,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 409,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 417,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_ac",
      "line": 424,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 66,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 83,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 270,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 308,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 319,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 336,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 407,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 415,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 423,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 431,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 439,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_usb_outlet_advanced_ac",
      "line": 446,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 28,
      "content": "this.log('wall_switch_2gang_ac device initialized');"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 42,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 59,
      "content": "this.log('wall_switch_2gang_ac device deleted');"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 76,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 263,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 286,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 289,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 301,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 312,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 329,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 400,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 408,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 416,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 424,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 432,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_ac",
      "line": 439,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 11,
      "content": "this.log('wall_switch_2gang_dc device initialized');"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 42,
      "content": "this.log('wall_switch_2gang_dc device deleted');"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_2gang_dc",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 11,
      "content": "this.log('wall_switch_4gang_ac device initialized');"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 42,
      "content": "this.log('wall_switch_4gang_ac device deleted');"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 11,
      "content": "this.log('wall_switch_4gang_dc device initialized');"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 42,
      "content": "this.log('wall_switch_4gang_dc device deleted');"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_4gang_dc",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 49,
      "content": "this.log('wall_switch_5gang_ac initialized');"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 104,
      "content": "this.log('wall_switch_5gang_ac deleted');"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_5gang_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 11,
      "content": "this.log('wall_switch_6gang_ac device initialized');"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 42,
      "content": "this.log('wall_switch_6gang_ac device deleted');"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wall_switch_6gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_2gang_cr2032 device initialized');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_2gang_cr2032 device deleted');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_2gang_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4button_cr2450",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_4gang_cr2032 device initialized');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_4gang_cr2032 device deleted');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_4gang_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_5gang_cr2032 device initialized');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_5gang_cr2032 device deleted');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_5button_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_6gang_cr2032 device initialized');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_6gang_cr2032 device deleted');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_6gang_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 71,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 141,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 152,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 167,
      "content": "this.log('Wireless Switch device initialized');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 203,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 390,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 413,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 416,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 439,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 476,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 478,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 503,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 520,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 556,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 564,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 572,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 580,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "moes_wireless_switch_cr2032",
      "line": 587,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 49,
      "content": "this.log('air_quality_monitor_ac initialized');"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 104,
      "content": "this.log('air_quality_monitor_ac deleted');"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_air_quality_monitor_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 43,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 60,
      "content": "this.log('smart_plug_dimmer_ac initialized');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 61,
      "content": "this.log('Manufacturer:', this.getData().manufacturerName);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 62,
      "content": "this.log('Model:', this.getData().productId);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 74,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 96,
      "content": "this.log('OnOff status:', value);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 101,
      "content": "this.log('Setting onoff to:', value);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 105,
      "content": "this.log('✅ OnOff capability registered');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 119,
      "content": "this.log('Dim level:', dim);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 125,
      "content": "this.log('Setting dim to:', value, '(level:', level, ')');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 132,
      "content": "this.log('✅ Dim capability registered');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 148,
      "content": "this.log('Power measurement:', power, 'W');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 152,
      "content": "this.log('✅ Power measurement capability registered');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 154,
      "content": "this.log('ℹ️  Power measurement not available:', err.message);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 173,
      "content": "this.log('Energy meter:', energy, 'kWh');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 177,
      "content": "this.log('✅ Energy meter capability registered');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 179,
      "content": "this.log('ℹ️  Energy metering not available:', err.message);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 194,
      "content": "this.log('Settings changed:', changedKeys);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 198,
      "content": "this.log(`Setting ${key} changed to:`, newValue);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 205,
      "content": "this.log('Updated transition time:', this.transitionTime);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 214,
      "content": "this.log('Unknown setting:', key);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 253,
      "content": "this.log('✅ Power-on behavior configured:', behavior);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 261,
      "content": "this.log('smart_plug_dimmer_ac deleted');"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 274,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 345,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 353,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 361,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 369,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 377,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_smart_plug_dimmer_ac",
      "line": 384,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 49,
      "content": "this.log('zbbridge_ac initialized');"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 104,
      "content": "this.log('zbbridge_ac deleted');"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zbbridge_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 49,
      "content": "this.log('zigbee_gateway_hub_ac initialized');"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 104,
      "content": "this.log('zigbee_gateway_hub_ac deleted');"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "nous_zigbee_gateway_hub_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_air_conditioner_hybrid",
      "line": 95,
      "content": "this.log('Air conditioner device initialized');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 128,
      "content": "this.log('climate_monitor_cr2032 initialized');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_climate_monitor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 30,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 55,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 73,
      "content": "this.log('EF00(0xEF00) present:', hasEF00Cluster);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 93,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 280,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 303,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 306,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 318,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 329,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 346,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 417,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 425,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 433,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 441,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 449,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_comprehensive_air_monitor_ac",
      "line": 456,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 128,
      "content": "this.log('doorbell_cr2032 initialized');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 128,
      "content": "this.log('doorbell_cr2032 initialized');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_button_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 29,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 46,
      "content": "this.log('doorbell_camera_ac initialized');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 47,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 58,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 77,
      "content": "this.log('✅ alarm_generic registered');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 91,
      "content": "this.log('✅ alarm_motion registered');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 99,
      "content": "this.log('doorbell_camera_ac deleted');"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 112,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 183,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 191,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 199,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 207,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 215,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_camera_ac",
      "line": 222,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 128,
      "content": "this.log('doorbell_cr2032 initialized');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_doorbell_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 161,
      "content": "this.log('door_controller_ac initialized');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_aaa",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 161,
      "content": "this.log('door_controller_ac initialized');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_ac",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 161,
      "content": "this.log('door_controller_ac initialized');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_door_controller_cr2032",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 161,
      "content": "this.log('garage_door_controller_ac initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_aaa",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 161,
      "content": "this.log('garage_door_controller_ac initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_ac",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 161,
      "content": "this.log('garage_door_controller_ac initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_controller_cr2032",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 161,
      "content": "this.log('garage_door_opener_cr2032 initialized');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_aaa",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 161,
      "content": "this.log('garage_door_opener_cr2032 initialized');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_garage_door_opener_cr2032",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 50,
      "content": "this.log('gas_sensor_ts0601_ac initialized');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 70,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 86,
      "content": "this.log('Retrying initialization...');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 99,
      "content": "this.log('AC powered gas sensor - no battery registration needed');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 103,
      "content": "this.log('gas_sensor_ts0601_ac deleted');"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 116,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 187,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 195,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 203,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 211,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 219,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_gas_sensor_ts0601_ac",
      "line": 226,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 128,
      "content": "this.log('humidity_controller_ac initialized');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 128,
      "content": "this.log('humidity_controller_ac initialized');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_ac",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 128,
      "content": "this.log('humidity_controller_ac initialized');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_humidity_controller_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 38,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 55,
      "content": "this.log('led_strip_outdoor_color_ac initialized');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 56,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 67,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 87,
      "content": "this.log('✅ onoff registered');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 102,
      "content": "this.log('✅ dim registered');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 117,
      "content": "this.log('✅ light_hue registered');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 132,
      "content": "this.log('✅ light_saturation registered');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 140,
      "content": "this.log('led_strip_outdoor_color_ac deleted');"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 153,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 224,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 232,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 240,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 248,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 256,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_led_strip_outdoor_color_ac",
      "line": 263,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 128,
      "content": "this.log('outdoor_siren_cr2032 initialized');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_outdoor_siren_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 128,
      "content": "this.log('pet_feeder_cr2032 initialized');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 128,
      "content": "this.log('pet_feeder_cr2032 initialized');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_pet_feeder_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 49,
      "content": "this.log('smart_radiator_valve_hybrid initialized');"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 104,
      "content": "this.log('smart_radiator_valve_hybrid deleted');"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_radiator_valve_smart_hybrid",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 29,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 46,
      "content": "this.log('alarm_siren_chime_ac initialized');"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 47,
      "content": "this.log('Device:', this.getData());"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 58,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 77,
      "content": "this.log('✅ alarm_generic registered');"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 85,
      "content": "this.log('alarm_siren_chime_ac deleted');"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 98,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 169,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 177,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 185,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 193,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 201,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_ac",
      "line": 208,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 128,
      "content": "this.log('outdoor_siren_cr2032 initialized');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 128,
      "content": "this.log('outdoor_siren_cr2032 initialized');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_siren_outdoor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 29,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 54,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 72,
      "content": "this.log('Cluster presence - Level(0x0008):', hasLevelCluster, ' EF00(0xEF00):',"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 93,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 280,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 303,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 306,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 318,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 329,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 346,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 417,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 425,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 433,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 441,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 449,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_1gang_ac",
      "line": 456,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smart_switch_3gang_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 12,
      "content": "this.log('smoke_detector device initialized');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 28,
      "content": "this.log('smoke_detector device deleted');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 45,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 232,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 255,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 258,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 298,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 379,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 381,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 407,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 424,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 460,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 468,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 476,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 484,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_aaa",
      "line": 491,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 12,
      "content": "this.log('smoke_detector device initialized');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 28,
      "content": "this.log('smoke_detector device deleted');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 45,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 232,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 255,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 258,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 298,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 379,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 381,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 407,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 424,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 460,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 468,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 476,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 484,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_basic_cr2032",
      "line": 491,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 12,
      "content": "this.log('smoke_detector device initialized');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 28,
      "content": "this.log('smoke_detector device deleted');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 45,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 232,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 255,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 258,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 298,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 379,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 381,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 407,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 424,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 460,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 468,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 476,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 484,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_smoke_detector_battery",
      "line": 491,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 128,
      "content": "this.log('soil_moisture_sensor_battery initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 128,
      "content": "this.log('soil_moisture_sensor_battery initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 128,
      "content": "this.log('soil_moisture_sensor_battery initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_moisture_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 128,
      "content": "this.log('soil_tester_temp_humid_cr2032 initialized');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_soil_tester_temp_humid_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 128,
      "content": "this.log('tank_level_monitor_cr2032 initialized');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 128,
      "content": "this.log('tank_level_monitor_cr2032 initialized');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_tank_level_monitor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 128,
      "content": "this.log('temperature_controller_hybrid initialized');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 128,
      "content": "this.log('temperature_controller_hybrid initialized');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 128,
      "content": "this.log('temperature_controller_hybrid initialized');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_temperature_controller_hybrid",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 128,
      "content": "this.log('water_valve_hybrid initialized');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 128,
      "content": "this.log('smart_water_valve_hybrid initialized');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 128,
      "content": "this.log('water_valve_smart_hybrid initialized');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "tuya_water_valve_smart_hybrid",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 128,
      "content": "this.log('air_quality_monitor_pro_battery initialized');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_air_quality_monitor_pro_internal",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 49,
      "content": "this.log('ceiling_light_controller_ac initialized');"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 104,
      "content": "this.log('ceiling_light_controller_ac deleted');"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_ceiling_light_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 128,
      "content": "this.log('co2_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 128,
      "content": "this.log('co2_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_basic_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 128,
      "content": "this.log('co2_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co2_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 128,
      "content": "this.log('co_detector_pro_battery initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 128,
      "content": "this.log('co_detector_pro_battery initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 128,
      "content": "this.log('co_detector_pro_battery initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_co_detector_pro_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 12,
      "content": "this.log('curtain_motor device initialized');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 43,
      "content": "this.log('curtain_motor device deleted');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_aaa",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 12,
      "content": "this.log('curtain_motor device initialized');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 43,
      "content": "this.log('curtain_motor device deleted');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_ac",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 12,
      "content": "this.log('curtain_motor device initialized');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 43,
      "content": "this.log('curtain_motor device deleted');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_cr2032",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 16,
      "content": "this.log('Smart Curtain Motor device initialized');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 52,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 239,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 262,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 265,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 277,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 288,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 325,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 327,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 352,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 369,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 405,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 413,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 421,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 429,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_curtain_motor_internal",
      "line": 436,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 128,
      "content": "this.log('smart_doorbell_battery initialized');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_doorbell_button_internal",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 44,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 50,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 57,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 69,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 87,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 89,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 115,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 132,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 179,
      "content": "this.log('door_window_sensor device initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 191,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 202,
      "content": "this.log('✅ Battery capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 214,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 223,
      "content": "this.log('✅ Motion alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 234,
      "content": "this.log('✅ Luminance capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 243,
      "content": "this.log('✅ Contact alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 269,
      "content": "this.log('door_window_sensor device deleted');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 284,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 471,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 494,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 497,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 509,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 520,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 547,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 555,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 563,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 571,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 579,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_aaa",
      "line": 586,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 44,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 50,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 57,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 69,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 87,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 89,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 115,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 132,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 179,
      "content": "this.log('door_window_sensor device initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 191,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 202,
      "content": "this.log('✅ Battery capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 214,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 223,
      "content": "this.log('✅ Motion alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 234,
      "content": "this.log('✅ Luminance capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 243,
      "content": "this.log('✅ Contact alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 269,
      "content": "this.log('door_window_sensor device deleted');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 284,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 471,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 494,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 497,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 509,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 520,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 547,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 555,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 563,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 571,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 579,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_basic_cr2032",
      "line": 586,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 44,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 50,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 57,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 69,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 87,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 89,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 115,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 132,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 179,
      "content": "this.log('door_window_sensor device initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 191,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 202,
      "content": "this.log('✅ Battery capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 214,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 223,
      "content": "this.log('✅ Motion alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 234,
      "content": "this.log('✅ Luminance capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 243,
      "content": "this.log('✅ Contact alarm capability registered');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 269,
      "content": "this.log('door_window_sensor device deleted');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 284,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 471,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 494,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 497,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 509,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 520,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 547,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 555,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 563,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 571,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 579,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_door_window_sensor_battery",
      "line": 586,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 11,
      "content": "this.log('fan_controller device initialized');"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 42,
      "content": "this.log('fan_controller device deleted');"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_fan_controller_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 128,
      "content": "this.log('formaldehyde_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 128,
      "content": "this.log('formaldehyde_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 128,
      "content": "this.log('formaldehyde_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_formaldehyde_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 128,
      "content": "this.log('gas_detector_battery initialized');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_detector_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 128,
      "content": "this.log('gas_sensor_ts0601_battery initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 128,
      "content": "this.log('gas_sensor_ts0601_battery initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 128,
      "content": "this.log('gas_sensor_ts0601_battery initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_gas_sensor_ts0601_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 49,
      "content": "this.log('hvac_controller_ac initialized');"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 104,
      "content": "this.log('hvac_controller_ac deleted');"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_hvac_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 26,
      "content": "this.log('Contact status:', isOpen ? 'OPEN' : 'CLOSED');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 32,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 39,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 51,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 69,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 71,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 97,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 114,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 161,
      "content": "this.log('door_lock_battery initialized');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 173,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 183,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 210,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 281,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 289,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 297,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 305,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 313,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_basic_aa",
      "line": 320,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 128,
      "content": "this.log('fingerprint_lock_battery initialized');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_fingerprint_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 128,
      "content": "this.log('smart_lock_battery initialized');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lock_smart_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 128,
      "content": "this.log('lux_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 128,
      "content": "this.log('lux_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 128,
      "content": "this.log('lux_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_lux_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 49,
      "content": "this.log('milight_controller_ac initialized');"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 104,
      "content": "this.log('milight_controller_ac deleted');"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_milight_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 43,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 49,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 58,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 65,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 77,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 95,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 97,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 123,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 140,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 187,
      "content": "this.log('motion_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 199,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 209,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 229,
      "content": "this.log(`✅ Motion IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 232,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 244,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 263,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 334,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 342,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 350,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 358,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 366,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_battery",
      "line": 373,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 169,
      "content": "this.log('radar_motion_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_aaa",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 169,
      "content": "this.log('radar_motion_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_advanced_cr2032",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 169,
      "content": "this.log('motion_sensor_mmwave_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_aaa",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 169,
      "content": "this.log('motion_sensor_mmwave_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_basic_cr2032",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 169,
      "content": "this.log('motion_sensor_mmwave_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_mmwave_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 169,
      "content": "this.log('motion_sensor_pir_ac_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 214,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 285,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 293,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 301,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 309,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 317,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_ac_battery",
      "line": 324,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 169,
      "content": "this.log('pir_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_aaa",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 169,
      "content": "this.log('pir_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_advanced_cr2032",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 43,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 49,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 58,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 65,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 77,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 95,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 97,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 123,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 140,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 187,
      "content": "this.log('motion_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 199,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 209,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 229,
      "content": "this.log(`✅ Motion IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 232,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 244,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 263,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 334,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 342,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 350,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 358,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 366,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_aaa",
      "line": 373,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 43,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 49,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 58,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 65,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 77,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 95,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 97,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 123,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 140,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 187,
      "content": "this.log('motion_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 199,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 209,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 229,
      "content": "this.log(`✅ Motion IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 232,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 244,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 263,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 334,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 342,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 350,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 358,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 366,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_basic_cr2032",
      "line": 373,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 26,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 28,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 54,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 71,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 118,
      "content": "this.log('Motion sensor initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 132,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 138,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 147,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 154,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 166,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 189,
      "content": "this.log('Motion sensor deleted');"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 206,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 277,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 285,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 293,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 301,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 309,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_pir_battery",
      "line": 316,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 169,
      "content": "this.log('motion_sensor_zigbee_204z_battery initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_sensor_zigbee_204z_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 27,
      "content": "this.log('🎯 Motion detected (attr):', alarmActive);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 33,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 51,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 60,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 67,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 81,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 102,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 104,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 120,
      "content": "this.log('motion_temp_humidity_illumination_sensor device initialized');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 122,
      "content": "this.log('=== DEVICE DEBUG INFO ===');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 123,
      "content": "this.log('Node:', zclNode ? 'available' : 'undefined');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 124,
      "content": "this.log('Endpoints:', Object.keys(zclNode?.endpoints || {}));"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 132,
      "content": "this.log('Endpoint 1 clusters:', clusters);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 134,
      "content": "this.log('========================');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 137,
      "content": "this.log('Registering standard Zigbee clusters...');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 147,
      "content": "this.log('Temperature:', value / 100);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 151,
      "content": "this.log('✅ Temperature cluster registered');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 161,
      "content": "this.log('Humidity:', value / 100);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 165,
      "content": "this.log('✅ Humidity cluster registered');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 175,
      "content": "this.log('Illuminance:', fromZigbeeMeasuredValue(value));"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 179,
      "content": "this.log('✅ Illuminance cluster registered');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 182,
      "content": "this.log('🚶 Setting up Motion IAS Zone...');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 192,
      "content": "this.log(`✅ Motion IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 195,
      "content": "this.log('⚠️ Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 206,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 210,
      "content": "this.log('✅ Battery capability registered');"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 225,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 296,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 304,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 312,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 320,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 328,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_motion_temp_humidity_illumination_multi_battery",
      "line": 335,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 128,
      "content": "this.log('multisensor_battery initialized');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 128,
      "content": "this.log('multisensor_battery initialized');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 128,
      "content": "this.log('multisensor_battery initialized');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_multisensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 128,
      "content": "this.log('noise_level_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 128,
      "content": "this.log('noise_level_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 128,
      "content": "this.log('noise_level_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_noise_level_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 24,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 30,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 39,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 46,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 58,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 76,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 78,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 104,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 121,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 168,
      "content": "this.log('pir_radar_illumination_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 180,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 189,
      "content": "this.log('✅ Battery Intelligence System V2 loaded (Homey Storage)');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 191,
      "content": "this.log('⚠️  Battery Intelligence System V2 not available:', err.message);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 192,
      "content": "this.log('   → Fallback to basic mode will be used');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 202,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 229,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 300,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 308,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 316,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 324,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 332,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_radar_illumination_sensor_battery",
      "line": 339,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 169,
      "content": "this.log('pir_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pir_sensor_advanced_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 128,
      "content": "this.log('pm25_detector_battery initialized');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_detector_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 128,
      "content": "this.log('pm25_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 128,
      "content": "this.log('pm25_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 128,
      "content": "this.log('pm25_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pm25_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 49,
      "content": "this.log('pool_pump_controller_ac initialized');"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 104,
      "content": "this.log('pool_pump_controller_ac deleted');"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pool_pump_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 169,
      "content": "this.log('presence_sensor_radar_battery initialized');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_presence_sensor_radar_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 128,
      "content": "this.log('pressure_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 128,
      "content": "this.log('pressure_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 128,
      "content": "this.log('pressure_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_pressure_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 49,
      "content": "this.log('projector_screen_controller_ac initialized');"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 104,
      "content": "this.log('projector_screen_controller_ac deleted');"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_projector_screen_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 169,
      "content": "this.log('radar_motion_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_advanced_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 169,
      "content": "this.log('radar_motion_sensor_mmwave_battery initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_mmwave_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 25,
      "content": "this.log('Motion detected:', alarmActive);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 31,
      "content": "this.log('Auto-clearing motion after 60s');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 40,
      "content": "this.log('Received zoneEnrollRequest:', enrollRequest);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 47,
      "content": "this.log('Sent zoneEnrollResponse successfully');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 59,
      "content": "this.log('Wrote IAS CIE address:', ieeeAddress);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 77,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 79,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 105,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 122,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 169,
      "content": "this.log('radar_motion_sensor_tank_level_battery initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 181,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 191,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 218,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 289,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 297,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 305,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 313,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 321,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_radar_motion_sensor_tank_level_battery",
      "line": 328,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 11,
      "content": "this.log('relay_switch_1gang device initialized');"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 42,
      "content": "this.log('relay_switch_1gang device deleted');"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_relay_switch_1gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 49,
      "content": "this.log('rgb_led_controller_ac initialized');"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 104,
      "content": "this.log('rgb_led_controller_ac deleted');"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_rgb_led_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 12,
      "content": "this.log('roller_blind_controller device initialized');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 43,
      "content": "this.log('roller_blind_controller device deleted');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_aaa",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 12,
      "content": "this.log('roller_blind_controller device initialized');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 43,
      "content": "this.log('roller_blind_controller device deleted');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_controller_ac",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 12,
      "content": "this.log('roller_blind_controller device initialized');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 26,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 43,
      "content": "this.log('roller_blind_controller device deleted');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 60,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 247,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 270,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 273,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 285,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 333,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 335,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 360,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 377,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 413,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 421,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 429,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_blind_cr2032",
      "line": 444,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 35,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 37,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 63,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 80,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 166,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 182,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 369,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 392,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 395,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 418,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 445,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 453,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 461,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 469,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 477,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_aaa",
      "line": 484,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 35,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 37,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 63,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 80,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 166,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 182,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 369,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 392,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 395,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 418,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 445,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 453,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 461,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 469,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 477,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_controller_ac",
      "line": 484,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 35,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 37,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 63,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 80,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 166,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 182,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 369,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 392,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 395,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 418,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 469,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 477,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_cr2032",
      "line": 484,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_roller_shutter_switch_cr2032",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 54,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 124,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 135,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 165,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 182,
      "content": "this.log('scene_controller initialized');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 194,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 204,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 230,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 236,
      "content": "this.log('scene_controller deleted');"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 249,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 320,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 328,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 336,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 344,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 352,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller",
      "line": 359,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 65,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 135,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 146,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 180,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 182,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 207,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 224,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 271,
      "content": "this.log('scene_controller_battery initialized');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 283,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 293,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 320,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 391,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 399,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 407,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 415,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 423,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_scene_controller_battery",
      "line": 430,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 32,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 49,
      "content": "this.log('shade_controller_ac initialized');"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 61,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 71,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 98,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 104,
      "content": "this.log('shade_controller_ac deleted');"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 117,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 188,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 196,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 204,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 212,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 220,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_shade_controller_ac",
      "line": 227,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 128,
      "content": "this.log('smart_garden_sprinkler_battery initialized');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_garden_sprinkler_internal",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 128,
      "content": "this.log('smart_irrigation_controller_hybrid initialized');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_irrigation_controller_internal",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 128,
      "content": "this.log('smart_smoke_detector_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_smoke_detector_advanced_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 11,
      "content": "this.log('smart_switch_1gang_hybrid device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 42,
      "content": "this.log('smart_switch_1gang_hybrid device deleted');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_hybrid",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_1gang_internal",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 28,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 53,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 71,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 258,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 281,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 296,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 307,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 324,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 395,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 403,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 411,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 419,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 427,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_ac",
      "line": 434,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_cr2032",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 11,
      "content": "this.log('smart_switch_3gang_hybrid device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 42,
      "content": "this.log('smart_switch_3gang_hybrid device deleted');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_3gang_hybrid",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_4gang_cr2032",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_aaa",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smart_switch_5gang_cr2032",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 128,
      "content": "this.log('smart_smoke_detector_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 128,
      "content": "this.log('smart_smoke_detector_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_advanced_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 128,
      "content": "this.log('smoke_detector_temp_humidity_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_detector_temp_humidity_advanced_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 128,
      "content": "this.log('smoke_temp_humid_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_smoke_temp_humid_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 128,
      "content": "this.log('soil_moisture_temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 128,
      "content": "this.log('soil_moisture_temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 128,
      "content": "this.log('soil_moisture_temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_soil_moisture_temperature_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 128,
      "content": "this.log('solar_panel_controller_hybrid initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 128,
      "content": "this.log('solar_panel_controller_hybrid initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 128,
      "content": "this.log('solar_panel_controller_hybrid initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_solar_panel_controller_hybrid",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_1gang_battery",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_switch_5gang_battery",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 128,
      "content": "this.log('temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 172,
      "content": "this.log('🔧 Registering standard capabilities...');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 182,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 193,
      "content": "this.log('✅ Humidity capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 202,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 207,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 251,
      "content": "this.log('✅ Attribute reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 267,
      "content": "this.log(`🔋 Attempting battery read (attempt ${attempt}/${retries})...`);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 276,
      "content": "this.log(`✅ Battery read successful: ${percentage}% (raw: ${rawValue})`);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 280,
      "content": "this.log(`⚠️  Battery read attempt ${attempt} failed:`, error.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 289,
      "content": "this.log('❌ All battery read attempts failed - will retry on next report');"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 310,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 381,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 389,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 397,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 405,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 413,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_aaa",
      "line": 420,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 128,
      "content": "this.log('temperature_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 128,
      "content": "this.log('temperature_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 128,
      "content": "this.log('temperature_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_advanced_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 128,
      "content": "this.log('temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 172,
      "content": "this.log('🔧 Registering standard capabilities...');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 182,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 193,
      "content": "this.log('✅ Humidity capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 202,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 207,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 251,
      "content": "this.log('✅ Attribute reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 267,
      "content": "this.log(`🔋 Attempting battery read (attempt ${attempt}/${retries})...`);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 276,
      "content": "this.log(`✅ Battery read successful: ${percentage}% (raw: ${rawValue})`);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 280,
      "content": "this.log(`⚠️  Battery read attempt ${attempt} failed:`, error.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 289,
      "content": "this.log('❌ All battery read attempts failed - will retry on next report');"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 310,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 381,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 389,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 397,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 405,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 413,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_battery",
      "line": 420,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 128,
      "content": "this.log('temperature_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 172,
      "content": "this.log('🔧 Registering standard capabilities...');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 182,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 193,
      "content": "this.log('✅ Humidity capability registered');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 202,
      "content": "this.log('Battery raw value:', value);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 207,
      "content": "this.log('✅ Battery capability registered with converter');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 251,
      "content": "this.log('✅ Attribute reporting configured');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 267,
      "content": "this.log(`🔋 Attempting battery read (attempt ${attempt}/${retries})...`);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 276,
      "content": "this.log(`✅ Battery read successful: ${percentage}% (raw: ${rawValue})`);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 280,
      "content": "this.log(`⚠️  Battery read attempt ${attempt} failed:`, error.message);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 289,
      "content": "this.log('❌ All battery read attempts failed - will retry on next report');"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 310,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 381,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 389,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 397,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 405,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 413,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temperature_sensor_cr2032",
      "line": 420,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 128,
      "content": "this.log('temp_humid_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_advanced_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 128,
      "content": "this.log('temp_humid_sensor_dd_battery initialized');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_dd_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_humid_sensor_leak_detector_battery",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 128,
      "content": "this.log('temp_sensor_pro_battery initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 128,
      "content": "this.log('temp_sensor_pro_battery initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 128,
      "content": "this.log('temp_sensor_pro_battery initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_temp_sensor_pro_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 11,
      "content": "this.log('touch_switch_1gang device initialized');"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 42,
      "content": "this.log('touch_switch_1gang device deleted');"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_1gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 11,
      "content": "this.log('touch_switch_3gang device initialized');"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 42,
      "content": "this.log('touch_switch_3gang device deleted');"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_touch_switch_3gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 128,
      "content": "this.log('tvoc_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 128,
      "content": "this.log('tvoc_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 128,
      "content": "this.log('tvoc_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 128,
      "content": "this.log('tvoc_sensor_advanced_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_advanced_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 128,
      "content": "this.log('tvoc_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 128,
      "content": "this.log('tvoc_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_tvoc_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 128,
      "content": "this.log('smart_valve_controller_hybrid initialized');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_valve_smart_aa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 128,
      "content": "this.log('vibration_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_aaa",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 128,
      "content": "this.log('vibration_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_battery",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 36,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 38,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 64,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 81,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 128,
      "content": "this.log('vibration_sensor_battery initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 140,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 150,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 177,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 248,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 256,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 264,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 272,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 280,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_vibration_sensor_cr2032",
      "line": 287,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 32,
      "content": "this.log('wall_switch_1gang_ac device initialized');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 46,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 63,
      "content": "this.log('wall_switch_1gang_ac device deleted');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 80,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 267,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 290,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 293,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 305,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 316,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 333,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 404,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 412,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 420,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 428,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 436,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_ac",
      "line": 443,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 11,
      "content": "this.log('wall_switch_1gang_dc device initialized');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 42,
      "content": "this.log('wall_switch_1gang_dc device deleted');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_1gang_dc",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 11,
      "content": "this.log('wall_switch_3gang_ac device initialized');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 42,
      "content": "this.log('wall_switch_3gang_ac device deleted');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_ac",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 11,
      "content": "this.log('wall_switch_3gang_dc device initialized');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 25,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 42,
      "content": "this.log('wall_switch_3gang_dc device deleted');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 59,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 246,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 269,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 272,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 284,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 295,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 312,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 383,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 391,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 399,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 407,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 415,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wall_switch_3gang_dc",
      "line": 422,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 26,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 28,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 54,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 71,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 159,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 179,
      "content": "this.log(`✅ Water leak detector IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 182,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 194,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 381,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 404,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 419,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 430,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 457,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 465,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 473,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 481,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 489,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_aaa",
      "line": 496,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 26,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 28,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 54,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 71,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 159,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 179,
      "content": "this.log(`✅ Water leak detector IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 182,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 194,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 381,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 404,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 419,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 430,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 457,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 465,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 473,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 481,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 489,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_battery",
      "line": 496,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 26,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 28,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 54,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 71,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 159,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 179,
      "content": "this.log(`✅ Water leak detector IAS Zone enrolled via: ${method}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 182,
      "content": "this.log('⚠️  Device may auto-enroll or work without explicit enrollment');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 194,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 381,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 404,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 407,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 419,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 430,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 457,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 465,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 473,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 481,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 489,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_advanced_cr2032",
      "line": 496,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_aaa",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_basic_cr2032",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 67,
      "content": "this.log('Tuya Zigbee device initialized');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 84,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 271,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 294,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 297,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 309,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 320,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 357,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 359,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 384,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 401,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 437,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 445,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 453,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 461,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_detector_battery",
      "line": 468,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 27,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 29,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 55,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 72,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 119,
      "content": "this.log('water_leak_sensor device initialized');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 131,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 142,
      "content": "this.log('✅ Battery capability registered');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 154,
      "content": "this.log('✅ Temperature capability registered');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 163,
      "content": "this.log('✅ Motion alarm capability registered');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 174,
      "content": "this.log('✅ Luminance capability registered');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 183,
      "content": "this.log('✅ Water alarm capability registered');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 209,
      "content": "this.log('water_leak_sensor device deleted');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 224,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 411,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 434,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 437,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 449,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 460,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 487,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 495,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 503,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 511,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 519,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_water_leak_sensor_battery",
      "line": 526,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 24,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 105,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 107,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 133,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 150,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 186,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 194,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 202,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 210,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_scene_controller_4button_battery",
      "line": 217,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 54,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 124,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 135,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 165,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 182,
      "content": "this.log('scene_controller initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 194,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 204,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 230,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 236,
      "content": "this.log('scene_controller deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 249,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 320,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 328,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 336,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 344,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 352,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2032",
      "line": 359,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 54,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 124,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 135,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 165,
      "content": "}]).catch(err => this.log('Battery report config failed (ignorable):', err.messa"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 182,
      "content": "this.log('scene_controller initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 194,
      "content": "this.log('✅ FallbackSystem initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 204,
      "content": "this.log('⚠️  No Tuya cluster found, using standard Zigbee');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 230,
      "content": "this.log('Could not register battery capability:', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 236,
      "content": "this.log('scene_controller deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 249,
      "content": "this.log(`✅ Flow triggered: ${cardId}`, tokens);"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 320,
      "content": ".catch(err => this.log('Battery read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 328,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 336,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 344,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 352,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1button_cr2450",
      "line": 359,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_1gang_cr2032 device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_1gang_cr2032 device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_1gang_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 145,
      "content": "this.log('scene_controller_2button device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 175,
      "content": "this.log('scene_controller_2button device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_2button_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 145,
      "content": "this.log('wireless_switch_3gang_cr2032 device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 175,
      "content": "this.log('wireless_switch_3gang_cr2032 device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_3button_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 67,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 137,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 148,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 159,
      "content": "this.log('scene_controller_4button device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 172,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 189,
      "content": "this.log('scene_controller_4button device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 206,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 393,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 416,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 419,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 431,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 442,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 479,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 481,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 506,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 523,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 559,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 567,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 575,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 583,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_4button_cr2032",
      "line": 590,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 145,
      "content": "this.log('scene_controller_6button device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 175,
      "content": "this.log('scene_controller_6button device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_6button_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 53,
      "content": "this.log('Button command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 123,
      "content": "this.log('Button click detection initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 134,
      "content": "this.log('Level control command:', command);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 145,
      "content": "this.log('scene_controller_8button device initialized');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 158,
      "content": "this.log('onCapabilityOnoff:', value);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 175,
      "content": "this.log('scene_controller_8button device deleted');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 192,
      "content": "this.log('Registering flow card handlers...');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 379,
      "content": "this.log('Power meter reset');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 402,
      "content": "this.log(`Triggered: ${triggerIdTrue}`);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 405,
      "content": "this.log(`Triggered: ${triggerIdFalse}`);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 417,
      "content": "this.log(`Triggered: ${triggerId} with value: ${value}`);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 428,
      "content": "this.log(`Triggered: ${triggerId}`);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 465,
      "content": "this.log('Battery reporting configured');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 467,
      "content": "this.log('Battery report config failed (non-critical):', err.message);"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 492,
      "content": "this.log('Initial battery poll completed');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 509,
      "content": "this.log('Battery polled:', percentage + '%');"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 545,
      "content": ".catch(err => this.log('Temperature read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 553,
      "content": ".catch(err => this.log('Humidity read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 561,
      "content": ".catch(err => this.log('Illuminance read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 569,
      "content": ".catch(err => this.log('IAS Zone read failed (ignorable):', err.message))"
    },
    {
      "driver": "zemismart_wireless_switch_8button_cr2032",
      "line": 576,
      "content": "this.log('✅ Poll attributes completed');"
    }
  ]
}