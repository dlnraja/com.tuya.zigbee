name: Auto Driver Publish

on:
  push:
    branches: [ master ]
    paths:
      - 'drivers/**'
  workflow_dispatch:

jobs:
  detect-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: "Setup Homey CLI (Official)"
        run: |
          npm install -g homey
          homey --version
      
      - name: Authenticate Homey CLI
        env:
          HOMEY_TOKEN: ${{ secrets.HOMEY_TOKEN }}
        run: |
          if [ -z "$HOMEY_TOKEN" ]; then
            echo "‚ùå HOMEY_TOKEN secret not configured"
            exit 1
          fi
          
          # Create Homey config directory
          mkdir -p ~/.homey
          
          # Create session file with token
          cat > ~/.homey/session.json << EOF
          {
            "token": "$HOMEY_TOKEN"
          }
          EOF
          
          # Verify authentication
          homey whoami || {
            echo "‚ùå Homey authentication failed"
            exit 1
          }
          
          echo "‚úÖ Authenticated with Homey CLI"
      
      - name: Check driver changes
        id: check_changes
        run: |
          DRIVER_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep "^drivers/" || true)
          if [ -n "$DRIVER_CHANGES" ]; then
            echo "has_driver_changes=true" >> $GITHUB_OUTPUT
            echo "Driver changes detected:"
            echo "$DRIVER_CHANGES"
          else
            echo "has_driver_changes=false" >> $GITHUB_OUTPUT
            echo "No driver changes"
          fi
      
      - name: "Pre-flight Validation (Syntax)"
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "üîç Running syntax validation..."
          
          # Validate JSON files
          for file in app.json .homeychangelog.json; do
            if ! jq empty "$file" 2>/dev/null; then
              echo "‚ùå Invalid JSON: $file"
              exit 1
            fi
          done
          
          # Check driver manifests
          for manifest in drivers/*/driver.compose.json; do
            if [ -f "$manifest" ]; then
              if ! jq empty "$manifest" 2>/dev/null; then
                echo "‚ùå Invalid JSON: $manifest"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Syntax validation passed"
      
      - name: "Homey App Validation (Level: Publish)"
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "üîç Running Homey CLI validation (publish level)..."
          
          # Run validation with proper error handling
          if ! homey app validate --level publish 2>&1 | tee validation.log; then
            echo "‚ùå Homey validation failed!"
            echo "::error::Validation errors detected - see logs above"
            cat validation.log
            exit 1
          fi
          
          echo "‚úÖ Homey validation passed"
      
      - name: SDK3 Compliance Check
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "üîç Checking SDK3 compliance..."
          
          # Verify SDK version
          SDK_VERSION=$(node -pe "require('./app.json').sdk")
          if [ "$SDK_VERSION" != "3" ]; then
            echo "‚ùå Wrong SDK version: $SDK_VERSION (expected: 3)"
            exit 1
          fi
          
          # Check for deprecated dependencies
          if grep -q "homey-meshdriver" package.json 2>/dev/null; then
            echo "‚ùå Deprecated dependency: homey-meshdriver (use homey-zigbeedriver)"
            exit 1
          fi
          
          echo "‚úÖ SDK3 compliant"
      
      - name: Driver Endpoints Check
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "üîç Checking driver endpoints..."
          
          MISSING_ENDPOINTS=0
          for manifest in drivers/*/driver.compose.json; do
            if [ -f "$manifest" ]; then
              DRIVER=$(basename $(dirname "$manifest"))
              
              # Check if Zigbee driver has endpoints
              if jq -e '.zigbee' "$manifest" >/dev/null 2>&1; then
                if ! jq -e '.zigbee.endpoints' "$manifest" >/dev/null 2>&1; then
                  echo "‚ö†Ô∏è  Missing endpoints: $DRIVER"
                  MISSING_ENDPOINTS=$((MISSING_ENDPOINTS + 1))
                fi
              fi
            fi
          done
          
          if [ $MISSING_ENDPOINTS -gt 0 ]; then
            echo "‚ö†Ô∏è  $MISSING_ENDPOINTS drivers missing endpoints (continuing anyway)"
          else
            echo "‚úÖ All Zigbee drivers have endpoints defined"
          fi
      
      - name: Auto-bump version
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        id: version
        run: |
          echo "üì¶ Auto-bumping version..."
          
          CURRENT_VERSION=$(node -pe "require('./app.json').version")
          IFS='.' read -ra PARTS <<< "$CURRENT_VERSION"
          PARTS[2]=$((PARTS[2] + 1))
          NEW_VERSION="${PARTS[0]}.${PARTS[1]}.${PARTS[2]}"
          
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          
          # Update app.json with proper formatting
          node -e "
          const fs = require('fs');
          const app = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          app.version = '$NEW_VERSION';
          fs.writeFileSync('app.json', JSON.stringify(app, null, 2) + '\n');
          "
          
          # Update changelog with proper structure
          node -e "
          const fs = require('fs');
          const changelog = JSON.parse(fs.readFileSync('.homeychangelog.json', 'utf8'));
          const newEntry = {
            version: '$NEW_VERSION',
            date: new Date().toISOString().split('T')[0],
            changes: {
              en: 'Driver improvements from community feedback and automated enrichment'
            }
          };
          // Add new entry at the beginning
          const updated = Object.assign({ [$NEW_VERSION]: newEntry }, changelog);
          fs.writeFileSync('.homeychangelog.json', JSON.stringify(updated, null, 2) + '\n');
          "
          
          echo "‚úÖ Version bumped to $NEW_VERSION"
      
      - name: Commit version bump
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add app.json .homeychangelog.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new }} [skip ci]"
          git push
      
      - name: Re-validate After Version Bump
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "üîç Re-validating after version bump..."
          
          if ! homey app validate --level publish; then
            echo "‚ùå Validation failed after version bump!"
            echo "::error::Post-bump validation failed"
            exit 1
          fi
          
          echo "‚úÖ Post-bump validation passed"
      
      - name: "Publish to Homey App Store (Official CLI)"
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        id: publish
        run: |
          echo "üöÄ Publishing to Homey App Store..."
          echo "Version: ${{ steps.version.outputs.new }}"
          
          # Run official Homey CLI publish command
          if ! homey app publish 2>&1 | tee publish.log; then
            echo "‚ùå Publication failed!"
            echo "::error::Homey app publish command failed"
            cat publish.log
            exit 1
          fi
          
          echo "‚úÖ Successfully published to Homey App Store"
          echo "published=true" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_driver_changes == 'true' && steps.publish.outputs.published == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.version.outputs.new }}"
          name: "Release v${{ steps.version.outputs.new }}"
          body: |
            ## üöÄ Auto-published Driver Improvements
            
            **Version:** ${{ steps.version.outputs.current }} ‚Üí ${{ steps.version.outputs.new }}
            
            ### Changes
            Driver improvements from community feedback and automated enrichment system.
            
            ### Validation
            - ‚úÖ Syntax validation passed
            - ‚úÖ Homey CLI validation passed (publish level)
            - ‚úÖ SDK3 compliance verified
            - ‚úÖ Driver endpoints checked
            
            ### Published
            ‚úÖ Live on [Homey App Store](https://homey.app/app/com.dlnraja.tuya.zigbee)
            
            ### Dashboard
            [Developer Dashboard](https://tools.developer.homey.app/apps/app/com.dlnraja.tuya.zigbee)
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Summary
        if: steps.check_changes.outputs.has_driver_changes == 'true'
        run: |
          echo "## ‚úÖ Auto-Publish Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Version" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.version.outputs.current }} ‚Üí **${{ steps.version.outputs.new }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Validation Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Syntax validation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Homey CLI validation (publish level)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SDK3 compliance check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Driver endpoints check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Post-bump validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Publication" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Published to Homey App Store ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Homey App Store](https://homey.app/app/com.dlnraja.tuya.zigbee)" >> $GITHUB_STEP_SUMMARY
          echo "- [Developer Dashboard](https://tools.developer.homey.app/apps/app/com.dlnraja.tuya.zigbee)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new }})" >> $GITHUB_STEP_SUMMARY
      
      - name: No Publish Needed
        if: steps.check_changes.outputs.has_driver_changes != 'true'
        run: |
          echo "## ‚ÑπÔ∏è No Publication Needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No driver changes detected - publication skipped." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Only documentation or scripts were modified." >> $GITHUB_STEP_SUMMARY
