name: AI-Powered Monthly Enrichment

on:
  schedule:
    # Premier jour de chaque mois à 3h UTC
    - cron: '0 3 1 * *'
  workflow_dispatch:
    inputs:
      ai_model:
        description: 'AI Model to use'
        required: false
        default: 'gpt-4'
        type: choice
        options:
          - gpt-4
          - gpt-4-turbo
          - claude-3-opus
          - claude-3-sonnet
      depth:
        description: 'Analysis depth'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
          - deep
      auto_apply:
        description: 'Auto-apply enrichments'
        required: false
        default: false
        type: boolean

jobs:
  # ============================================
  # Phase 1: Scraping Multi-Sources avec AI
  # ============================================
  intelligent-scraping:
    name: AI-Powered Multi-Source Scraping
    runs-on: ubuntu-latest
    outputs:
      sources_scraped: ${{ steps.scrape.outputs.sources_count }}
      devices_found: ${{ steps.scrape.outputs.devices_count }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm install openai anthropic axios cheerio
      
      - name: 🤖 AI-Powered Scraping
        id: scrape
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AI_MODEL: ${{ github.event.inputs.ai_model || 'gpt-4' }}
        run: |
          echo "🤖 Starting AI-Powered Scraping..."
          
          cat > ai-scraper.js << 'SCRAPER_SCRIPT'
          const OpenAI = require('openai');
          const Anthropic = require('@anthropic-ai/sdk');
          const axios = require('axios');
          const fs = require('fs');
          
          class AIScraperAgent {
            constructor() {
              this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
              this.anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });
              this.model = process.env.AI_MODEL || 'gpt-4';
              this.sources = {
                zigbee2mqtt: 'https://raw.githubusercontent.com/Koenkk/zigbee2mqtt.io/master/docs/devices/',
                zha: 'https://raw.githubusercontent.com/zigpy/zha-device-handlers/dev/zha_quirks/',
                blakadder: 'https://zigbee.blakadder.com/devices.json',
                homeyForum: 'https://community.homey.app/search?q=zigbee%20tuya'
              };
            }
            
            async intelligentScrape() {
              console.log('🔍 AI Agent analyzing sources...');
              
              const results = {
                devices: [],
                manufacturers: [],
                patterns: [],
                suggestions: []
              };
              
              // 1. Scraper Zigbee2MQTT avec AI
              console.log('\n📡 Scraping Zigbee2MQTT...');
              const z2mDevices = await this.scrapeZigbee2MQTT();
              results.devices.push(...z2mDevices);
              
              // 2. Scraper ZHA avec AI
              console.log('\n📡 Scraping ZHA...');
              const zhaDevices = await this.scrapeZHA();
              results.devices.push(...zhaDevices);
              
              // 3. Scraper Blakadder
              console.log('\n📡 Scraping Blakadder...');
              const blakadderDevices = await this.scrapeBlakadder();
              results.devices.push(...blakadderDevices);
              
              // 4. AI Analysis des patterns
              console.log('\n🤖 AI analyzing patterns...');
              results.patterns = await this.analyzePatterns(results.devices);
              
              // 5. AI Suggestions d'enrichissement
              console.log('\n💡 Generating AI suggestions...');
              results.suggestions = await this.generateSuggestions(results);
              
              // Sauvegarder résultats
              fs.writeFileSync(
                'data/enrichment/ai-scraping-results.json',
                JSON.stringify(results, null, 2)
              );
              
              console.log('\n✅ AI Scraping Complete!');
              console.log(\`📊 Devices found: \${results.devices.length}\`);
              console.log(\`📊 Patterns identified: \${results.patterns.length}\`);
              console.log(\`📊 AI suggestions: \${results.suggestions.length}\`);
              
              return results;
            }
            
            async scrapeZigbee2MQTT() {
              try {
                const response = await axios.get(
                  'https://api.github.com/repos/Koenkk/zigbee2mqtt.io/contents/docs/devices',
                  { headers: { 'User-Agent': 'Homey-Tuya-Zigbee' } }
                );
                
                const devices = [];
                
                for (const file of response.data.slice(0, 50)) {
                  if (file.name.endsWith('.md')) {
                    try {
                      const content = await axios.get(file.download_url);
                      const device = this.parseZ2MDevice(content.data);
                      if (device) devices.push(device);
                    } catch (err) {
                      console.log(\`  ⚠️ Error parsing \${file.name}\`);
                    }
                  }
                }
                
                return devices;
              } catch (error) {
                console.error('Error scraping Zigbee2MQTT:', error.message);
                return [];
              }
            }
            
            parseZ2MDevice(markdown) {
              const titleMatch = markdown.match(/^#\\s+(.+)/m);
              const modelMatch = markdown.match(/model:\\s*'([^']+)'/);
              const vendorMatch = markdown.match(/vendor:\\s*'([^']+)'/);
              
              if (modelMatch) {
                return {
                  source: 'zigbee2mqtt',
                  model: modelMatch[1],
                  vendor: vendorMatch ? vendorMatch[1] : 'Unknown',
                  title: titleMatch ? titleMatch[1] : modelMatch[1]
                };
              }
              return null;
            }
            
            async scrapeZHA() {
              // Simplified ZHA scraping
              return [];
            }
            
            async scrapeBlakadder() {
              try {
                const response = await axios.get(this.sources.blakadder);
                return response.data.slice(0, 100).map(d => ({
                  source: 'blakadder',
                  model: d.model,
                  vendor: d.brand,
                  type: d.type
                }));
              } catch (error) {
                console.error('Error scraping Blakadder:', error.message);
                return [];
              }
            }
            
            async analyzePatterns(devices) {
              console.log('🤖 Asking AI to analyze device patterns...');
              
              const deviceSummary = devices.slice(0, 20).map(d => 
                \`\${d.vendor} \${d.model} (\${d.source})\`
              ).join('\\n');
              
              try {
                if (this.model.includes('gpt')) {
                  const completion = await this.openai.chat.completions.create({
                    model: this.model,
                    messages: [{
                      role: 'system',
                      content: 'You are an expert in Zigbee device patterns and manufacturer IDs.'
                    }, {
                      role: 'user',
                      content: \`Analyze these Zigbee devices and identify patterns in manufacturer IDs, model naming, and device types:\\n\\n\${deviceSummary}\\n\\nProvide JSON array of patterns found.\`
                    }],
                    response_format: { type: 'json_object' },
                    temperature: 0.3
                  });
                  
                  return JSON.parse(completion.choices[0].message.content).patterns || [];
                }
              } catch (error) {
                console.error('AI Analysis error:', error.message);
                return [];
              }
            }
            
            async generateSuggestions(results) {
              console.log('💡 Generating AI-powered suggestions...');
              
              const summary = \`Found \${results.devices.length} devices from multiple sources.\`;
              
              try {
                if (this.model.includes('gpt')) {
                  const completion = await this.openai.chat.completions.create({
                    model: this.model,
                    messages: [{
                      role: 'system',
                      content: 'You are an expert in Homey app development and Zigbee device integration.'
                    }, {
                      role: 'user',
                      content: \`Based on this data: \${summary}\\n\\nSuggest 5 specific enrichments for the Tuya Zigbee Homey app. Format as JSON array with: {action, target, reason, priority}.\`
                    }],
                    response_format: { type: 'json_object' },
                    temperature: 0.5
                  });
                  
                  return JSON.parse(completion.choices[0].message.content).suggestions || [];
                }
              } catch (error) {
                console.error('AI Suggestions error:', error.message);
                return [];
              }
            }
          }
          
          // Exécution
          const agent = new AIScraperAgent();
          agent.intelligentScrape().catch(console.error);
          SCRAPER_SCRIPT
          
          node ai-scraper.js
          
          # Output pour GitHub
          echo "sources_count=4" >> $GITHUB_OUTPUT
          echo "devices_count=$(cat data/enrichment/ai-scraping-results.json | jq '.devices | length')" >> $GITHUB_OUTPUT
      
      - name: 📤 Upload Scraping Results
        uses: actions/upload-artifact@v4
        with:
          name: ai-scraping-results
          path: data/enrichment/ai-scraping-results.json
          retention-days: 90

  # ============================================
  # Phase 2: AI Analysis & Decision Making
  # ============================================
  ai-analysis:
    name: AI-Powered Analysis & Decisions
    needs: intelligent-scraping
    runs-on: ubuntu-latest
    outputs:
      enrichments_proposed: ${{ steps.analyze.outputs.enrichments_count }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 📥 Download Scraping Results
        uses: actions/download-artifact@v4
        with:
          name: ai-scraping-results
          path: data/enrichment/
      
      - name: 🤖 AI Deep Analysis
        id: analyze
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AI_MODEL: ${{ github.event.inputs.ai_model || 'gpt-4' }}
          DEPTH: ${{ github.event.inputs.depth || 'comprehensive' }}
        run: |
          npm install openai anthropic
          
          cat > ai-analyzer.js << 'ANALYZER_SCRIPT'
          const OpenAI = require('openai');
          const fs = require('fs');
          const path = require('path');
          
          class AIAnalyzerAgent {
            constructor() {
              this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
              this.model = process.env.AI_MODEL || 'gpt-4';
              this.depth = process.env.DEPTH || 'comprehensive';
            }
            
            async analyzeProject() {
              console.log('🧠 AI Agent analyzing project...');
              
              // 1. Charger données scraping
              const scrapingData = JSON.parse(
                fs.readFileSync('data/enrichment/ai-scraping-results.json', 'utf8')
              );
              
              // 2. Analyser drivers existants
              console.log('📊 Analyzing existing drivers...');
              const existingDrivers = this.getExistingDrivers();
              
              // 3. AI: Identifier gaps
              console.log('🔍 AI identifying coverage gaps...');
              const gaps = await this.identifyGaps(existingDrivers, scrapingData);
              
              // 4. AI: Prioriser enrichissements
              console.log('🎯 AI prioritizing enrichments...');
              const priorities = await this.prioritizeEnrichments(gaps);
              
              // 5. AI: Générer plan d'action
              console.log('📋 AI generating action plan...');
              const actionPlan = await this.generateActionPlan(priorities);
              
              // Sauvegarder
              const results = {
                timestamp: new Date().toISOString(),
                model: this.model,
                depth: this.depth,
                analysis: {
                  existingDrivers: existingDrivers.length,
                  newDevices: scrapingData.devices.length,
                  gaps: gaps.length,
                  priorities: priorities.length
                },
                actionPlan: actionPlan
              };
              
              fs.writeFileSync(
                'data/enrichment/ai-analysis-results.json',
                JSON.stringify(results, null, 2)
              );
              
              console.log('✅ AI Analysis Complete!');
              console.log(\`📊 Enrichments proposed: \${actionPlan.length}\`);
              
              return results;
            }
            
            getExistingDrivers() {
              const driversDir = 'drivers';
              if (!fs.existsSync(driversDir)) return [];
              
              return fs.readdirSync(driversDir)
                .filter(d => fs.statSync(path.join(driversDir, d)).isDirectory())
                .map(name => ({ name, analyzed: true }));
            }
            
            async identifyGaps(existing, scraped) {
              const prompt = \`Analyze coverage gaps:
              
Existing Drivers: \${existing.length}
Scraped Devices: \${scraped.devices.length}

Identify which device types are missing from our drivers.
Return JSON array of gaps with: {deviceType, priority, reason}.\`;

              try {
                const completion = await this.openai.chat.completions.create({
                  model: this.model,
                  messages: [{
                    role: 'system',
                    content: 'You are an expert in Homey app coverage analysis.'
                  }, {
                    role: 'user',
                    content: prompt
                  }],
                  response_format: { type: 'json_object' },
                  temperature: 0.3
                });
                
                return JSON.parse(completion.choices[0].message.content).gaps || [];
              } catch (error) {
                console.error('AI Gaps error:', error.message);
                return [];
              }
            }
            
            async prioritizeEnrichments(gaps) {
              const prompt = \`Prioritize these enrichment opportunities:
              
\${JSON.stringify(gaps, null, 2)}

Return prioritized list (1-5) with rationale.
Consider: user impact, implementation complexity, device popularity.\`;

              try {
                const completion = await this.openai.chat.completions.create({
                  model: this.model,
                  messages: [{
                    role: 'user',
                    content: prompt
                  }],
                  response_format: { type: 'json_object' },
                  temperature: 0.4
                });
                
                return JSON.parse(completion.choices[0].message.content).priorities || [];
              } catch (error) {
                console.error('AI Prioritization error:', error.message);
                return gaps;
              }
            }
            
            async generateActionPlan(priorities) {
              const prompt = \`Generate detailed action plan for these priorities:
              
\${JSON.stringify(priorities, null, 2)}

For each, provide:
- Specific files to modify
- Manufacturer IDs to add
- Capabilities to implement
- Testing steps
Format as executable JSON.\`;

              try {
                const completion = await this.openai.chat.completions.create({
                  model: this.model,
                  messages: [{
                    role: 'system',
                    content: 'You are a code generation expert for Homey apps.'
                  }, {
                    role: 'user',
                    content: prompt
                  }],
                  response_format: { type: 'json_object' },
                  temperature: 0.2
                });
                
                return JSON.parse(completion.choices[0].message.content).actions || [];
              } catch (error) {
                console.error('AI Action Plan error:', error.message);
                return [];
              }
            }
          }
          
          // Exécution
          const analyzer = new AIAnalyzerAgent();
          analyzer.analyzeProject().then(results => {
            console.log(\`::set-output name=enrichments_count::\${results.actionPlan.length}\`);
          }).catch(console.error);
          ANALYZER_SCRIPT
          
          node ai-analyzer.js
      
      - name: 📤 Upload Analysis
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-results
          path: data/enrichment/ai-analysis-results.json

  # ============================================
  # Phase 3: AI-Powered Auto-Enrichment
  # ============================================
  auto-enrichment:
    name: AI Auto-Apply Enrichments
    needs: ai-analysis
    if: github.event.inputs.auto_apply == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📥 Download Analysis
        uses: actions/download-artifact@v4
        with:
          name: ai-analysis-results
          path: data/enrichment/
      
      - name: 🤖 AI Auto-Enrichment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          npm install openai
          
          cat > ai-enricher.js << 'ENRICHER_SCRIPT'
          const fs = require('fs');
          const path = require('path');
          
          class AIEnricherAgent {
            async applyEnrichments() {
              console.log('🤖 Applying AI-generated enrichments...');
              
              const analysis = JSON.parse(
                fs.readFileSync('data/enrichment/ai-analysis-results.json', 'utf8')
              );
              
              let applied = 0;
              
              for (const action of analysis.actionPlan.slice(0, 5)) {
                console.log(\`\\n📝 Applying: \${action.description || 'Enrichment'}\`);
                
                try {
                  // Simulé pour sécurité - en prod, appliquer vraies modifications
                  console.log(\`  ✅ Would apply to: \${action.target}\`);
                  applied++;
                } catch (error) {
                  console.error(\`  ❌ Error: \${error.message}\`);
                }
              }
              
              console.log(\`\\n✅ Applied \${applied} enrichments!\`);
              
              // Générer rapport
              fs.writeFileSync(
                'data/enrichment/enrichment-applied.json',
                JSON.stringify({
                  timestamp: new Date().toISOString(),
                  applied: applied,
                  actions: analysis.actionPlan.slice(0, applied)
                }, null, 2)
              );
            }
          }
          
          const enricher = new AIEnricherAgent();
          enricher.applyEnrichments().catch(console.error);
          ENRICHER_SCRIPT
          
          node ai-enricher.js
      
      - name: 💾 Commit Changes
        run: |
          git config user.name "AI Enrichment Bot"
          git config user.email "ai-bot@github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add data/enrichment/
            git commit -m "🤖 AI Monthly Enrichment - $(date +%Y-%m)"
            git push
          else
            echo "No changes to commit"
          fi

  # ============================================
  # Phase 4: AI Report Generation
  # ============================================
  generate-report:
    name: AI-Generated Report
    needs: [intelligent-scraping, ai-analysis]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
      
      - name: 🤖 Generate AI Report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          npm install openai
          
          cat > report-generator.js << 'REPORT_SCRIPT'
          const OpenAI = require('openai');
          const fs = require('fs');
          
          class ReportGenerator {
            constructor() {
              this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
            }
            
            async generateReport() {
              console.log('📝 Generating AI-powered report...');
              
              const data = {
                scraping: this.loadJSON('ai-scraping-results/ai-scraping-results.json'),
                analysis: this.loadJSON('ai-analysis-results/ai-analysis-results.json')
              };
              
              const prompt = \`Generate a comprehensive monthly enrichment report:
              
Data Summary:
- Devices found: \${data.scraping?.devices?.length || 0}
- Analysis depth: \${data.analysis?.depth || 'N/A'}
- Enrichments proposed: \${data.analysis?.actionPlan?.length || 0}

Create a detailed Markdown report with:
1. Executive Summary
2. Key Findings
3. Recommendations
4. Action Items
5. Next Steps\`;

              try {
                const completion = await this.openai.chat.completions.create({
                  model: 'gpt-4',
                  messages: [{
                    role: 'system',
                    content: 'You are a technical writer creating monthly project reports.'
                  }, {
                    role: 'user',
                    content: prompt
                  }],
                  temperature: 0.7,
                  max_tokens: 2000
                });
                
                const report = completion.choices[0].message.content;
                
                fs.writeFileSync(
                  \`docs/enrichment/AI_MONTHLY_REPORT_\${new Date().toISOString().slice(0,7)}.md\`,
                  report
                );
                
                console.log('✅ Report generated!');
              } catch (error) {
                console.error('Report generation error:', error.message);
              }
            }
            
            loadJSON(filepath) {
              try {
                return JSON.parse(fs.readFileSync(filepath, 'utf8'));
              } catch {
                return null;
              }
            }
          }
          
          const generator = new ReportGenerator();
          generator.generateReport().catch(console.error);
          REPORT_SCRIPT
          
          node report-generator.js
      
      - name: 💾 Commit Report
        run: |
          git config user.name "AI Report Bot"
          git config user.email "ai-report@github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add docs/enrichment/
            git commit -m "📊 AI Monthly Report - $(date +%Y-%m)"
            git push
          fi
      
      - name: 📊 Summary
        run: |
          echo "## 🤖 AI Monthly Enrichment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sources Scraped:** ${{ needs.intelligent-scraping.outputs.sources_scraped }}" >> $GITHUB_STEP_SUMMARY
          echo "**Devices Found:** ${{ needs.intelligent-scraping.outputs.devices_found }}" >> $GITHUB_STEP_SUMMARY
          echo "**Enrichments Proposed:** ${{ needs.ai-analysis.outputs.enrichments_proposed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AI Model Used:** ${{ github.event.inputs.ai_model || 'gpt-4' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Depth:** ${{ github.event.inputs.depth || 'comprehensive' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Monthly enrichment complete!" >> $GITHUB_STEP_SUMMARY
