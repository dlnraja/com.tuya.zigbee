name: Homey App Validation

on:
  pull_request:
    branches:
      - master
  push:
    branches-ignore:
      - master
  workflow_dispatch:

jobs:
  validate:
    name: Validate Homey App
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        validation-level: [debug, publish]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm install --save-dev homey canvas
          npm ci --ignore-scripts 2>/dev/null || npm install --ignore-scripts
      
      - name: Clean Build Cache
        run: |
          rm -rf .homeybuild .homeycompose
          echo "✅ Cache cleaned"
      
      # ✅ OFFICIAL HOMEY VALIDATION ACTION
      - name: Validate (${{ matrix.validation-level }})
        run: npx homey app validate --level ${{ matrix.validation-level }}
      
      - name: Summary
        if: always()
        run: |
          echo "## Validation Results (${{ matrix.validation-level }})" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **PASSED** - App is ready for ${{ matrix.validation-level }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED** - Check errors above" >> $GITHUB_STEP_SUMMARY
          fi

  syntax-check:
    name: JSON Syntax Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate JSON Files
        run: |
          echo "Checking JSON syntax..."
          for file in $(find . -name "*.json" -not -path "./node_modules/*" -not -path "./.homeybuild/*"); do
            echo "Validating: $file"
            jq empty "$file" || { echo "❌ Invalid JSON: $file"; exit 1; }
          done
          echo "✅ All JSON files valid"
      
      - name: Check Driver Structure
        run: |
          echo "Checking driver structure..."
          DRIVERS_COUNT=$(find drivers -maxdepth 1 -mindepth 1 -type d | wc -l)
          echo "Found $DRIVERS_COUNT drivers"
          
          if [ $DRIVERS_COUNT -eq 0 ]; then
            echo "❌ No drivers found"
            exit 1
          fi
          
          echo "✅ Driver structure looks good"
