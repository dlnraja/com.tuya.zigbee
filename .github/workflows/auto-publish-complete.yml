name: Auto-Publish Complete Pipeline

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'reports/**'
      - 'project-data/**'
      - 'github-analysis/**'
  workflow_dispatch:
    inputs:
      skip_publish:
        description: 'Skip auto-publish (validation only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  pre-checks:
    name: Quality & Pre-Flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm install --save-dev homey canvas
          npm install --ignore-scripts
      
      - name: Check JSON Syntax
        continue-on-error: true
        run: |
          echo "üîç Checking JSON files..."
          ERRORS=0
          for file in $(find . -name "*.json" -not -path "./node_modules/*" -not -path "./.homeybuild/*" -not -path "./.git/*"); do
            echo "Validating: $file"
            if ! jq empty "$file" 2>/dev/null; then
              echo "‚ö†Ô∏è Potential issue with: $file"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          if [ $ERRORS -gt 0 ]; then
            echo "‚ö†Ô∏è Found $ERRORS files with potential JSON issues (non-blocking)"
          else
            echo "‚úÖ All JSON files valid"
          fi
      
      - name: Check CHANGELOG.md
        run: |
          echo "üìã Checking CHANGELOG.md..."
          
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ö†Ô∏è WARNING: CHANGELOG.md not found"
            echo "Creating basic CHANGELOG.md"
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          fi
          
          # Check if CHANGELOG has recent updates
          LINES=$(wc -l < CHANGELOG.md)
          if [ $LINES -lt 5 ]; then
            echo "‚ö†Ô∏è WARNING: CHANGELOG.md seems empty or too short"
          else
            echo "‚úÖ CHANGELOG.md exists ($LINES lines)"
          fi
          
          # Check for version entry in CHANGELOG
          VERSION=$(jq -r '.version' app.json)
          if grep -q "\[$VERSION\]" CHANGELOG.md; then
            echo "‚úÖ Version $VERSION found in CHANGELOG"
          else
            echo "‚ÑπÔ∏è Version $VERSION not yet in CHANGELOG (will be added)"
          fi
      
      - name: Check .homeychangelog.json
        run: |
          echo "üìù Checking .homeychangelog.json..."
          
          if [ ! -f ".homeychangelog.json" ]; then
            echo "‚ö†Ô∏è WARNING: .homeychangelog.json not found"
            echo "Creating basic .homeychangelog.json"
            echo "{}" > .homeychangelog.json
          fi
          
          # Validate JSON syntax
          if ! jq empty .homeychangelog.json 2>/dev/null; then
            echo "‚ùå Invalid .homeychangelog.json"
            exit 1
          fi
          
          # Check if it has entries
          ENTRIES=$(jq 'length' .homeychangelog.json)
          echo "‚úÖ .homeychangelog.json valid ($ENTRIES versions)"
          
          # Check last entry is user-friendly (not too technical)
          LAST_VERSION=$(jq -r 'keys | .[-1]' .homeychangelog.json)
          if [ "$LAST_VERSION" != "null" ]; then
            LAST_MESSAGE=$(jq -r ".\"$LAST_VERSION\".en" .homeychangelog.json)
            echo "Last entry: $LAST_MESSAGE"
            
            # Check if message is user-friendly (no technical jargon)
            if echo "$LAST_MESSAGE" | grep -iE "refactor|async|await|promise|sdk|api|npm"; then
              echo "‚ö†Ô∏è WARNING: Last changelog contains technical terms"
              echo "Consider using user-friendly language"
            fi
          fi
      
      - name: Check README.md Quality
        run: |
          echo "üìñ Checking README.md quality..."
          
          if [ ! -f "README.md" ]; then
            echo "‚ùå ERROR: README.md not found"
            exit 1
          fi
          
          # Check README size
          SIZE=$(wc -c < README.md)
          LINES=$(wc -l < README.md)
          
          if [ $SIZE -lt 1000 ]; then
            echo "‚ö†Ô∏è WARNING: README.md is very short ($SIZE bytes)"
          else
            echo "‚úÖ README.md exists ($LINES lines, $SIZE bytes)"
          fi
          
          # Check for essential sections
          MISSING_SECTIONS=""
          
          if ! grep -qi "installation" README.md; then
            MISSING_SECTIONS="${MISSING_SECTIONS}Installation, "
          fi
          
          if ! grep -qi "usage\|how to\|getting started" README.md; then
            MISSING_SECTIONS="${MISSING_SECTIONS}Usage, "
          fi
          
          if ! grep -qi "license" README.md; then
            MISSING_SECTIONS="${MISSING_SECTIONS}License, "
          fi
          
          if [ -n "$MISSING_SECTIONS" ]; then
            echo "‚ö†Ô∏è WARNING: Missing sections: $MISSING_SECTIONS"
          else
            echo "‚úÖ README.md has essential sections"
          fi
      
      - name: Check Driver Structure
        run: |
          echo "üîç Checking driver structure..."
          DRIVERS_COUNT=$(find drivers -maxdepth 1 -mindepth 1 -type d 2>/dev/null | wc -l)
          echo "Found $DRIVERS_COUNT drivers"
          
          if [ $DRIVERS_COUNT -eq 0 ]; then
            echo "‚ùå No drivers found"
            exit 1
          fi
          
          # Check each driver has required files
          ERRORS=0
          for driver_dir in drivers/*/; do
            driver_name=$(basename "$driver_dir")
            
            # Check driver.compose.json or driver.json
            if [ ! -f "${driver_dir}driver.compose.json" ] && [ ! -f "${driver_dir}driver.json" ]; then
              echo "‚ö†Ô∏è WARNING: $driver_name missing driver manifest"
              ERRORS=$((ERRORS + 1))
            fi
            
            # Check device.js
            if [ ! -f "${driver_dir}device.js" ]; then
              echo "‚ö†Ô∏è WARNING: $driver_name missing device.js"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          if [ $ERRORS -gt 0 ]; then
            echo "‚ö†Ô∏è Found $ERRORS driver issues (non-blocking)"
          fi
          
          echo "‚úÖ Driver structure OK ($DRIVERS_COUNT drivers)"
      
      - name: Check Commit Message Quality
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_BODY=$(git log -1 --pretty=format:"%b")
          echo "Commit message: $COMMIT_MSG"
          
          # Check commit message length
          MSG_LENGTH=${#COMMIT_MSG}
          if [ $MSG_LENGTH -lt 10 ]; then
            echo "‚ö†Ô∏è WARNING: Commit message is very short ($MSG_LENGTH chars)"
          elif [ $MSG_LENGTH -gt 100 ]; then
            echo "‚ö†Ô∏è WARNING: Commit message is very long ($MSG_LENGTH chars)"
          else
            echo "‚úÖ Commit message length OK ($MSG_LENGTH chars)"
          fi
          
          # Check for conventional commit format
          if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:"; then
            echo "‚úÖ Commit follows conventional format"
          else
            echo "‚ÑπÔ∏è Commit doesn't follow conventional format (not required)"
          fi
          
          # Check for spelling in common words
          if echo "$COMMIT_MSG" | grep -iE "teh|recieve|occured|seperate|definately"; then
            echo "‚ö†Ô∏è WARNING: Possible spelling errors in commit message"
          fi
          
          # Skip publish if commit contains [skip ci], [skip publish] or starts with docs:
          if echo "$COMMIT_MSG" | grep -iE "\[skip (ci|publish)\]|^docs:|^doc:"; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping publish based on commit message"
          elif [ "${{ github.event.inputs.skip_publish }}" = "true" ]; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping publish (manual input)"
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Will publish"
          fi
      
      - name: Quality Check Summary
        run: |
          echo "## üìä Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **JSON files:** Valid" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **CHANGELOG.md:** Present" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **.homeychangelog.json:** Valid" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **README.md:** Quality checked" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Drivers:** Structure verified" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Commit message:** Quality checked" >> $GITHUB_STEP_SUMMARY

  validate:
    name: Validate Homey App
    needs: pre-checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: üßπ Force Clean Cache (Fresh Build)
        run: |
          echo "üßπ Cleaning all caches for fresh build..."
          rm -rf .homeybuild .homeycompose node_modules/.cache || true
          echo "‚úÖ Cache cleaned - will rebuild from scratch"
      
      - name: üì¶ Install Image Processing Dependencies
        run: |
          echo "üì¶ Installing canvas and pngjs for image validation..."
          npm install --save-dev canvas pngjs
      
      - name: üñºÔ∏è Validate Image Paths & Dimensions
        run: |
          echo "üñºÔ∏è Validating image paths and dimensions..."
          
          ERRORS=0
          WARNINGS=0
          
          # 1. Check app-level images exist and have correct sizes
          echo ""
          echo "üìã 1. Checking APP images (assets/images/)..."
          
          if [ ! -d "assets/images" ]; then
            echo "‚ùå CRITICAL: assets/images/ directory missing!"
            ERRORS=$((ERRORS+1))
          else
            # App images specs: 250x175, 500x350, 1000x700
            for img in small large xlarge; do
              img_path="assets/images/${img}.png"
              if [ ! -f "$img_path" ]; then
                echo "‚ùå Missing: $img_path"
                ERRORS=$((ERRORS+1))
              else
                if command -v identify &> /dev/null; then
                  dims=$(identify -format "%wx%h" "$img_path" 2>/dev/null)
                  case $img in
                    small)
                      expected="250x175"
                      ;;
                    large)
                      expected="500x350"
                      ;;
                    xlarge)
                      expected="1000x700"
                      ;;
                  esac
                  
                  if [ "$dims" = "$expected" ]; then
                    echo "‚úÖ $img_path: $dims"
                  else
                    echo "‚ùå $img_path: $dims (expected $expected)"
                    ERRORS=$((ERRORS+1))
                  fi
                else
                  echo "‚ö†Ô∏è  Cannot verify $img_path (ImageMagick not installed)"
                  WARNINGS=$((WARNINGS+1))
                fi
              fi
            done
          fi
          
          # 2. Check driver images exist and have correct sizes
          echo ""
          echo "üìã 2. Checking DRIVER images (sample 20 drivers)..."
          
          CHECKED=0
          for driver_dir in drivers/*/; do
            if [ $CHECKED -ge 20 ]; then
              break
            fi
            
            driver_name=$(basename "$driver_dir")
            assets_dir="${driver_dir}assets"
            
            if [ ! -d "$assets_dir" ]; then
              echo "‚ö†Ô∏è  $driver_name: no assets/ directory"
              WARNINGS=$((WARNINGS+1))
              continue
            fi
            
            # Driver images specs: 75x75, 500x500, 1000x1000
            driver_errors=0
            for img in small large xlarge; do
              img_path="${assets_dir}/${img}.png"
              if [ ! -f "$img_path" ]; then
                echo "‚ùå $driver_name: missing ${img}.png"
                driver_errors=$((driver_errors+1))
              else
                if command -v identify &> /dev/null; then
                  dims=$(identify -format "%wx%h" "$img_path" 2>/dev/null)
                  case $img in
                    small)
                      expected="75x75"
                      ;;
                    large)
                      expected="500x500"
                      ;;
                    xlarge)
                      expected="1000x1000"
                      ;;
                  esac
                  
                  if [ "$dims" != "$expected" ]; then
                    echo "‚ùå $driver_name/${img}.png: $dims (expected $expected)"
                    driver_errors=$((driver_errors+1))
                  fi
                fi
              fi
            done
            
            if [ $driver_errors -eq 0 ]; then
              echo "‚úÖ $driver_name: all images valid"
            else
              ERRORS=$((ERRORS+driver_errors))
            fi
            
            CHECKED=$((CHECKED+1))
          done
          
          # 3. Check for path conflicts (crucial!)
          echo ""
          echo "üìã 3. Checking for path conflicts..."
          
          # Verify app.json references
          if grep -q '"small": "/assets/images/small.png"' app.json; then
            echo "‚úÖ app.json correctly references /assets/images/small.png"
          else
            echo "‚ùå app.json has wrong image path"
            ERRORS=$((ERRORS+1))
          fi
          
          # Verify drivers reference their own assets
          SAMPLE_DRIVER=$(find drivers -name "driver.compose.json" | head -1)
          if [ -f "$SAMPLE_DRIVER" ]; then
            if grep -q '"small": "./assets/small.png"' "$SAMPLE_DRIVER"; then
              echo "‚úÖ Drivers correctly reference ./assets/small.png"
            else
              echo "‚ö†Ô∏è  Some drivers may have incorrect image paths"
              WARNINGS=$((WARNINGS+1))
            fi
          fi
          
          # Summary
          echo ""
          echo "========================================"
          echo "üìä VALIDATION SUMMARY"
          echo "========================================"
          echo "Errors: $ERRORS"
          echo "Warnings: $WARNINGS"
          echo ""
          
          if [ $ERRORS -gt 0 ]; then
            echo "‚ùå CRITICAL ERRORS FOUND - Validation will likely fail!"
            echo "   Please fix image paths and dimensions before continuing."
            exit 1
          elif [ $WARNINGS -gt 0 ]; then
            echo "‚ö†Ô∏è  Warnings found, but continuing..."
          else
            echo "‚úÖ All image paths and dimensions valid!"
          fi
      
      - name: Validate App (Official Athom Action)
        uses: athombv/github-action-homey-app-validate@master
        with:
          level: publish
      
      - name: Validation Success
        run: |
          echo "## ‚úÖ Validation Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "App validated at **publish** level" >> $GITHUB_STEP_SUMMARY

  auto-publish:
    name: Auto-Publish to Homey App Store
    needs: [pre-checks, validate]
    if: needs.pre-checks.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate User-Friendly Changelog
        id: changelog
        run: |
          LAST_COMMIT=$(git log -1 --pretty=format:"%s")
          COMMIT_BODY=$(git log -1 --pretty=format:"%b")
          echo "Last commit: $LAST_COMMIT"
          
          # Extract meaningful content from commit message
          # Remove technical prefixes and cleanup
          COMMIT_CLEAN=$(echo "$LAST_COMMIT" | sed -E 's/^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\([^)]+\))?:\s*//i')
          
          # Detect version type and generate USER-FRIENDLY changelog
          if echo "$LAST_COMMIT" | grep -iE "^feat|feature|^add"; then
            VERSION_TYPE="minor"
            
            # Generate user-friendly message for new features
            if echo "$COMMIT_CLEAN" | grep -iE "sensor|device|driver"; then
              # Count devices if mentioned
              if echo "$COMMIT_CLEAN" | grep -oE "[0-9]+" | head -1; then
                COUNT=$(echo "$COMMIT_CLEAN" | grep -oE "[0-9]+" | head -1)
                CHANGELOG="Added support for $COUNT new devices"
              else
                CHANGELOG="Added support for new devices"
              fi
            elif echo "$COMMIT_CLEAN" | grep -iE "flow|automation"; then
              CHANGELOG="New automation features added"
            else
              # Use cleaned commit message
              CHANGELOG="New feature: ${COMMIT_CLEAN:0:50}"
            fi
            
          elif echo "$LAST_COMMIT" | grep -iE "^fix|bug|^patch"; then
            VERSION_TYPE="patch"
            
            # Generate user-friendly message for fixes
            if echo "$COMMIT_CLEAN" | grep -iE "temperature|sensor|reading"; then
              CHANGELOG="Fixed sensor readings and improved accuracy"
            elif echo "$COMMIT_CLEAN" | grep -iE "pairing|connection|connect"; then
              CHANGELOG="Fixed device pairing issues"
            elif echo "$COMMIT_CLEAN" | grep -iE "crash|error|fail"; then
              CHANGELOG="Fixed stability issues and crashes"
            else
              CHANGELOG="Bug fix: ${COMMIT_CLEAN:0:50}"
            fi
            
          elif echo "$LAST_COMMIT" | grep -iE "^break|^major|breaking"; then
            VERSION_TYPE="major"
            CHANGELOG="Important update: ${COMMIT_CLEAN:0:50}"
            
          elif echo "$LAST_COMMIT" | grep -iE "device|manufacturer|driver"; then
            VERSION_TYPE="patch"
            if echo "$COMMIT_CLEAN" | grep -oE "[0-9]+"; then
              COUNT=$(echo "$COMMIT_CLEAN" | grep -oE "[0-9]+" | head -1)
              CHANGELOG="Improved compatibility with $COUNT devices"
            else
              CHANGELOG="Improved device compatibility"
            fi
            
          elif echo "$LAST_COMMIT" | grep -iE "forum|community|issue"; then
            VERSION_TYPE="patch"
            CHANGELOG="Fixed issues reported by the community"
            
          else
            VERSION_TYPE="patch"
            # Try to use cleaned commit message if short enough
            if [ ${#COMMIT_CLEAN} -lt 60 ]; then
              CHANGELOG="$COMMIT_CLEAN"
            else
              CHANGELOG="Performance and stability improvements"
            fi
          fi
          
          # Remove technical terms for user-friendliness
          CHANGELOG=$(echo "$CHANGELOG" | sed -E 's/\b(async|await|promise|sdk|api|npm|refactor|typescript|eslint)\b//gi')
          
          # Capitalize first letter
          CHANGELOG="$(echo ${CHANGELOG:0:1} | tr '[:lower:]' '[:upper:]')${CHANGELOG:1}"
          
          # Ensure proper ending
          if ! echo "$CHANGELOG" | grep -qE '\.$'; then
            CHANGELOG="${CHANGELOG}."
          fi
          
          # Sanitize and limit (Homey max 400 chars)
          CHANGELOG=$(echo "$CHANGELOG" | tr -d '\r\n' | sed 's/  */ /g' | head -c 400)
          
          # Final check: if too technical or empty, use default
          if [ -z "$CHANGELOG" ] || [ "$CHANGELOG" = "." ]; then
            CHANGELOG="App improvements and updates."
          fi
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
          echo "üìù Version type: $VERSION_TYPE"
          echo "üìù User-friendly changelog: $CHANGELOG"
      
      - name: Update App Version (Official Athom Action)
        uses: athombv/github-action-homey-app-version@master
        id: version
        with:
          version: ${{ steps.changelog.outputs.version_type }}
          changelog: ${{ steps.changelog.outputs.changelog }}
      
      - name: Commit Version Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add app.json .homeychangelog.json
            git commit -m "chore: bump version to v${{ steps.version.outputs.version }} [skip ci]"
            
            # Pull with rebase to handle any changes
            git pull --rebase origin master || {
              echo "‚ö†Ô∏è Pull failed, retrying..."
              git pull --rebase origin master
            }
            
            # Push changes
            git push origin HEAD:master || {
              echo "‚ö†Ô∏è Push failed, retrying..."
              git pull --rebase origin master
              git push origin HEAD:master
            }
            
            echo "‚úÖ Version v${{ steps.version.outputs.version }} committed and pushed"
          else
            echo "‚ÑπÔ∏è No version changes to commit"
          fi
      
      - name: Wait for Git Sync
        run: |
          echo "‚è≥ Waiting 5 seconds for git to sync..."
          sleep 5
      
      - name: Publish to Homey App Store (Official Athom Action)
        uses: athombv/github-action-homey-app-publish@master
        id: publish
        with:
          personal_access_token: ${{ secrets.HOMEY_PAT }}
      
      - name: Publication Summary
        run: |
          echo "## üéâ Auto-Publication Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.changelog.outputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changelog:** ${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Developer Dashboard](https://tools.developer.homey.app)" >> $GITHUB_STEP_SUMMARY
          echo "2. Find **Universal Tuya Zigbee v${{ steps.version.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "3. **Promote to Test** or submit for certification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Dashboard](https://tools.developer.homey.app/apps/app/com.dlnraja.tuya.zigbee)" >> $GITHUB_STEP_SUMMARY
          echo "- [Test URL](https://homey.app/a/com.dlnraja.tuya.zigbee/test/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Live URL](https://homey.app/a/com.dlnraja.tuya.zigbee/)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Build Summary
    needs: [pre-checks, validate, auto-publish]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## üìä Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-checks:** ${{ needs.pre-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Validation:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Publication:** ${{ needs.auto-publish.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.auto-publish.result }}" = "success" ]; then
            echo "‚úÖ **Auto-publish completed successfully**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.auto-publish.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Auto-publish skipped** (validation only)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Pipeline failed** - Check logs above" >> $GITHUB_STEP_SUMMARY
          fi
