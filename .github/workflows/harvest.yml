name: Harvest & Proposals

on:
  schedule:
    - cron: '0 5 * * 1'  # Every Monday at 5 AM
  workflow_dispatch:     # Allow manual trigger

jobs:
  harvest:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Run harvest
      run: npm run harvest
      continue-on-error: true
    
    - name: Run inference
      run: npm run infer
    
    - name: Generate proposals
      run: npm run propose
    
    - name: Create snapshot
      run: |
        mkdir -p research/snapshots/$(date +%Y-%m-%d)
        cp -r research/extract research/snapshots/$(date +%Y-%m-%d)/
        cp -r research/proposals research/snapshots/$(date +%Y-%m-%d)/
    
    - name: Update DEVICE_MATRIX.json
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        const matrix = {};
        
        // Load all overlays
        const overlaysDir = 'lib/tuya/overlays/vendors';
        if (fs.existsSync(overlaysDir)) {
          const vendors = fs.readdirSync(overlaysDir);
          vendors.forEach(vendor => {
            const vendorDir = path.join(overlaysDir, vendor);
            if (fs.statSync(vendorDir).isDirectory()) {
              const files = fs.readdirSync(vendorDir).filter(f => f.endsWith('.json'));
              files.forEach(file => {
                const overlay = JSON.parse(fs.readFileSync(path.join(vendorDir, file), 'utf8'));
                const key = vendor + ':' + (overlay.productIds ? overlay.productIds[0] : 'unknown');
                matrix[key] = {
                  vendor,
                  productIds: overlay.productIds || [],
                  type: overlay.type || 'generic',
                  status: overlay.status || 'proposed',
                  confidence: overlay.confidence || 0,
                  sources: overlay.sources || []
                };
              });
            }
          });
        }
        
        fs.writeFileSync('DEVICE_MATRIX.json', JSON.stringify(matrix, null, 2));
        "
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'ðŸ¤– Weekly harvest - ${{ steps.date.outputs.date }}'
        title: '[Harvest] Device proposals - ${{ steps.date.outputs.date }}'
        body: |
          ## ðŸŒ¾ Weekly Harvest Results
          
          This PR contains automatically generated device overlay proposals based on harvested data.
          
          ### Review Checklist
          - [ ] Type & capabilities match Compose family
          - [ ] Fingerprints (manufacturer/productId) confirmed
          - [ ] DP mappings verified
          - [ ] Confidence scores reasonable
          
          ### Files Changed
          - `research/proposals/*.json` - New proposals
          - `lib/tuya/overlays/vendors/` - Proposed overlays
          - `DEVICE_MATRIX.json` - Updated device matrix
          
          ---
          *Generated by GitHub Actions harvest workflow*
        branch: integration/proposals-${{ steps.date.outputs.date }}
        delete-branch: true
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT