#!/usr/bin/env node
'use strict';

'use strict';

const { ZigBeeDevice } = require('homey-zigbeedriver');
const attachZBVerbose = require('../../..//lib/zb-verbose');

class IkeaMotion-981 extends ZigBeeDevice {
    
    async onNodeInit({ zclNode, node }) {
        await super.onNodeInit({ zclNode, node });
        
        // Mode heuristique : d√©couverte automatique des fonctionnalit√©s
        await this.discoverDeviceCapabilities(zclNode);
        
        // Enregistrement des capacit√©s avec fallback intelligent
        await this.registerCapabilitiesIntelligently(zclNode);
    }
    
    async discoverDeviceCapabilities(zclNode) {
        try {
            // D√©couverte automatique des clusters disponibles
            const clusters = zclNode.clusters;
            this.log('üîç Clusters d√©couverts:', Object.keys(clusters));
            
            // D√©couverte des attributs et commandes
            for (const [clusterId, cluster] of Object.entries(clusters)) {
                if (cluster.attributes) {
                    this.log(`üìä Cluster ${clusterId} - Attributs:`, Object.keys(cluster.attributes));
                }
                if (cluster.commands) {
                    this.log(`üéÆ Cluster ${clusterId} - Commandes:`, Object.keys(cluster.commands));
                }
            }
        } catch (error) {
            this.log('‚ö†Ô∏è Erreur lors de la d√©couverte des capacit√©s:', error.message);
        }
    }
    
    async registerCapabilitiesIntelligently(zclNode) {
        try {
            // Enregistrement intelligent des capacit√©s selon la cat√©gorie
            const fallback = this.genericFallbacks.get('sensor-motion') || this.genericFallbacks.get('light');
            
            for (const capability of fallback.capabilities) {
                try {
                    await this.registerCapability(capability, capability, {
                        get: 'get',
                        set: capability.startsWith('measure_') ? false : 'set',
                        report: 'report'
                    });
                    this.log(`‚úÖ Capacit√© ${capability} enregistr√©e`);
                } catch (error) {
                    this.log(`‚ö†Ô∏è Impossible d'enregistrer la capacit√© ${capability}:`, error.message);
                }
            }
            
            // Configuration du reporting Zigbee
            await this.configureZigbeeReporting(zclNode);
            
        } catch (error) {
            this.log('‚ùå Erreur lors de l'enregistrement des capacit√©s:', error.message);
        }
    }
    
    async configureZigbeeReporting(zclNode) {
        try {
            // Configuration intelligente du reporting selon les clusters disponibles
            const clusters = zclNode.clusters;
            
            if (clusters.genBasic) {
                await zclNode.endpoints[1].clusters.genBasic.read('zclVersion');
            }
            
            if (clusters.genOnOff) {
                await zclNode.endpoints[1].clusters.genOnOff.read('onOff');
            }
            
            if (clusters.genLevelCtrl) {
                await zclNode.endpoints[1].clusters.genLevelCtrl.read('currentLevel');
            }
            
            this.log('üì° Reporting Zigbee configur√©');
            
        } catch (error) {
            this.log('‚ö†Ô∏è Erreur lors de la configuration du reporting:', error.message);
        }
    }
    
    // M√©thodes de fallback pour la compatibilit√© firmware
    async onSettings(oldSettings, newSettings, changedKeys) {
        this.log('‚öôÔ∏è Param√®tres mis √† jour:', changedKeys);
        return super.onSettings(oldSettings, newSettings, changedKeys);
    }
    
    async onRenamed(name) {
        this.log('üè∑Ô∏è Appareil renomm√©:', name);
        return super.onRenamed(name);
    }
    
    async onDeleted() {
        this.log('üóëÔ∏è Appareil supprim√©');
        return super.onDeleted();
    }
}

module.exports = IkeaMotion-981;
